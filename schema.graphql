enum AggregationTypeEnum {
  count_agg
  max_agg
  sum_agg
  unique_count_agg
}

type BillableMetric {
  aggregationType: AggregationTypeEnum!

  """
  Check if billable metric is deletable
  """
  canBeDeleted: Boolean!
  code: String!
  createdAt: ISO8601DateTime!
  description: String
  fieldName: String
  id: ID!
  name: String!
  organization: Organization
  updatedAt: ISO8601DateTime!
}

type BillableMetricCollection {
  collection: [BillableMetric!]!
  metadata: CollectionMetadata!
}

type BillableMetricDetail {
  aggregationType: AggregationTypeEnum!

  """
  Check if billable metric is deletable
  """
  canBeDeleted: Boolean!
  code: String!
  createdAt: ISO8601DateTime!
  description: String
  fieldName: String
  id: ID!
  name: String!
  organization: Organization
  updatedAt: ISO8601DateTime!
}

type Charge {
  amountCents: Int
  amountCurrency: CurrencyEnum
  billableMetric: BillableMetric!
  chargeModel: ChargeModelEnum!
  createdAt: ISO8601DateTime!
  freeUnits: Int
  graduatedRanges: [GraduatedRange!]
  id: ID!
  packageSize: Int
  updatedAt: ISO8601DateTime!
}

input ChargeInput {
  amountCents: Int
  amountCurrency: CurrencyEnum!
  billableMetricId: ID!
  chargeModel: ChargeModelEnum!
  freeUnits: Int
  graduatedRanges: [GraduatedRangeInput!]
  id: ID
  packageSize: Int
}

enum ChargeModelEnum {
  graduated
  package
  standard
}

type CollectionMetadata {
  currentPage: Int!
  limitValue: Int!
  totalCount: Int!
  totalPages: Int!
}

enum CountryCode {
  """
  Andorra
  """
  AD

  """
  United Arab Emirates
  """
  AE

  """
  Afghanistan
  """
  AF

  """
  Antigua and Barbuda
  """
  AG

  """
  Anguilla
  """
  AI

  """
  Albania
  """
  AL

  """
  Armenia
  """
  AM

  """
  Angola
  """
  AO

  """
  Antarctica
  """
  AQ

  """
  Argentina
  """
  AR

  """
  American Samoa
  """
  AS

  """
  Austria
  """
  AT

  """
  Australia
  """
  AU

  """
  Aruba
  """
  AW

  """
  Åland Islands
  """
  AX

  """
  Azerbaijan
  """
  AZ

  """
  Bosnia and Herzegovina
  """
  BA

  """
  Barbados
  """
  BB

  """
  Bangladesh
  """
  BD

  """
  Belgium
  """
  BE

  """
  Burkina Faso
  """
  BF

  """
  Bulgaria
  """
  BG

  """
  Bahrain
  """
  BH

  """
  Burundi
  """
  BI

  """
  Benin
  """
  BJ

  """
  Saint Barthélemy
  """
  BL

  """
  Bermuda
  """
  BM

  """
  Brunei Darussalam
  """
  BN

  """
  Bolivia (Plurinational State of)
  """
  BO

  """
  Bonaire, Sint Eustatius and Saba
  """
  BQ

  """
  Brazil
  """
  BR

  """
  Bahamas
  """
  BS

  """
  Bhutan
  """
  BT

  """
  Bouvet Island
  """
  BV

  """
  Botswana
  """
  BW

  """
  Belarus
  """
  BY

  """
  Belize
  """
  BZ

  """
  Canada
  """
  CA

  """
  Cocos (Keeling) Islands
  """
  CC

  """
  Congo (Democratic Republic of the)
  """
  CD

  """
  Central African Republic
  """
  CF

  """
  Congo
  """
  CG

  """
  Switzerland
  """
  CH

  """
  Côte d'Ivoire
  """
  CI

  """
  Cook Islands
  """
  CK

  """
  Chile
  """
  CL

  """
  Cameroon
  """
  CM

  """
  China
  """
  CN

  """
  Colombia
  """
  CO

  """
  Costa Rica
  """
  CR

  """
  Cuba
  """
  CU

  """
  Cabo Verde
  """
  CV

  """
  Curaçao
  """
  CW

  """
  Christmas Island
  """
  CX

  """
  Cyprus
  """
  CY

  """
  Czechia
  """
  CZ

  """
  Germany
  """
  DE

  """
  Djibouti
  """
  DJ

  """
  Denmark
  """
  DK

  """
  Dominica
  """
  DM

  """
  Dominican Republic
  """
  DO

  """
  Algeria
  """
  DZ

  """
  Ecuador
  """
  EC

  """
  Estonia
  """
  EE

  """
  Egypt
  """
  EG

  """
  Western Sahara
  """
  EH

  """
  Eritrea
  """
  ER

  """
  Spain
  """
  ES

  """
  Ethiopia
  """
  ET

  """
  Finland
  """
  FI

  """
  Fiji
  """
  FJ

  """
  Falkland Islands (Malvinas)
  """
  FK

  """
  Micronesia (Federated States of)
  """
  FM

  """
  Faroe Islands
  """
  FO

  """
  France
  """
  FR

  """
  Gabon
  """
  GA

  """
  United Kingdom of Great Britain and Northern Ireland
  """
  GB

  """
  Grenada
  """
  GD

  """
  Georgia
  """
  GE

  """
  French Guiana
  """
  GF

  """
  Guernsey
  """
  GG

  """
  Ghana
  """
  GH

  """
  Gibraltar
  """
  GI

  """
  Greenland
  """
  GL

  """
  Gambia
  """
  GM

  """
  Guinea
  """
  GN

  """
  Guadeloupe
  """
  GP

  """
  Equatorial Guinea
  """
  GQ

  """
  Greece
  """
  GR

  """
  South Georgia and the South Sandwich Islands
  """
  GS

  """
  Guatemala
  """
  GT

  """
  Guam
  """
  GU

  """
  Guinea-Bissau
  """
  GW

  """
  Guyana
  """
  GY

  """
  Hong Kong
  """
  HK

  """
  Heard Island and McDonald Islands
  """
  HM

  """
  Honduras
  """
  HN

  """
  Croatia
  """
  HR

  """
  Haiti
  """
  HT

  """
  Hungary
  """
  HU

  """
  Indonesia
  """
  ID

  """
  Ireland
  """
  IE

  """
  Israel
  """
  IL

  """
  Isle of Man
  """
  IM

  """
  India
  """
  IN

  """
  British Indian Ocean Territory
  """
  IO

  """
  Iraq
  """
  IQ

  """
  Iran (Islamic Republic of)
  """
  IR

  """
  Iceland
  """
  IS

  """
  Italy
  """
  IT

  """
  Jersey
  """
  JE

  """
  Jamaica
  """
  JM

  """
  Jordan
  """
  JO

  """
  Japan
  """
  JP

  """
  Kenya
  """
  KE

  """
  Kyrgyzstan
  """
  KG

  """
  Cambodia
  """
  KH

  """
  Kiribati
  """
  KI

  """
  Comoros
  """
  KM

  """
  Saint Kitts and Nevis
  """
  KN

  """
  Korea (Democratic People's Republic of)
  """
  KP

  """
  Korea (Republic of)
  """
  KR

  """
  Kuwait
  """
  KW

  """
  Cayman Islands
  """
  KY

  """
  Kazakhstan
  """
  KZ

  """
  Lao People's Democratic Republic
  """
  LA

  """
  Lebanon
  """
  LB

  """
  Saint Lucia
  """
  LC

  """
  Liechtenstein
  """
  LI

  """
  Sri Lanka
  """
  LK

  """
  Liberia
  """
  LR

  """
  Lesotho
  """
  LS

  """
  Lithuania
  """
  LT

  """
  Luxembourg
  """
  LU

  """
  Latvia
  """
  LV

  """
  Libya
  """
  LY

  """
  Morocco
  """
  MA

  """
  Monaco
  """
  MC

  """
  Moldova (Republic of)
  """
  MD

  """
  Montenegro
  """
  ME

  """
  Saint Martin (French part)
  """
  MF

  """
  Madagascar
  """
  MG

  """
  Marshall Islands
  """
  MH

  """
  North Macedonia
  """
  MK

  """
  Mali
  """
  ML

  """
  Myanmar
  """
  MM

  """
  Mongolia
  """
  MN

  """
  Macao
  """
  MO

  """
  Northern Mariana Islands
  """
  MP

  """
  Martinique
  """
  MQ

  """
  Mauritania
  """
  MR

  """
  Montserrat
  """
  MS

  """
  Malta
  """
  MT

  """
  Mauritius
  """
  MU

  """
  Maldives
  """
  MV

  """
  Malawi
  """
  MW

  """
  Mexico
  """
  MX

  """
  Malaysia
  """
  MY

  """
  Mozambique
  """
  MZ

  """
  Namibia
  """
  NA

  """
  New Caledonia
  """
  NC

  """
  Niger
  """
  NE

  """
  Norfolk Island
  """
  NF

  """
  Nigeria
  """
  NG

  """
  Nicaragua
  """
  NI

  """
  Netherlands
  """
  NL

  """
  Norway
  """
  NO

  """
  Nepal
  """
  NP

  """
  Nauru
  """
  NR

  """
  Niue
  """
  NU

  """
  New Zealand
  """
  NZ

  """
  Oman
  """
  OM

  """
  Panama
  """
  PA

  """
  Peru
  """
  PE

  """
  French Polynesia
  """
  PF

  """
  Papua New Guinea
  """
  PG

  """
  Philippines
  """
  PH

  """
  Pakistan
  """
  PK

  """
  Poland
  """
  PL

  """
  Saint Pierre and Miquelon
  """
  PM

  """
  Pitcairn
  """
  PN

  """
  Puerto Rico
  """
  PR

  """
  Palestine, State of
  """
  PS

  """
  Portugal
  """
  PT

  """
  Palau
  """
  PW

  """
  Paraguay
  """
  PY

  """
  Qatar
  """
  QA

  """
  Réunion
  """
  RE

  """
  Romania
  """
  RO

  """
  Serbia
  """
  RS

  """
  Russian Federation
  """
  RU

  """
  Rwanda
  """
  RW

  """
  Saudi Arabia
  """
  SA

  """
  Solomon Islands
  """
  SB

  """
  Seychelles
  """
  SC

  """
  Sudan
  """
  SD

  """
  Sweden
  """
  SE

  """
  Singapore
  """
  SG

  """
  Saint Helena, Ascension and Tristan da Cunha
  """
  SH

  """
  Slovenia
  """
  SI

  """
  Svalbard and Jan Mayen
  """
  SJ

  """
  Slovakia
  """
  SK

  """
  Sierra Leone
  """
  SL

  """
  San Marino
  """
  SM

  """
  Senegal
  """
  SN

  """
  Somalia
  """
  SO

  """
  Suriname
  """
  SR

  """
  South Sudan
  """
  SS

  """
  Sao Tome and Principe
  """
  ST

  """
  El Salvador
  """
  SV

  """
  Sint Maarten (Dutch part)
  """
  SX

  """
  Syrian Arab Republic
  """
  SY

  """
  Eswatini
  """
  SZ

  """
  Turks and Caicos Islands
  """
  TC

  """
  Chad
  """
  TD

  """
  French Southern Territories
  """
  TF

  """
  Togo
  """
  TG

  """
  Thailand
  """
  TH

  """
  Tajikistan
  """
  TJ

  """
  Tokelau
  """
  TK

  """
  Timor-Leste
  """
  TL

  """
  Turkmenistan
  """
  TM

  """
  Tunisia
  """
  TN

  """
  Tonga
  """
  TO

  """
  Turkey
  """
  TR

  """
  Trinidad and Tobago
  """
  TT

  """
  Tuvalu
  """
  TV

  """
  Taiwan, Province of China
  """
  TW

  """
  Tanzania, United Republic of
  """
  TZ

  """
  Ukraine
  """
  UA

  """
  Uganda
  """
  UG

  """
  United States Minor Outlying Islands
  """
  UM

  """
  United States of America
  """
  US

  """
  Uruguay
  """
  UY

  """
  Uzbekistan
  """
  UZ

  """
  Holy See
  """
  VA

  """
  Saint Vincent and the Grenadines
  """
  VC

  """
  Venezuela (Bolivarian Republic of)
  """
  VE

  """
  Virgin Islands (British)
  """
  VG

  """
  Virgin Islands (U.S.)
  """
  VI

  """
  Viet Nam
  """
  VN

  """
  Vanuatu
  """
  VU

  """
  Wallis and Futuna
  """
  WF

  """
  Samoa
  """
  WS

  """
  Yemen
  """
  YE

  """
  Mayotte
  """
  YT

  """
  South Africa
  """
  ZA

  """
  Zambia
  """
  ZM

  """
  Zimbabwe
  """
  ZW
}

"""
Autogenerated input type of CreateBillableMetric
"""
input CreateBillableMetricInput {
  aggregationType: AggregationTypeEnum!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  code: String!
  description: String!
  fieldName: String
  name: String!
}

"""
Autogenerated input type of CreateCustomer
"""
input CreateCustomerInput {
  addressLine1: String
  addressLine2: String
  city: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  country: CountryCode
  customerId: String!
  email: String
  legalName: String
  legalNumber: String
  logoUrl: String
  name: String!
  phone: String
  state: String
  url: String
  vatRate: Float
  zipcode: String
}

"""
Autogenerated input type of CreatePlan
"""
input CreatePlanInput {
  amountCents: Int!
  amountCurrency: CurrencyEnum!
  charges: [ChargeInput!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  code: String!
  description: String
  interval: PlanInterval!
  name: String!
  payInAdvance: Boolean!
  trialPeriod: Float
}

"""
Autogenerated input type of CreateSubscription
"""
input CreateSubscriptionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  customerId: ID!
  planId: ID!
}

enum CurrencyEnum {
  """
  Euro
  """
  EUR

  """
  American Dollar
  """
  USD
}

type Customer {
  addressLine1: String
  addressLine2: String

  """
  Check if customer is deletable
  """
  canBeDeleted: Boolean!
  city: String
  country: CountryCode
  createdAt: ISO8601DateTime!
  customerId: String!
  email: String
  id: ID!
  legalName: String
  legalNumber: String
  logoUrl: String
  name: String
  phone: String
  state: String
  subscriptions: [Subscription!]
  updatedAt: ISO8601DateTime!
  url: String
  vatRate: Float
  zipcode: String
}

type CustomerCollection {
  collection: [Customer!]!
  metadata: CollectionMetadata!
}

type CustomerDetails {
  addressLine1: String
  addressLine2: String

  """
  Check if customer is deletable
  """
  canBeDeleted: Boolean!
  city: String
  country: CountryCode
  createdAt: ISO8601DateTime!
  customerId: String!
  email: String
  id: ID!
  invoices: [Invoice!]
  legalName: String
  legalNumber: String
  logoUrl: String
  name: String
  phone: String
  state: String

  """
  Query subscriptions of a customer
  """
  subscriptions(
    """
    Statuses of subscriptions to retrieve
    """
    status: [StatusTypeEnum!]
  ): [Subscription!]!
  updatedAt: ISO8601DateTime!
  url: String
  vatRate: Float
  zipcode: String
}

"""
Autogenerated input type of DestroyBillableMetric
"""
input DestroyBillableMetricInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: String!
}

"""
Autogenerated return type of DestroyBillableMetric
"""
type DestroyBillableMetricPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated input type of DestroyCustomer
"""
input DestroyCustomerInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of DestroyCustomer
"""
type DestroyCustomerPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated input type of DestroyPlan
"""
input DestroyPlanInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of DestroyPlan
"""
type DestroyPlanPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

type GraduatedRange {
  flatAmountCents: Int!
  fromValue: Int!
  perUnitAmountCents: Int!
  toValue: Int
}

input GraduatedRangeInput {
  flatAmountCents: Int!
  fromValue: Int!
  perUnitAmountCents: Int!
  toValue: Int
}

"""
An ISO 8601-encoded date
"""
scalar ISO8601Date

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

type Invoice {
  amountCents: Int!
  amountCurrency: CurrencyEnum!
  createdAt: ISO8601DateTime!
  fromDate: ISO8601Date!
  id: ID!
  issuingDate: ISO8601Date!
  plan: Plan
  sequentialId: ID!
  subscription: Subscription
  toDate: ISO8601Date!
  totalAmountCents: Int!
  totalAmountCurrency: CurrencyEnum!
  updatedAt: ISO8601DateTime!
  vatAmountCents: Int!
  vatAmountCurrency: CurrencyEnum!
}

type LoginUser {
  token: String!
  user: User!
}

"""
Autogenerated input type of LoginUser
"""
input LoginUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  password: String!
}

type Membership {
  createdAt: ISO8601DateTime!
  id: ID!
  organizationId: Int!
  role: String
  updatedAt: ISO8601DateTime!
  userId: Int!
}

type Mutation {
  """
  Creates a new Billable metric
  """
  createBillableMetric(
    """
    Parameters for CreateBillableMetric
    """
    input: CreateBillableMetricInput!
  ): BillableMetric

  """
  Creates a new customer
  """
  createCustomer(
    """
    Parameters for CreateCustomer
    """
    input: CreateCustomerInput!
  ): Customer

  """
  Creates a new Plan
  """
  createPlan(
    """
    Parameters for CreatePlan
    """
    input: CreatePlanInput!
  ): Plan

  """
  Create a new Subscription
  """
  createSubscription(
    """
    Parameters for CreateSubscription
    """
    input: CreateSubscriptionInput!
  ): Subscription

  """
  Deletes a Billable metric
  """
  destroyBillableMetric(
    """
    Parameters for DestroyBillableMetric
    """
    input: DestroyBillableMetricInput!
  ): DestroyBillableMetricPayload

  """
  Delete a Customer
  """
  destroyCustomer(
    """
    Parameters for DestroyCustomer
    """
    input: DestroyCustomerInput!
  ): DestroyCustomerPayload

  """
  Deletes a Plan
  """
  destroyPlan(
    """
    Parameters for DestroyPlan
    """
    input: DestroyPlanInput!
  ): DestroyPlanPayload

  """
  Opens a session for an existing user
  """
  loginUser(
    """
    Parameters for LoginUser
    """
    input: LoginUserInput!
  ): LoginUser

  """
  Registers a new user and creates related organization
  """
  registerUser(
    """
    Parameters for RegisterUser
    """
    input: RegisterUserInput!
  ): RegisterUser

  """
  Terminate a Subscription
  """
  terminateSubscription(
    """
    Parameters for TerminateSubscription
    """
    input: TerminateSubscriptionInput!
  ): Subscription

  """
  Updates an existing Billable metric
  """
  updateBillableMetric(
    """
    Parameters for UpdateBillableMetric
    """
    input: UpdateBillableMetricInput!
  ): BillableMetric

  """
  Updates an existing Customer
  """
  updateCustomer(
    """
    Parameters for UpdateCustomer
    """
    input: UpdateCustomerInput!
  ): Customer

  """
  Assign the vat rate to Customers
  """
  updateCustomerVatRate(
    """
    Parameters for UpdateCustomerVatRate
    """
    input: UpdateCustomerVatRateInput!
  ): CustomerDetails

  """
  Updates an Organization
  """
  updateOrganization(
    """
    Parameters for UpdateOrganization
    """
    input: UpdateOrganizationInput!
  ): Organization

  """
  Updates an existing Plan
  """
  updatePlan(
    """
    Parameters for UpdatePlan
    """
    input: UpdatePlanInput!
  ): Plan
}

type Organization {
  apiKey: String!
  createdAt: ISO8601DateTime!
  id: ID!
  name: String!
  updatedAt: ISO8601DateTime!
  vatRate: Float!
  webhookUrl: String
}

type Plan {
  amountCents: Int!
  amountCurrency: CurrencyEnum!

  """
  Check if plan is deletable
  """
  canBeDeleted: Boolean!

  """
  Number of charges attached to a plan
  """
  chargeCount: Int!
  charges: [Charge!]
  code: String!
  createdAt: ISO8601DateTime!

  """
  Number of customers attached to a plan
  """
  customerCount: Int!
  description: String
  id: ID!
  interval: PlanInterval!
  name: String!
  organization: Organization
  payInAdvance: Boolean!
  trialPeriod: Float
  updatedAt: ISO8601DateTime!
}

type PlanCollection {
  collection: [Plan!]!
  metadata: CollectionMetadata!
}

type PlanDetails {
  amountCents: Int!
  amountCurrency: CurrencyEnum!

  """
  Check if plan is deletable
  """
  canBeDeleted: Boolean!

  """
  Number of charges attached to a plan
  """
  chargeCount: Int!
  charges: [Charge!]
  code: String!
  createdAt: ISO8601DateTime!

  """
  Number of customers attached to a plan
  """
  customerCount: Int!
  description: String
  id: ID!
  interval: PlanInterval!
  name: String!
  organization: Organization
  payInAdvance: Boolean!
  trialPeriod: Float
  updatedAt: ISO8601DateTime!
}

enum PlanInterval {
  monthly
  weekly
  yearly
}

type Query {
  """
  Query a single billable metric of an organization
  """
  billableMetric(
    """
    Uniq ID of the billable metric
    """
    id: ID!
  ): BillableMetricDetail

  """
  Query billable metrics of an organization
  """
  billableMetrics(
    """
    List of plan ID to fetch
    """
    ids: [String!]
    limit: Int
    page: Int
  ): BillableMetricCollection!

  """
  Retrives currently connected user
  """
  currentUser: User!

  """
  Query a single customer of an organization
  """
  customer(
    """
    Uniq ID of the customer
    """
    id: ID!
  ): CustomerDetails

  """
  Query customers of an organization
  """
  customers(
    """
    List of customer Lago ID to fetch
    """
    ids: [String!]
    limit: Int
    page: Int
  ): CustomerCollection!

  """
  Query a single plan of an organization
  """
  plan(
    """
    Uniq ID of the plan
    """
    id: ID!
  ): PlanDetails

  """
  Query plans of an organization
  """
  plans(
    """
    List of plan ID to fetch
    """
    ids: [String!]
    limit: Int
    page: Int
  ): PlanCollection!
}

type RegisterUser {
  membership: Membership!
  organization: Organization!
  token: String!
  user: User!
}

"""
Autogenerated input type of RegisterUser
"""
input RegisterUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  organizationName: String!
  password: String!
}

enum StatusTypeEnum {
  active
  canceled
  pending
  terminated
}

type Subscription {
  anniversaryDate: ISO8601Date
  canceledAt: ISO8601DateTime
  createdAt: ISO8601DateTime!
  customer: Customer!
  id: ID!
  nextPlan: Plan
  pendingStartDate: ISO8601Date
  plan: Plan!
  startedAt: ISO8601DateTime
  status: StatusTypeEnum
  terminatedAt: ISO8601DateTime
  updatedAt: ISO8601DateTime!
}

"""
Autogenerated input type of TerminateSubscription
"""
input TerminateSubscriptionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated input type of UpdateBillableMetric
"""
input UpdateBillableMetricInput {
  aggregationType: AggregationTypeEnum!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  code: String!
  description: String!
  fieldName: String
  id: String!
  name: String!
}

"""
Autogenerated input type of UpdateCustomer
"""
input UpdateCustomerInput {
  addressLine1: String
  addressLine2: String
  city: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  country: CountryCode
  customerId: String!
  email: String
  id: ID!
  legalName: String
  legalNumber: String
  logoUrl: String
  name: String!
  phone: String
  state: String
  url: String
  vatRate: Float
  zipcode: String
}

"""
Autogenerated input type of UpdateCustomerVatRate
"""
input UpdateCustomerVatRateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
  vatRate: Float
}

"""
Autogenerated input type of UpdateOrganization
"""
input UpdateOrganizationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  vatRate: Float
  webhookUrl: String
}

"""
Autogenerated input type of UpdatePlan
"""
input UpdatePlanInput {
  amountCents: Int!
  amountCurrency: CurrencyEnum!
  charges: [ChargeInput!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  code: String!
  description: String
  id: String!
  interval: PlanInterval!
  name: String!
  payInAdvance: Boolean!
  trialPeriod: Float
}

type User {
  createdAt: ISO8601DateTime!
  email: String
  id: ID!
  organizations: [Organization!]
  updatedAt: ISO8601DateTime!
}
