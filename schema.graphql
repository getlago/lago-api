enum AggregationTypeEnum {
  count_agg
  max_count_agg
  sum_agg
  unique_count_agg
}

type BillableMetric {
  aggregationType: AggregationTypeEnum!

  """
  Check if billable metric is deletable
  """
  canBeDeleted: Boolean!
  code: String!
  createdAt: ISO8601DateTime!
  description: String
  id: ID!
  name: String!
  organization: Organization
  updatedAt: ISO8601DateTime!
}

type BillableMetricCollection {
  collection: [BillableMetric!]!
  metadata: CollectionMetadata!
}

type Charge {
  amountCents: Int!
  amountCurrency: CurrencyEnum!
  billableMetric: BillableMetric!
  chargeModel: ChargeModelEnum!
  createdAt: ISO8601DateTime!
  frequency: ChargeFrequency!
  id: ID!
  proRata: Boolean!
  updatedAt: ISO8601DateTime!
  vatRate: Float
}

enum ChargeFrequency {
  one_time
  recurring
}

input ChargeInput {
  amountCents: Int!
  amountCurrency: CurrencyEnum!
  billableMetricId: ID!
  chargeModel: ChargeModelEnum!
  frequency: ChargeFrequency!
  proRata: Boolean!
  vatRate: Float
}

enum ChargeModelEnum {
  standard
}

type CollectionMetadata {
  currentPage: Int!
  limitValue: Int!
  totalCount: Int!
  totalPages: Int!
}

"""
Autogenerated input type of CreateBillableMetric
"""
input CreateBillableMetricInput {
  aggregationType: AggregationTypeEnum!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  code: String!
  description: String!
  name: String!
}

"""
Autogenerated input type of CreateCustomer
"""
input CreateCustomerInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  customerId: String!
  name: String!
}

"""
Autogenerated input type of CreatePlan
"""
input CreatePlanInput {
  amountCents: Int!
  amountCurrency: CurrencyEnum!
  charges: [ChargeInput!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  code: String!
  description: String
  frequency: FrequencyEnum!
  interval: PlanInterval!
  name: String!
  payInAdvance: Boolean!
  proRata: Boolean!
  trialPeriod: Float
  vatRate: Float
}

"""
Autogenerated input type of CreateSubscription
"""
input CreateSubscriptionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  customerId: String!
  planCode: String!
}

enum CurrencyEnum {
  """
  Euro
  """
  EUR

  """
  American Dollar
  """
  USD
}

type Customer {
  createdAt: ISO8601DateTime!
  customerId: String!
  id: ID!
  name: String
  subscriptions: [Subscription!]
  updatedAt: ISO8601DateTime!
}

type CustomerCollection {
  collection: [Customer!]!
  metadata: CollectionMetadata!
}

type CustomerDetails {
  createdAt: ISO8601DateTime!
  customerId: String!
  id: ID!
  invoices: [Invoice!]
  name: String
  subscriptions: [Subscription!]
  updatedAt: ISO8601DateTime!
}

"""
Autogenerated input type of DestroyBillableMetric
"""
input DestroyBillableMetricInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: String!
}

"""
Autogenerated return type of DestroyBillableMetric
"""
type DestroyBillableMetricPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated input type of DestroyPlan
"""
input DestroyPlanInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of DestroyPlan
"""
type DestroyPlanPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

enum FrequencyEnum {
  beginning_of_period
  subscription_date
}

"""
An ISO 8601-encoded date
"""
scalar ISO8601Date

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

type Invoice {
  amountCents: Int!
  amountCurrency: CurrencyEnum!
  createdAt: ISO8601DateTime!
  fromDate: ISO8601Date!
  id: ID!
  issuingDate: ISO8601Date!
  plan: Plan
  subscription: Subscription
  toDate: ISO8601Date!
  totalAmountCents: Int!
  totalAmountCurrency: CurrencyEnum!
  updatedAt: ISO8601DateTime!
  vatAmountCents: Int!
  vatAmountCurrency: CurrencyEnum!
}

type LoginUser {
  token: String!
  user: User!
}

"""
Autogenerated input type of LoginUser
"""
input LoginUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  password: String!
}

type Membership {
  createdAt: ISO8601DateTime!
  id: ID!
  organizationId: Int!
  role: String
  updatedAt: ISO8601DateTime!
  userId: Int!
}

type Mutation {
  """
  Creates a new Billable metric
  """
  createBillableMetric(
    """
    Parameters for CreateBillableMetric
    """
    input: CreateBillableMetricInput!
  ): BillableMetric

  """
  Creates a new customer
  """
  createCustomer(
    """
    Parameters for CreateCustomer
    """
    input: CreateCustomerInput!
  ): Customer

  """
  Creates a new Plan
  """
  createPlan(
    """
    Parameters for CreatePlan
    """
    input: CreatePlanInput!
  ): Plan

  """
  Create a new Subscription
  """
  createSubscription(
    """
    Parameters for CreateSubscription
    """
    input: CreateSubscriptionInput!
  ): Subscription

  """
  Deletes a Billable metric
  """
  destroyBillableMetric(
    """
    Parameters for DestroyBillableMetric
    """
    input: DestroyBillableMetricInput!
  ): DestroyBillableMetricPayload

  """
  Deletes a Plan
  """
  destroyPlan(
    """
    Parameters for DestroyPlan
    """
    input: DestroyPlanInput!
  ): DestroyPlanPayload

  """
  Opens a session for an existing user
  """
  loginUser(
    """
    Parameters for LoginUser
    """
    input: LoginUserInput!
  ): LoginUser

  """
  Registers a new user and creates related organization
  """
  registerUser(
    """
    Parameters for RegisterUser
    """
    input: RegisterUserInput!
  ): RegisterUser

  """
  Updates an existing Billable metric
  """
  updateBillableMetric(
    """
    Parameters for UpdateBillableMetric
    """
    input: UpdateBillableMetricInput!
  ): BillableMetric

  """
  Updates an existing Plan
  """
  updatePlan(
    """
    Parameters for UpdatePlan
    """
    input: UpdatePlanInput!
  ): Plan
}

type Organization {
  apiKey: String!
  createdAt: ISO8601DateTime!
  id: ID!
  name: String!
  updatedAt: ISO8601DateTime!
}

type Plan {
  amountCents: Int!
  amountCurrency: CurrencyEnum!

  """
  Check if plan is deletable
  """
  canBeDeleted: Boolean!

  """
  Number of charges attached to a plan
  """
  chargeCount: Int!
  charges: [Charge!]
  code: String!
  createdAt: ISO8601DateTime!

  """
  Number of customers attached to a plan
  """
  customerCount: Int!
  description: String
  frequency: FrequencyEnum!
  id: ID!
  interval: PlanInterval!
  name: String!
  organization: Organization
  payInAdvance: Boolean!
  proRata: Boolean!
  trialPeriod: Float
  updatedAt: ISO8601DateTime!
  vatRate: Float
}

type PlanCollection {
  collection: [Plan!]!
  metadata: CollectionMetadata!
}

enum PlanInterval {
  monthly
  weekly
  yearly
}

type Query {
  """
  Query billable metrics of an organization
  """
  billableMetrics(ids: Int, limit: Int, page: Int): BillableMetricCollection!

  """
  Retrives currently connected user
  """
  currentUser: User!

  """
  Query a single customer of an organization
  """
  customer(
    """
    Uniq ID of the customer
    """
    id: ID!
  ): CustomerDetails

  """
  Query customers of an organization
  """
  customers(
    """
    List of customer Lago ID to fetch
    """
    ids: [String!]
    limit: Int
    page: Int
  ): CustomerCollection!

  """
  Query plans of an organization
  """
  plans(
    """
    List of plan ID to fetch
    """
    ids: [String!]
    limit: Int
    page: Int
  ): PlanCollection!
}

type RegisterUser {
  membership: Membership!
  organization: Organization!
  token: String!
  user: User!
}

"""
Autogenerated input type of RegisterUser
"""
input RegisterUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  organizationName: String!
  password: String!
}

enum StatusTypeEnum {
  active
  canceled
  pending
  terminated
}

type Subscription {
  anniversaryDate: ISO8601Date
  canceledAt: ISO8601DateTime
  createdAt: ISO8601DateTime!
  customer: Customer!
  id: ID!
  nextPlan: Plan
  plan: Plan!
  startedAt: ISO8601DateTime
  status: StatusTypeEnum
  terminatedAt: ISO8601DateTime
  updatedAt: ISO8601DateTime!
}

"""
Autogenerated input type of UpdateBillableMetric
"""
input UpdateBillableMetricInput {
  aggregationType: AggregationTypeEnum!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  code: String!
  description: String!
  id: String!
  name: String!
}

"""
Autogenerated input type of UpdatePlan
"""
input UpdatePlanInput {
  amountCents: Int!
  amountCurrency: CurrencyEnum!
  charges: [ChargeInput!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  code: String!
  description: String
  frequency: FrequencyEnum!
  id: String!
  interval: PlanInterval!
  name: String!
  payInAdvance: Boolean!
  proRata: Boolean!
  trialPeriod: Float
  vatRate: Float
}

type User {
  createdAt: ISO8601DateTime!
  email: String
  id: ID!
  organizations: [Organization!]
  updatedAt: ISO8601DateTime!
}
