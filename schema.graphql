enum AggregationTypeEnum {
  count_agg
  max_count_agg
  sum_agg
  unique_count_agg
}

type BillableMetricObject {
  aggregationType: AggregationTypeEnum!
  billablePeriod: BillablePeriodEnum!
  code: String!
  createdAt: ISO8601DateTime!
  description: String
  id: ID!
  name: String!
  organization: Organization
  proRata: Boolean!
  properties: JSON
  updatedAt: ISO8601DateTime!
}

"""
The connection type for BillableMetricObject.
"""
type BillableMetricObjectConnection {
  """
  A list of edges.
  """
  edges: [BillableMetricObjectEdge]

  """
  A list of nodes.
  """
  nodes: [BillableMetricObject]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type BillableMetricObjectEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: BillableMetricObject
}

enum BillablePeriodEnum {
  one_shot
  recurring
}

"""
Autogenerated input type of CreateBillableMetric
"""
input CreateBillableMetricInput {
  aggregationType: AggregationTypeEnum!
  billablePeriod: BillablePeriodEnum!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  code: String!
  description: String!
  name: String!
  organizationId: String!
  proRata: Boolean!
  properties: JSON!
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

"""
Represents untyped JSON
"""
scalar JSON

type LoginUser {
  token: String!
  user: User!
}

"""
Autogenerated input type of LoginUser
"""
input LoginUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  password: String!
}

type Membership {
  createdAt: ISO8601DateTime!
  id: ID!
  organizationId: Int!
  role: String
  updatedAt: ISO8601DateTime!
  userId: Int!
}

type Mutation {
  createBillableMetric(
    """
    Parameters for CreateBillableMetric
    """
    input: CreateBillableMetricInput!
  ): BillableMetricObject
  loginUser(
    """
    Parameters for LoginUser
    """
    input: LoginUserInput!
  ): LoginUser
  registerUser(
    """
    Parameters for RegisterUser
    """
    input: RegisterUserInput!
  ): RegisterUser
}

type Organization {
  apiKey: String!
  createdAt: ISO8601DateTime!
  id: ID!
  name: String!
  updatedAt: ISO8601DateTime!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type Query {
  """
  Query billable metrics of an organization
  """
  billableMetrics(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BillableMetricObjectConnection!
  currentUser: User!
}

type RegisterUser {
  membership: Membership!
  organization: Organization!
  token: String!
  user: User!
}

"""
Autogenerated input type of RegisterUser
"""
input RegisterUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  organizationName: String!
  password: String!
}

type User {
  createdAt: ISO8601DateTime!
  email: String
  id: ID!
  organizations: [Organization!]
  updatedAt: ISO8601DateTime!
}
