enum AggregationTypeEnum {
  count_agg
  max_count_agg
  sum_agg
  unique_count_agg
}

type BillableMetric {
  aggregationType: AggregationTypeEnum!
  code: String!
  createdAt: ISO8601DateTime!
  description: String
  id: ID!
  name: String!
  organization: Organization
  updatedAt: ISO8601DateTime!
}

type BillableMetricCollection {
  collection: [BillableMetric!]!
  metadata: CollectionMetadata!
}

enum BillingPeriodEnum {
  beginning_of_month
  end_of_month
  subscruption_date
}

type Charge {
  amountCents: Int!
  amountCurrency: CurrencyEnum!
  billableMetric: BillableMetric!
  createdAt: ISO8601DateTime!
  frequency: ChargeFrequency!
  id: ID!
  proRata: Boolean!
  updatedAt: ISO8601DateTime!
  vatRate: Float
}

enum ChargeFrequency {
  one_time
  recurring
}

input ChargeInput {
  amountCents: Int!
  amountCurrency: CurrencyEnum!
  billableMetricId: ID!
  frequency: ChargeFrequency!
  proRata: Boolean!
  vatRate: Float
}

type CollectionMetadata {
  currentPage: Int!
  limitValue: Int!
  totalCount: Int!
  totalPages: Int!
}

"""
Autogenerated input type of CreateBillableMetric
"""
input CreateBillableMetricInput {
  aggregationType: AggregationTypeEnum!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  code: String!
  description: String!
  name: String!
}

"""
Autogenerated input type of CreatePlan
"""
input CreatePlanInput {
  amountCents: Int!
  amountCurrency: CurrencyEnum!
  billingPeriod: BillingPeriodEnum!
  charges: [ChargeInput!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  code: String!
  description: String
  frequency: PlanFrequency!
  name: String!
  proRata: Boolean!
  trialPeriod: Float
  vatRate: Float
}

enum CurrencyEnum {
  """
  Euro
  """
  EUR

  """
  American dolar
  """
  USD
}

"""
Autogenerated input type of DestroyBillableMetric
"""
input DestroyBillableMetricInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: String!
}

"""
Autogenerated return type of DestroyBillableMetric
"""
type DestroyBillableMetricPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated input type of DestroyPlan
"""
input DestroyPlanInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of DestroyPlan
"""
type DestroyPlanPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

type LoginUser {
  token: String!
  user: User!
}

"""
Autogenerated input type of LoginUser
"""
input LoginUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  password: String!
}

type Membership {
  createdAt: ISO8601DateTime!
  id: ID!
  organizationId: Int!
  role: String
  updatedAt: ISO8601DateTime!
  userId: Int!
}

type Mutation {
  """
  Creates a new Billable metric
  """
  createBillableMetric(
    """
    Parameters for CreateBillableMetric
    """
    input: CreateBillableMetricInput!
  ): BillableMetric

  """
  Creates a new Plan
  """
  createPlan(
    """
    Parameters for CreatePlan
    """
    input: CreatePlanInput!
  ): Plan

  """
  Deletes a Billable metric
  """
  destroyBillableMetric(
    """
    Parameters for DestroyBillableMetric
    """
    input: DestroyBillableMetricInput!
  ): DestroyBillableMetricPayload

  """
  Deletes a Plan
  """
  destroyPlan(
    """
    Parameters for DestroyPlan
    """
    input: DestroyPlanInput!
  ): DestroyPlanPayload

  """
  Opens a session for an existing user
  """
  loginUser(
    """
    Parameters for LoginUser
    """
    input: LoginUserInput!
  ): LoginUser

  """
  Registers a new user and creates related organization
  """
  registerUser(
    """
    Parameters for RegisterUser
    """
    input: RegisterUserInput!
  ): RegisterUser

  """
  Updates an existing Billable metric
  """
  updateBillableMetric(
    """
    Parameters for UpdateBillableMetric
    """
    input: UpdateBillableMetricInput!
  ): BillableMetric

  """
  Updates an existing Plan
  """
  updatePlan(
    """
    Parameters for UpdatePlan
    """
    input: UpdatePlanInput!
  ): Plan
}

type Organization {
  apiKey: String!
  createdAt: ISO8601DateTime!
  id: ID!
  name: String!
  updatedAt: ISO8601DateTime!
}

type Plan {
  amountCents: Int!
  amountCurrency: CurrencyEnum!
  billingPeriod: BillingPeriodEnum!
  charges: [Charge!]
  code: String!
  createdAt: ISO8601DateTime!
  description: String
  frequency: PlanFrequency!
  id: ID!
  name: String!
  organization: Organization
  proRata: Boolean!
  trialPeriod: Float
  updatedAt: ISO8601DateTime!
  vatRate: Float
}

type PlanCollection {
  collection: [Plan!]!
  metadata: CollectionMetadata!
}

enum PlanFrequency {
  monthly
  weekly
  yearly
}

type Query {
  """
  Query billable metrics of an organization
  """
  billableMetrics(limit: Int, page: Int): BillableMetricCollection!

  """
  Retrives currently connected user
  """
  currentUser: User!

  """
  Query plans of an organization
  """
  plans(limit: Int, page: Int): PlanCollection!
}

type RegisterUser {
  membership: Membership!
  organization: Organization!
  token: String!
  user: User!
}

"""
Autogenerated input type of RegisterUser
"""
input RegisterUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  organizationName: String!
  password: String!
}

"""
Autogenerated input type of UpdateBillableMetric
"""
input UpdateBillableMetricInput {
  aggregationType: AggregationTypeEnum!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  code: String!
  description: String!
  id: String!
  name: String!
}

"""
Autogenerated input type of UpdatePlan
"""
input UpdatePlanInput {
  amountCents: Int!
  amountCurrency: CurrencyEnum!
  billingPeriod: BillingPeriodEnum!
  charges: [ChargeInput!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  code: String!
  description: String
  frequency: PlanFrequency!
  id: String!
  name: String!
  proRata: Boolean!
  trialPeriod: Float
  vatRate: Float
}

type User {
  createdAt: ISO8601DateTime!
  email: String
  id: ID!
  organizations: [Organization!]
  updatedAt: ISO8601DateTime!
}
