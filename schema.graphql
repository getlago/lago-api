"""
Autogenerated input type of AcceptInvite
"""
input AcceptInviteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  password: String!

  """
  Uniq token of the Invite
  """
  token: String!
}

"""
Adyen input arguments
"""
input AddAdyenPaymentProviderInput {
  apiKey: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  hmacKey: String
  livePrefix: String
  merchantAccount: String!
  successRedirectUrl: String
}

"""
Gocardless input arguments
"""
input AddGocardlessPaymentProviderInput {
  accessCode: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  successRedirectUrl: String
}

type AddOn {
  amountCents: BigInt!
  amountCurrency: CurrencyEnum!
  appliedAddOnsCount: Int!
  code: String!
  createdAt: ISO8601DateTime!

  """
  Number of customers using this add-on
  """
  customersCount: Int!
  deletedAt: ISO8601DateTime
  description: String
  id: ID!
  invoiceDisplayName: String
  name: String!
  organization: Organization
  taxes: [Tax!]
  updatedAt: ISO8601DateTime!
}

type AddOnCollection {
  collection: [AddOn!]!
  metadata: CollectionMetadata!
}

"""
Stripe input arguments
"""
input AddStripePaymentProviderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  createCustomers: Boolean
  secretKey: String
  successRedirectUrl: String
}

type AdyenProvider {
  apiKey: String!
  hmacKey: String
  id: ID!
  livePrefix: String
  merchantAccount: String!
  successRedirectUrl: String
}

enum AggregationTypeEnum {
  count_agg
  latest_agg
  max_agg
  sum_agg
  unique_count_agg
  weighted_sum_agg
}

type AppliedAddOn {
  addOn: AddOn!
  amountCents: BigInt!
  amountCurrency: CurrencyEnum!
  createdAt: ISO8601DateTime!
  id: ID!
}

type AppliedCoupon {
  amountCents: BigInt
  amountCentsRemaining: BigInt
  amountCurrency: CurrencyEnum
  coupon: Coupon!
  createdAt: ISO8601DateTime!
  frequency: CouponFrequency!
  frequencyDuration: Int
  frequencyDurationRemaining: Int
  id: ID!
  percentageRate: Float
  terminatedAt: ISO8601DateTime!
}

interface AppliedTax {
  amountCents: BigInt!
  amountCurrency: CurrencyEnum!
  createdAt: ISO8601DateTime!
  id: ID!
  tax: Tax!
  taxCode: String!
  taxDescription: String
  taxName: String!
  taxRate: Float!
  updatedAt: ISO8601DateTime!
}

"""
Represents non-fractional signed whole numeric values. Since the value may
exceed the size of a 32-bit integer, it's encoded as a string.
"""
scalar BigInt

"""
Base billable metric
"""
type BillableMetric {
  activeSubscriptionsCount: Int!
  aggregationType: AggregationTypeEnum!
  code: String!
  createdAt: ISO8601DateTime!
  deletedAt: ISO8601DateTime
  description: String
  draftInvoicesCount: Int!
  fieldName: String
  flatGroups: [Group!]
  group: JSON
  id: ID!
  name: String!
  organization: Organization
  plansCount: Int!
  recurring: Boolean!
  subscriptionsCount: Int!
  updatedAt: ISO8601DateTime!
  weightedInterval: WeightedIntervalEnum
}

type BillableMetricCollection {
  collection: [BillableMetric!]!
  metadata: CollectionMetadata!
}

enum BillingTimeEnum {
  anniversary
  calendar
}

type Charge {
  billableMetric: BillableMetric!
  chargeModel: ChargeModelEnum!
  createdAt: ISO8601DateTime!
  deletedAt: ISO8601DateTime
  groupProperties: [GroupProperties!]
  id: ID!
  invoiceDisplayName: String
  invoiceable: Boolean!
  minAmountCents: BigInt!
  payInAdvance: Boolean!
  properties: Properties
  prorated: Boolean!
  taxes: [Tax!]
  updatedAt: ISO8601DateTime!
}

input ChargeInput {
  billableMetricId: ID!
  chargeModel: ChargeModelEnum!
  groupProperties: [GroupPropertiesInput!]
  id: ID
  invoiceDisplayName: String
  invoiceable: Boolean
  minAmountCents: BigInt
  payInAdvance: Boolean
  properties: PropertiesInput
  prorated: Boolean
  taxCodes: [String!]
}

enum ChargeModelEnum {
  graduated
  graduated_percentage
  package
  percentage
  standard
  volume
}

input ChargeOverridesInput {
  billableMetricId: ID!
  groupProperties: [GroupPropertiesInput!]
  id: ID!
  invoiceDisplayName: String
  minAmountCents: BigInt
  properties: PropertiesInput
  taxCodes: [String!]
}

type ChargeUsage {
  amountCents: BigInt!
  billableMetric: BillableMetric!
  charge: Charge!
  eventsCount: Int!
  groups: [GroupUsage!]
  units: Float!
}

type CollectionMetadata {
  currentPage: Int!
  limitValue: Int!
  totalCount: Int!
  totalPages: Int!
}

enum CountryCode {
  """
  Andorra
  """
  AD

  """
  United Arab Emirates
  """
  AE

  """
  Afghanistan
  """
  AF

  """
  Antigua and Barbuda
  """
  AG

  """
  Anguilla
  """
  AI

  """
  Albania
  """
  AL

  """
  Armenia
  """
  AM

  """
  Angola
  """
  AO

  """
  Antarctica
  """
  AQ

  """
  Argentina
  """
  AR

  """
  American Samoa
  """
  AS

  """
  Austria
  """
  AT

  """
  Australia
  """
  AU

  """
  Aruba
  """
  AW

  """
  Åland Islands
  """
  AX

  """
  Azerbaijan
  """
  AZ

  """
  Bosnia and Herzegovina
  """
  BA

  """
  Barbados
  """
  BB

  """
  Bangladesh
  """
  BD

  """
  Belgium
  """
  BE

  """
  Burkina Faso
  """
  BF

  """
  Bulgaria
  """
  BG

  """
  Bahrain
  """
  BH

  """
  Burundi
  """
  BI

  """
  Benin
  """
  BJ

  """
  Saint Barthélemy
  """
  BL

  """
  Bermuda
  """
  BM

  """
  Brunei Darussalam
  """
  BN

  """
  Bolivia (Plurinational State of)
  """
  BO

  """
  Bonaire, Sint Eustatius and Saba
  """
  BQ

  """
  Brazil
  """
  BR

  """
  Bahamas
  """
  BS

  """
  Bhutan
  """
  BT

  """
  Bouvet Island
  """
  BV

  """
  Botswana
  """
  BW

  """
  Belarus
  """
  BY

  """
  Belize
  """
  BZ

  """
  Canada
  """
  CA

  """
  Cocos (Keeling) Islands
  """
  CC

  """
  Congo (Democratic Republic of the)
  """
  CD

  """
  Central African Republic
  """
  CF

  """
  Congo
  """
  CG

  """
  Switzerland
  """
  CH

  """
  Côte d'Ivoire
  """
  CI

  """
  Cook Islands
  """
  CK

  """
  Chile
  """
  CL

  """
  Cameroon
  """
  CM

  """
  China
  """
  CN

  """
  Colombia
  """
  CO

  """
  Costa Rica
  """
  CR

  """
  Cuba
  """
  CU

  """
  Cabo Verde
  """
  CV

  """
  Curaçao
  """
  CW

  """
  Christmas Island
  """
  CX

  """
  Cyprus
  """
  CY

  """
  Czechia
  """
  CZ

  """
  Germany
  """
  DE

  """
  Djibouti
  """
  DJ

  """
  Denmark
  """
  DK

  """
  Dominica
  """
  DM

  """
  Dominican Republic
  """
  DO

  """
  Algeria
  """
  DZ

  """
  Ecuador
  """
  EC

  """
  Estonia
  """
  EE

  """
  Egypt
  """
  EG

  """
  Western Sahara
  """
  EH

  """
  Eritrea
  """
  ER

  """
  Spain
  """
  ES

  """
  Ethiopia
  """
  ET

  """
  Finland
  """
  FI

  """
  Fiji
  """
  FJ

  """
  Falkland Islands (Malvinas)
  """
  FK

  """
  Micronesia (Federated States of)
  """
  FM

  """
  Faroe Islands
  """
  FO

  """
  France
  """
  FR

  """
  Gabon
  """
  GA

  """
  United Kingdom of Great Britain and Northern Ireland
  """
  GB

  """
  Grenada
  """
  GD

  """
  Georgia
  """
  GE

  """
  French Guiana
  """
  GF

  """
  Guernsey
  """
  GG

  """
  Ghana
  """
  GH

  """
  Gibraltar
  """
  GI

  """
  Greenland
  """
  GL

  """
  Gambia
  """
  GM

  """
  Guinea
  """
  GN

  """
  Guadeloupe
  """
  GP

  """
  Equatorial Guinea
  """
  GQ

  """
  Greece
  """
  GR

  """
  South Georgia and the South Sandwich Islands
  """
  GS

  """
  Guatemala
  """
  GT

  """
  Guam
  """
  GU

  """
  Guinea-Bissau
  """
  GW

  """
  Guyana
  """
  GY

  """
  Hong Kong
  """
  HK

  """
  Heard Island and McDonald Islands
  """
  HM

  """
  Honduras
  """
  HN

  """
  Croatia
  """
  HR

  """
  Haiti
  """
  HT

  """
  Hungary
  """
  HU

  """
  Indonesia
  """
  ID

  """
  Ireland
  """
  IE

  """
  Israel
  """
  IL

  """
  Isle of Man
  """
  IM

  """
  India
  """
  IN

  """
  British Indian Ocean Territory
  """
  IO

  """
  Iraq
  """
  IQ

  """
  Iran (Islamic Republic of)
  """
  IR

  """
  Iceland
  """
  IS

  """
  Italy
  """
  IT

  """
  Jersey
  """
  JE

  """
  Jamaica
  """
  JM

  """
  Jordan
  """
  JO

  """
  Japan
  """
  JP

  """
  Kenya
  """
  KE

  """
  Kyrgyzstan
  """
  KG

  """
  Cambodia
  """
  KH

  """
  Kiribati
  """
  KI

  """
  Comoros
  """
  KM

  """
  Saint Kitts and Nevis
  """
  KN

  """
  Korea (Democratic People's Republic of)
  """
  KP

  """
  Korea (Republic of)
  """
  KR

  """
  Kuwait
  """
  KW

  """
  Cayman Islands
  """
  KY

  """
  Kazakhstan
  """
  KZ

  """
  Lao People's Democratic Republic
  """
  LA

  """
  Lebanon
  """
  LB

  """
  Saint Lucia
  """
  LC

  """
  Liechtenstein
  """
  LI

  """
  Sri Lanka
  """
  LK

  """
  Liberia
  """
  LR

  """
  Lesotho
  """
  LS

  """
  Lithuania
  """
  LT

  """
  Luxembourg
  """
  LU

  """
  Latvia
  """
  LV

  """
  Libya
  """
  LY

  """
  Morocco
  """
  MA

  """
  Monaco
  """
  MC

  """
  Moldova (Republic of)
  """
  MD

  """
  Montenegro
  """
  ME

  """
  Saint Martin (French part)
  """
  MF

  """
  Madagascar
  """
  MG

  """
  Marshall Islands
  """
  MH

  """
  North Macedonia
  """
  MK

  """
  Mali
  """
  ML

  """
  Myanmar
  """
  MM

  """
  Mongolia
  """
  MN

  """
  Macao
  """
  MO

  """
  Northern Mariana Islands
  """
  MP

  """
  Martinique
  """
  MQ

  """
  Mauritania
  """
  MR

  """
  Montserrat
  """
  MS

  """
  Malta
  """
  MT

  """
  Mauritius
  """
  MU

  """
  Maldives
  """
  MV

  """
  Malawi
  """
  MW

  """
  Mexico
  """
  MX

  """
  Malaysia
  """
  MY

  """
  Mozambique
  """
  MZ

  """
  Namibia
  """
  NA

  """
  New Caledonia
  """
  NC

  """
  Niger
  """
  NE

  """
  Norfolk Island
  """
  NF

  """
  Nigeria
  """
  NG

  """
  Nicaragua
  """
  NI

  """
  Netherlands
  """
  NL

  """
  Norway
  """
  NO

  """
  Nepal
  """
  NP

  """
  Nauru
  """
  NR

  """
  Niue
  """
  NU

  """
  New Zealand
  """
  NZ

  """
  Oman
  """
  OM

  """
  Panama
  """
  PA

  """
  Peru
  """
  PE

  """
  French Polynesia
  """
  PF

  """
  Papua New Guinea
  """
  PG

  """
  Philippines
  """
  PH

  """
  Pakistan
  """
  PK

  """
  Poland
  """
  PL

  """
  Saint Pierre and Miquelon
  """
  PM

  """
  Pitcairn
  """
  PN

  """
  Puerto Rico
  """
  PR

  """
  Palestine, State of
  """
  PS

  """
  Portugal
  """
  PT

  """
  Palau
  """
  PW

  """
  Paraguay
  """
  PY

  """
  Qatar
  """
  QA

  """
  Réunion
  """
  RE

  """
  Romania
  """
  RO

  """
  Serbia
  """
  RS

  """
  Russian Federation
  """
  RU

  """
  Rwanda
  """
  RW

  """
  Saudi Arabia
  """
  SA

  """
  Solomon Islands
  """
  SB

  """
  Seychelles
  """
  SC

  """
  Sudan
  """
  SD

  """
  Sweden
  """
  SE

  """
  Singapore
  """
  SG

  """
  Saint Helena, Ascension and Tristan da Cunha
  """
  SH

  """
  Slovenia
  """
  SI

  """
  Svalbard and Jan Mayen
  """
  SJ

  """
  Slovakia
  """
  SK

  """
  Sierra Leone
  """
  SL

  """
  San Marino
  """
  SM

  """
  Senegal
  """
  SN

  """
  Somalia
  """
  SO

  """
  Suriname
  """
  SR

  """
  South Sudan
  """
  SS

  """
  Sao Tome and Principe
  """
  ST

  """
  El Salvador
  """
  SV

  """
  Sint Maarten (Dutch part)
  """
  SX

  """
  Syrian Arab Republic
  """
  SY

  """
  Eswatini
  """
  SZ

  """
  Turks and Caicos Islands
  """
  TC

  """
  Chad
  """
  TD

  """
  French Southern Territories
  """
  TF

  """
  Togo
  """
  TG

  """
  Thailand
  """
  TH

  """
  Tajikistan
  """
  TJ

  """
  Tokelau
  """
  TK

  """
  Timor-Leste
  """
  TL

  """
  Turkmenistan
  """
  TM

  """
  Tunisia
  """
  TN

  """
  Tonga
  """
  TO

  """
  Turkey
  """
  TR

  """
  Trinidad and Tobago
  """
  TT

  """
  Tuvalu
  """
  TV

  """
  Taiwan, Province of China
  """
  TW

  """
  Tanzania, United Republic of
  """
  TZ

  """
  Ukraine
  """
  UA

  """
  Uganda
  """
  UG

  """
  United States Minor Outlying Islands
  """
  UM

  """
  United States of America
  """
  US

  """
  Uruguay
  """
  UY

  """
  Uzbekistan
  """
  UZ

  """
  Holy See
  """
  VA

  """
  Saint Vincent and the Grenadines
  """
  VC

  """
  Venezuela (Bolivarian Republic of)
  """
  VE

  """
  Virgin Islands (British)
  """
  VG

  """
  Virgin Islands (U.S.)
  """
  VI

  """
  Viet Nam
  """
  VN

  """
  Vanuatu
  """
  VU

  """
  Wallis and Futuna
  """
  WF

  """
  Samoa
  """
  WS

  """
  Yemen
  """
  YE

  """
  Mayotte
  """
  YT

  """
  South Africa
  """
  ZA

  """
  Zambia
  """
  ZM

  """
  Zimbabwe
  """
  ZW
}

type Coupon {
  amountCents: BigInt
  amountCurrency: CurrencyEnum
  appliedCouponsCount: Int!
  billableMetrics: [BillableMetric!]
  code: String
  couponType: CouponTypeEnum!
  createdAt: ISO8601DateTime!

  """
  Number of customers using this coupon
  """
  customersCount: Int!
  description: String
  expiration: CouponExpiration!
  expirationAt: ISO8601DateTime
  frequency: CouponFrequency!
  frequencyDuration: Int
  id: ID!
  limitedBillableMetrics: Boolean!
  limitedPlans: Boolean!
  name: String!
  organization: Organization
  percentageRate: Float
  plans: [Plan!]
  reusable: Boolean!
  status: CouponStatusEnum!
  terminatedAt: ISO8601DateTime
  updatedAt: ISO8601DateTime!
}

type CouponCollection {
  collection: [Coupon!]!
  metadata: CollectionMetadata!
}

enum CouponExpiration {
  no_expiration
  time_limit
}

enum CouponFrequency {
  forever
  once
  recurring
}

enum CouponStatusEnum {
  active
  terminated
}

enum CouponTypeEnum {
  fixed_amount
  percentage
}

"""
Autogenerated input type of CreateAddOn
"""
input CreateAddOnInput {
  amountCents: BigInt!
  amountCurrency: CurrencyEnum!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  code: String!
  description: String
  invoiceDisplayName: String
  name: String!
  taxCodes: [String!]
}

"""
Create Adjusted Fee Input
"""
input CreateAdjustedFeeInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  feeId: ID!
  invoiceDisplayName: String
  unitAmountCents: BigInt
  units: Float!
}

"""
Autogenerated input type of CreateAppliedCoupon
"""
input CreateAppliedCouponInput {
  amountCents: BigInt
  amountCurrency: CurrencyEnum

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  couponId: ID!
  customerId: ID!
  frequency: CouponFrequency
  frequencyDuration: Int
  percentageRate: Float
}

"""
Create Billable metric input arguments
"""
input CreateBillableMetricInput {
  aggregationType: AggregationTypeEnum!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  code: String!
  description: String!
  fieldName: String
  group: JSON
  name: String!
  recurring: Boolean
  weightedInterval: WeightedIntervalEnum
}

"""
Autogenerated input type of CreateCoupon
"""
input CreateCouponInput {
  amountCents: BigInt
  amountCurrency: CurrencyEnum
  appliesTo: LimitationInput

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  code: String
  couponType: CouponTypeEnum!
  description: String
  expiration: CouponExpiration!
  expirationAt: ISO8601DateTime
  frequency: CouponFrequency!
  frequencyDuration: Int
  name: String!
  percentageRate: Float
  reusable: Boolean
}

"""
Autogenerated input type of CreateCreditNote
"""
input CreateCreditNoteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  creditAmountCents: BigInt
  description: String
  invoiceId: ID!
  items: [CreditNoteItemInput!]!
  reason: CreditNoteReasonEnum!
  refundAmountCents: BigInt
}

"""
Create Customer input arguments
"""
input CreateCustomerInput {
  addressLine1: String
  addressLine2: String
  billingConfiguration: CustomerBillingConfigurationInput
  city: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  country: CountryCode
  currency: CurrencyEnum
  email: String
  externalId: String!
  externalSalesforceId: String
  invoiceGracePeriod: Int
  legalName: String
  legalNumber: String
  logoUrl: String
  metadata: [CustomerMetadataInput!]
  name: String!
  netPaymentTerm: Int
  paymentProvider: ProviderTypeEnum
  phone: String
  providerCustomer: ProviderCustomerInput
  state: String
  taxCodes: [String!]
  taxIdentificationNumber: String
  timezone: TimezoneEnum
  url: String
  zipcode: String
}

"""
Create Wallet Input
"""
input CreateCustomerWalletInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currency: CurrencyEnum!
  customerId: ID!
  expirationAt: ISO8601DateTime
  grantedCredits: String!
  name: String
  paidCredits: String!
  rateAmount: String!
  recurringTransactionRules: [CreateRecurringTransactionRuleInput!]
}

"""
Autogenerated input type of CreateCustomerWalletTransaction
"""
input CreateCustomerWalletTransactionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  grantedCredits: String!
  paidCredits: String!
  walletId: ID!
}

"""
Autogenerated input type of CreateInvite
"""
input CreateInviteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
}

"""
Create Invoice input arguments
"""
input CreateInvoiceInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currency: CurrencyEnum
  customerId: ID!
  fees: [FeeInput!]!
}

"""
Autogenerated input type of CreatePasswordReset
"""
input CreatePasswordResetInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
}

"""
Autogenerated return type of CreatePasswordReset
"""
type CreatePasswordResetPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: String!
}

"""
Autogenerated input type of CreatePlan
"""
input CreatePlanInput {
  amountCents: BigInt!
  amountCurrency: CurrencyEnum!
  billChargesMonthly: Boolean
  charges: [ChargeInput!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  code: String!
  description: String
  interval: PlanInterval!
  invoiceDisplayName: String
  name: String!
  payInAdvance: Boolean!
  taxCodes: [String!]
  trialPeriod: Float
}

input CreateRecurringTransactionRuleInput {
  interval: RecurringTransactionIntervalEnum
  ruleType: RecurringTransactionRuleTypeEnum!
  thresholdCredits: String
}

"""
Create Subscription input arguments
"""
input CreateSubscriptionInput {
  billingTime: BillingTimeEnum!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  customerId: ID!
  endingAt: ISO8601DateTime
  externalId: String
  name: String
  planId: ID!
  planOverrides: PlanOverridesInput
  subscriptionAt: ISO8601DateTime
  subscriptionId: ID
}

"""
CreditNote
"""
type CreditNote {
  appliedTaxes: [CreditNoteAppliedTax!]
  balanceAmountCents: BigInt!

  """
  Check if credit note can be voided
  """
  canBeVoided: Boolean!
  couponsAdjustmentAmountCents: BigInt!
  createdAt: ISO8601DateTime!
  creditAmountCents: BigInt!
  creditStatus: CreditNoteCreditStatusEnum
  currency: CurrencyEnum!
  customer: Customer!
  description: String
  fileUrl: String
  id: ID!
  invoice: Invoice
  issuingDate: ISO8601Date!
  items: [CreditNoteItem!]!
  number: String!
  reason: CreditNoteReasonEnum!
  refundAmountCents: BigInt!
  refundStatus: CreditNoteRefundStatusEnum
  refundedAt: ISO8601DateTime
  sequentialId: ID!
  subTotalExcludingTaxesAmountCents: BigInt!
  taxesAmountCents: BigInt!
  taxesRate: Float!
  totalAmountCents: BigInt!
  updatedAt: ISO8601DateTime!
  voidedAt: ISO8601DateTime
}

type CreditNoteAppliedTax implements AppliedTax {
  amountCents: BigInt!
  amountCurrency: CurrencyEnum!
  baseAmountCents: BigInt!
  createdAt: ISO8601DateTime!
  creditNote: CreditNote!
  id: ID!
  tax: Tax!
  taxCode: String!
  taxDescription: String
  taxName: String!
  taxRate: Float!
  updatedAt: ISO8601DateTime!
}

type CreditNoteCollection {
  collection: [CreditNote!]!
  metadata: CollectionMetadata!
}

enum CreditNoteCreditStatusEnum {
  available
  consumed
  voided
}

"""
Estimate amounts for credit note creation
"""
type CreditNoteEstimate {
  appliedTaxes: [CreditNoteAppliedTax!]!
  couponsAdjustmentAmountCents: BigInt!
  currency: CurrencyEnum!
  items: [CreditNoteItemEstimate!]!
  maxCreditableAmountCents: BigInt!
  maxRefundableAmountCents: BigInt!
  preciseCouponsAdjustmentAmountCents: Float!
  preciseTaxesAmountCents: Float!
  subTotalExcludingTaxesAmountCents: BigInt!
  taxesAmountCents: BigInt!
  taxesRate: Float!
}

type CreditNoteItem {
  amountCents: BigInt!
  amountCurrency: CurrencyEnum!
  createdAt: ISO8601DateTime!
  fee: Fee!
  id: ID!
}

type CreditNoteItemEstimate {
  amountCents: BigInt!
  fee: Fee!
}

input CreditNoteItemInput {
  amountCents: BigInt!
  feeId: ID!
}

enum CreditNoteReasonEnum {
  duplicated_charge
  fraudulent_charge
  order_cancellation
  order_change
  other
  product_unsatisfactory
}

enum CreditNoteRefundStatusEnum {
  failed
  pending
  succeeded
}

enum CurrencyEnum {
  """
  United Arab Emirates Dirham
  """
  AED

  """
  Afghan Afghani
  """
  AFN

  """
  Albanian Lek
  """
  ALL

  """
  Armenian Dram
  """
  AMD

  """
  Netherlands Antillean Gulden
  """
  ANG

  """
  Angolan Kwanza
  """
  AOA

  """
  Argentine Peso
  """
  ARS

  """
  Australian Dollar
  """
  AUD

  """
  Aruban Florin
  """
  AWG

  """
  Azerbaijani Manat
  """
  AZN

  """
  Bosnia and Herzegovina Convertible Mark
  """
  BAM

  """
  Barbadian Dollar
  """
  BBD

  """
  Bangladeshi Taka
  """
  BDT

  """
  Bulgarian Lev
  """
  BGN

  """
  Burundian Franc
  """
  BIF

  """
  Bermudian Dollar
  """
  BMD

  """
  Brunei Dollar
  """
  BND

  """
  Bolivian Boliviano
  """
  BOB

  """
  Brazilian Real
  """
  BRL

  """
  Bahamian Dollar
  """
  BSD

  """
  Botswana Pula
  """
  BWP

  """
  Belarusian Ruble
  """
  BYN

  """
  Belize Dollar
  """
  BZD

  """
  Canadian Dollar
  """
  CAD

  """
  Congolese Franc
  """
  CDF

  """
  Swiss Franc
  """
  CHF

  """
  Unidad de Fomento
  """
  CLF

  """
  Chilean Peso
  """
  CLP

  """
  Chinese Renminbi Yuan
  """
  CNY

  """
  Colombian Peso
  """
  COP

  """
  Costa Rican Colón
  """
  CRC

  """
  Cape Verdean Escudo
  """
  CVE

  """
  Czech Koruna
  """
  CZK

  """
  Djiboutian Franc
  """
  DJF

  """
  Danish Krone
  """
  DKK

  """
  Dominican Peso
  """
  DOP

  """
  Algerian Dinar
  """
  DZD

  """
  Egyptian Pound
  """
  EGP

  """
  Ethiopian Birr
  """
  ETB

  """
  Euro
  """
  EUR

  """
  Fijian Dollar
  """
  FJD

  """
  Falkland Pound
  """
  FKP

  """
  British Pound
  """
  GBP

  """
  Georgian Lari
  """
  GEL

  """
  Gibraltar Pound
  """
  GIP

  """
  Gambian Dalasi
  """
  GMD

  """
  Guinean Franc
  """
  GNF

  """
  Guatemalan Quetzal
  """
  GTQ

  """
  Guyanese Dollar
  """
  GYD

  """
  Hong Kong Dollar
  """
  HKD

  """
  Honduran Lempira
  """
  HNL

  """
  Croatian Kuna
  """
  HRK

  """
  Haitian Gourde
  """
  HTG

  """
  Hungarian Forint
  """
  HUF

  """
  Indonesian Rupiah
  """
  IDR

  """
  Israeli New Sheqel
  """
  ILS

  """
  Indian Rupee
  """
  INR

  """
  Icelandic Króna
  """
  ISK

  """
  Jamaican Dollar
  """
  JMD

  """
  Japanese Yen
  """
  JPY

  """
  Kenyan Shilling
  """
  KES

  """
  Kyrgyzstani Som
  """
  KGS

  """
  Cambodian Riel
  """
  KHR

  """
  Comorian Franc
  """
  KMF

  """
  South Korean Won
  """
  KRW

  """
  Cayman Islands Dollar
  """
  KYD

  """
  Kazakhstani Tenge
  """
  KZT

  """
  Lao Kip
  """
  LAK

  """
  Lebanese Pound
  """
  LBP

  """
  Sri Lankan Rupee
  """
  LKR

  """
  Liberian Dollar
  """
  LRD

  """
  Lesotho Loti
  """
  LSL

  """
  Moroccan Dirham
  """
  MAD

  """
  Moldovan Leu
  """
  MDL

  """
  Malagasy Ariary
  """
  MGA

  """
  Macedonian Denar
  """
  MKD

  """
  Myanmar Kyat
  """
  MMK

  """
  Mongolian Tögrög
  """
  MNT

  """
  Macanese Pataca
  """
  MOP

  """
  Mauritanian Ouguiya
  """
  MRO

  """
  Mauritian Rupee
  """
  MUR

  """
  Maldivian Rufiyaa
  """
  MVR

  """
  Malawian Kwacha
  """
  MWK

  """
  Mexican Peso
  """
  MXN

  """
  Malaysian Ringgit
  """
  MYR

  """
  Mozambican Metical
  """
  MZN

  """
  Namibian Dollar
  """
  NAD

  """
  Nigerian Naira
  """
  NGN

  """
  Nicaraguan Córdoba
  """
  NIO

  """
  Norwegian Krone
  """
  NOK

  """
  Nepalese Rupee
  """
  NPR

  """
  New Zealand Dollar
  """
  NZD

  """
  Panamanian Balboa
  """
  PAB

  """
  Peruvian Sol
  """
  PEN

  """
  Papua New Guinean Kina
  """
  PGK

  """
  Philippine Peso
  """
  PHP

  """
  Pakistani Rupee
  """
  PKR

  """
  Polish Złoty
  """
  PLN

  """
  Paraguayan Guaraní
  """
  PYG

  """
  Qatari Riyal
  """
  QAR

  """
  Romanian Leu
  """
  RON

  """
  Serbian Dinar
  """
  RSD

  """
  Russian Ruble
  """
  RUB

  """
  Rwandan Franc
  """
  RWF

  """
  Saudi Riyal
  """
  SAR

  """
  Solomon Islands Dollar
  """
  SBD

  """
  Seychellois Rupee
  """
  SCR

  """
  Swedish Krona
  """
  SEK

  """
  Singapore Dollar
  """
  SGD

  """
  Saint Helenian Pound
  """
  SHP

  """
  Sierra Leonean Leone
  """
  SLL

  """
  Somali Shilling
  """
  SOS

  """
  Surinamese Dollar
  """
  SRD

  """
  São Tomé and Príncipe Dobra
  """
  STD

  """
  Swazi Lilangeni
  """
  SZL

  """
  Thai Baht
  """
  THB

  """
  Tajikistani Somoni
  """
  TJS

  """
  Tongan Paʻanga
  """
  TOP

  """
  Turkish Lira
  """
  TRY

  """
  Trinidad and Tobago Dollar
  """
  TTD

  """
  New Taiwan Dollar
  """
  TWD

  """
  Tanzanian Shilling
  """
  TZS

  """
  Ukrainian Hryvnia
  """
  UAH

  """
  Ugandan Shilling
  """
  UGX

  """
  United States Dollar
  """
  USD

  """
  Uruguayan Peso
  """
  UYU

  """
  Uzbekistan Som
  """
  UZS

  """
  Vietnamese Đồng
  """
  VND

  """
  Vanuatu Vatu
  """
  VUV

  """
  Samoan Tala
  """
  WST

  """
  Central African Cfa Franc
  """
  XAF

  """
  East Caribbean Dollar
  """
  XCD

  """
  West African Cfa Franc
  """
  XOF

  """
  Cfp Franc
  """
  XPF

  """
  Yemeni Rial
  """
  YER

  """
  South African Rand
  """
  ZAR

  """
  Zambian Kwacha
  """
  ZMW
}

type CurrentVersion {
  githubUrl: String!
  number: String!
}

type Customer {
  """
  Number of active subscriptions per customer
  """
  activeSubscriptionsCount: Int!
  addressLine1: String
  addressLine2: String
  applicableTimezone: TimezoneEnum!
  appliedAddOns: [AppliedAddOn!]
  appliedCoupons: [AppliedCoupon!]
  billingConfiguration: CustomerBillingConfiguration

  """
  Check if customer attributes are editable
  """
  canEditAttributes: Boolean!
  city: String
  country: CountryCode
  createdAt: ISO8601DateTime!
  creditNotes: [CreditNote!]

  """
  Credit notes credits balance available per customer
  """
  creditNotesBalanceAmountCents: BigInt!

  """
  Number of available credits from credit notes per customer
  """
  creditNotesCreditsAvailableCount: Int!
  currency: CurrencyEnum
  deletedAt: ISO8601DateTime
  email: String
  externalId: String!
  externalSalesforceId: String

  """
  Define if a customer has an active wallet
  """
  hasActiveWallet: Boolean!

  """
  Define if a customer has any credit note
  """
  hasCreditNotes: Boolean!
  id: ID!
  invoiceGracePeriod: Int
  invoices: [Invoice!]
  legalName: String
  legalNumber: String
  logoUrl: String
  metadata: [CustomerMetadata!]
  name: String
  netPaymentTerm: Int
  paymentProvider: ProviderTypeEnum
  phone: String
  providerCustomer: ProviderCustomer
  sequentialId: String!
  slug: String!
  state: String

  """
  Query subscriptions of a customer
  """
  subscriptions(
    """
    Statuses of subscriptions to retrieve
    """
    status: [StatusTypeEnum!]
  ): [Subscription!]!
  taxIdentificationNumber: String
  taxes: [Tax!]
  timezone: TimezoneEnum
  updatedAt: ISO8601DateTime!
  url: String
  zipcode: String
}

type CustomerBillingConfiguration {
  documentLocale: String
  id: ID!
}

input CustomerBillingConfigurationInput {
  documentLocale: String
}

type CustomerCollection {
  collection: [Customer!]!
  metadata: CollectionMetadata!
}

type CustomerMetadata {
  createdAt: ISO8601DateTime!
  displayInInvoice: Boolean!
  id: ID!
  key: String!
  updatedAt: ISO8601DateTime!
  value: String!
}

input CustomerMetadataInput {
  displayInInvoice: Boolean!
  id: ID
  key: String!
  value: String!
}

type CustomerUsage {
  amountCents: BigInt!
  chargesUsage: [ChargeUsage!]!
  currency: CurrencyEnum!
  fromDatetime: ISO8601DateTime!
  issuingDate: ISO8601Date!
  taxesAmountCents: BigInt!
  toDatetime: ISO8601DateTime!
  totalAmountCents: BigInt!
}

"""
Autogenerated input type of DestroyAddOn
"""
input DestroyAddOnInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of DestroyAddOn
"""
type DestroyAddOnPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated input type of DestroyBillableMetric
"""
input DestroyBillableMetricInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: String!
}

"""
Autogenerated return type of DestroyBillableMetric
"""
type DestroyBillableMetricPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated input type of DestroyCoupon
"""
input DestroyCouponInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of DestroyCoupon
"""
type DestroyCouponPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated input type of DestroyCustomer
"""
input DestroyCustomerInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of DestroyCustomer
"""
type DestroyCustomerPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated input type of DestroyPaymentProvider
"""
input DestroyPaymentProviderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of DestroyPaymentProvider
"""
type DestroyPaymentProviderPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated input type of DestroyPlan
"""
input DestroyPlanInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of DestroyPlan
"""
type DestroyPlanPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated input type of DestroyTax
"""
input DestroyTaxInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of DestroyTax
"""
type DestroyTaxPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated input type of DestroyWebhookEndpoint
"""
input DestroyWebhookEndpointInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of DestroyWebhookEndpoint
"""
type DestroyWebhookEndpointPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Document numbering type
"""
enum DocumentNumberingEnum {
  per_customer
  per_organization
}

"""
Autogenerated input type of DownloadCreditNote
"""
input DownloadCreditNoteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated input type of DownloadCustomerPortalInvoice
"""
input DownloadCustomerPortalInvoiceInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated input type of DownloadInvoice
"""
input DownloadInvoiceInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Organization Email Settings Values
"""
enum EmailSettingsEnum {
  """
  credit_note.created
  """
  credit_note_created

  """
  invoice.finalized
  """
  invoice_finalized
}

type Event {
  apiClient: String
  billableMetricName: String
  code: String!
  customerTimezone: TimezoneEnum!
  deletedAt: ISO8601DateTime
  externalCustomerId: String
  externalSubscriptionId: String
  id: ID!
  ipAddress: String
  matchBillableMetric: Boolean!
  matchCustomField: Boolean!
  matchCustomer: Boolean!
  matchSubscription: Boolean!
  payload: JSON!
  receivedAt: ISO8601DateTime!
  timestamp: ISO8601DateTime
  transactionId: String
}

type EventCollection {
  collection: [Event!]!
  metadata: CollectionMetadata!
}

type Fee implements InvoiceItem {
  amountCents: BigInt!
  amountCurrency: CurrencyEnum!
  appliedTaxes: [FeeAppliedTax!]
  charge: Charge
  creditableAmountCents: BigInt!
  currency: CurrencyEnum!
  description: String
  eventsCount: BigInt
  feeType: FeeTypesEnum!
  group: Group
  groupName: String
  id: ID!
  invoiceDisplayName: String
  invoiceName: String
  itemCode: String!
  itemName: String!
  itemType: String!
  preciseUnitAmount: Float!
  subscription: Subscription
  taxesAmountCents: BigInt!
  taxesRate: Float
  trueUpFee: Fee
  trueUpParentFee: Fee
  units: Float!
}

type FeeAppliedTax implements AppliedTax {
  amountCents: BigInt!
  amountCurrency: CurrencyEnum!
  createdAt: ISO8601DateTime!
  fee: Fee!
  id: ID!
  tax: Tax!
  taxCode: String!
  taxDescription: String
  taxName: String!
  taxRate: Float!
  updatedAt: ISO8601DateTime!
}

"""
Fee input for creating invoice
"""
input FeeInput {
  addOnId: ID!
  description: String
  invoiceDisplayName: String
  name: String
  taxCodes: [String!]
  unitAmountCents: BigInt
  units: Float
}

enum FeeTypesEnum {
  add_on
  charge
  credit
  subscription
}

"""
Autogenerated input type of FinalizeInvoice
"""
input FinalizeInvoiceInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

type FinalizedInvoiceCollection {
  amountCents: BigInt!
  currency: CurrencyEnum
  invoicesCount: BigInt!
  month: ISO8601DateTime!
  paymentStatus: InvoicePaymentStatusTypeEnum
}

type FinalizedInvoiceCollectionCollection {
  collection: [FinalizedInvoiceCollection!]!
  metadata: CollectionMetadata!
}

"""
Autogenerated input type of GenerateCustomerPortalUrl
"""
input GenerateCustomerPortalUrlInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of GenerateCustomerPortalUrl
"""
type GenerateCustomerPortalUrlPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  url: String!
}

type GocardlessProvider {
  hasAccessToken: Boolean!
  id: ID!
  successRedirectUrl: String
  webhookSecret: String
}

type GraduatedPercentageRange {
  flatAmount: String!
  fromValue: BigInt!
  rate: String!
  toValue: BigInt
}

input GraduatedPercentageRangeInput {
  flatAmount: String!
  fromValue: BigInt!
  rate: String!
  toValue: BigInt
}

type GraduatedRange {
  flatAmount: String!
  fromValue: BigInt!
  perUnitAmount: String!
  toValue: BigInt
}

input GraduatedRangeInput {
  flatAmount: String!
  fromValue: BigInt!
  perUnitAmount: String!
  toValue: BigInt
}

type GrossRevenue {
  amountCents: BigInt
  currency: CurrencyEnum
  month: ISO8601DateTime!
}

type GrossRevenueCollection {
  collection: [GrossRevenue!]!
  metadata: CollectionMetadata!
}

type Group {
  deletedAt: ISO8601DateTime
  id: ID!
  key: String
  value: String!
}

type GroupProperties {
  deletedAt: ISO8601DateTime
  groupId: ID!
  invoiceDisplayName: String
  values: Properties!
}

input GroupPropertiesInput {
  groupId: ID!
  invoiceDisplayName: String
  values: PropertiesInput!
}

type GroupUsage {
  amountCents: BigInt!
  eventsCount: Int!
  id: ID!
  invoiceDisplayName: String
  key: String
  units: Float!
  value: String!
}

"""
An ISO 8601-encoded date
"""
scalar ISO8601Date

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

type Invite {
  acceptedAt: ISO8601DateTime!
  email: String!
  id: ID!
  organization: Organization!
  recipient: Membership!
  revokedAt: ISO8601DateTime!
  status: InviteStatusTypeEnum!
  token: String!
}

type InviteCollection {
  collection: [Invite!]!
  metadata: CollectionMetadata!
}

enum InviteStatusTypeEnum {
  accepted
  pending
  revoked
}

"""
Invoice
"""
type Invoice {
  appliedTaxes: [InvoiceAppliedTax!]
  chargeAmountCents: BigInt!
  couponsAmountCents: BigInt!
  createdAt: ISO8601DateTime!
  creditNotes: [CreditNote!]
  creditNotesAmountCents: BigInt!
  creditableAmountCents: BigInt!
  currency: CurrencyEnum
  customer: Customer!
  fees: [Fee!]
  feesAmountCents: BigInt!
  fileUrl: String
  id: ID!
  invoiceSubscriptions: [InvoiceSubscription!]
  invoiceType: InvoiceTypeEnum!
  issuingDate: ISO8601Date!
  metadata: [InvoiceMetadata!]
  number: String!
  paymentDueDate: ISO8601Date!
  paymentStatus: InvoicePaymentStatusTypeEnum!
  prepaidCreditAmountCents: BigInt!
  refundableAmountCents: BigInt!
  sequentialId: ID!
  status: InvoiceStatusTypeEnum!
  subTotalExcludingTaxesAmountCents: BigInt!
  subTotalIncludingTaxesAmountCents: BigInt!
  subscriptions: [Subscription!]
  taxesAmountCents: BigInt!
  taxesRate: Float!
  totalAmountCents: BigInt!
  updatedAt: ISO8601DateTime!
  versionNumber: Int!
  voidable: Boolean!
}

type InvoiceAppliedTax implements AppliedTax {
  amountCents: BigInt!
  amountCurrency: CurrencyEnum!
  createdAt: ISO8601DateTime!
  feesAmountCents: BigInt!
  id: ID!
  invoice: Invoice!
  tax: Tax!
  taxCode: String!
  taxDescription: String
  taxName: String!
  taxRate: Float!
  updatedAt: ISO8601DateTime!
}

type InvoiceCollection {
  collection: [Invoice!]!
  metadata: CollectionMetadata!
}

"""
Invoice Item
"""
interface InvoiceItem {
  amountCents: BigInt!
  amountCurrency: CurrencyEnum!
  group: Group
  id: ID!
  itemCode: String!
  itemName: String!
  itemType: String!
}

"""
Attributes for invoice metadata object
"""
type InvoiceMetadata {
  createdAt: ISO8601DateTime!
  id: ID!
  key: String!
  updatedAt: ISO8601DateTime!
  value: String!
}

"""
Attributes for creating or updating invoice metadata object
"""
input InvoiceMetadataInput {
  id: ID
  key: String!
  value: String!
}

enum InvoicePaymentStatusTypeEnum {
  failed
  pending
  succeeded
}

enum InvoiceStatusTypeEnum {
  draft
  finalized
  voided
}

type InvoiceSubscription {
  chargeAmountCents: BigInt!
  chargesFromDatetime: ISO8601DateTime
  chargesToDatetime: ISO8601DateTime
  fees: [Fee!]
  fromDatetime: ISO8601DateTime
  inAdvanceChargesFromDatetime: ISO8601DateTime
  inAdvanceChargesToDatetime: ISO8601DateTime
  invoice: Invoice!
  subscription: Subscription!
  subscriptionAmountCents: BigInt!
  toDatetime: ISO8601DateTime
  totalAmountCents: BigInt!
}

enum InvoiceTypeEnum {
  add_on
  credit
  one_off
  subscription
}

type InvoicedUsage {
  amountCents: BigInt!
  code: String
  currency: CurrencyEnum!
  month: ISO8601DateTime!
}

type InvoicedUsageCollection {
  collection: [InvoicedUsage!]!
  metadata: CollectionMetadata!
}

"""
Represents untyped JSON
"""
scalar JSON

input LimitationInput {
  billableMetricIds: [ID!]
  planIds: [ID!]
}

type LoginUser {
  token: String!
  user: User!
}

"""
Autogenerated input type of LoginUser
"""
input LoginUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  password: String!
}

type Membership {
  createdAt: ISO8601DateTime!
  id: ID!
  organization: Organization!
  revokedAt: ISO8601DateTime!
  role: String
  status: MembershipStatus!
  updatedAt: ISO8601DateTime!
  user: User!
}

type MembershipCollection {
  collection: [Membership!]!
  metadata: CollectionMetadata!
}

enum MembershipStatus {
  active
  revoked
}

type Mrr {
  amountCents: BigInt
  currency: CurrencyEnum
  month: ISO8601DateTime!
}

type MrrCollection {
  collection: [Mrr!]!
  metadata: CollectionMetadata!
}

type Mutation {
  """
  Accepts a new Invite
  """
  acceptInvite(
    """
    Parameters for AcceptInvite
    """
    input: AcceptInviteInput!
  ): RegisterUser

  """
  Add Adyen payment provider
  """
  addAdyenPaymentProvider(
    """
    Parameters for AddAdyenPaymentProvider
    """
    input: AddAdyenPaymentProviderInput!
  ): AdyenProvider

  """
  Add or update Gocardless payment provider
  """
  addGocardlessPaymentProvider(
    """
    Parameters for AddGocardlessPaymentProvider
    """
    input: AddGocardlessPaymentProviderInput!
  ): GocardlessProvider

  """
  Add Stripe API keys to the organization
  """
  addStripePaymentProvider(
    """
    Parameters for AddStripePaymentProvider
    """
    input: AddStripePaymentProviderInput!
  ): StripeProvider

  """
  Creates a new add-on
  """
  createAddOn(
    """
    Parameters for CreateAddOn
    """
    input: CreateAddOnInput!
  ): AddOn

  """
  Creates Adjusted Fee
  """
  createAdjustedFee(
    """
    Parameters for CreateAdjustedFee
    """
    input: CreateAdjustedFeeInput!
  ): Fee

  """
  Assigns a Coupon to a Customer
  """
  createAppliedCoupon(
    """
    Parameters for CreateAppliedCoupon
    """
    input: CreateAppliedCouponInput!
  ): AppliedCoupon

  """
  Creates a new Billable metric
  """
  createBillableMetric(
    """
    Parameters for CreateBillableMetric
    """
    input: CreateBillableMetricInput!
  ): BillableMetric

  """
  Creates a new Coupon
  """
  createCoupon(
    """
    Parameters for CreateCoupon
    """
    input: CreateCouponInput!
  ): Coupon

  """
  Creates a new Credit Note
  """
  createCreditNote(
    """
    Parameters for CreateCreditNote
    """
    input: CreateCreditNoteInput!
  ): CreditNote

  """
  Creates a new customer
  """
  createCustomer(
    """
    Parameters for CreateCustomer
    """
    input: CreateCustomerInput!
  ): Customer

  """
  Creates a new Customer Wallet
  """
  createCustomerWallet(
    """
    Parameters for CreateCustomerWallet
    """
    input: CreateCustomerWalletInput!
  ): Wallet

  """
  Creates a new Customer Wallet Transaction
  """
  createCustomerWalletTransaction(
    """
    Parameters for CreateCustomerWalletTransaction
    """
    input: CreateCustomerWalletTransactionInput!
  ): WalletTransactionCollection

  """
  Creates a new Invite
  """
  createInvite(
    """
    Parameters for CreateInvite
    """
    input: CreateInviteInput!
  ): Invite

  """
  Creates a new Invoice
  """
  createInvoice(
    """
    Parameters for CreateInvoice
    """
    input: CreateInvoiceInput!
  ): Invoice

  """
  Creates a new password reset
  """
  createPasswordReset(
    """
    Parameters for CreatePasswordReset
    """
    input: CreatePasswordResetInput!
  ): CreatePasswordResetPayload

  """
  Creates a new Plan
  """
  createPlan(
    """
    Parameters for CreatePlan
    """
    input: CreatePlanInput!
  ): Plan

  """
  Create a new Subscription
  """
  createSubscription(
    """
    Parameters for CreateSubscription
    """
    input: CreateSubscriptionInput!
  ): Subscription

  """
  Creates a tax
  """
  createTax(
    """
    Parameters for CreateTax
    """
    input: TaxCreateInput!
  ): Tax

  """
  Create a new webhook endpoint
  """
  createWebhookEndpoint(
    """
    Parameters for CreateWebhookEndpoint
    """
    input: WebhookEndpointCreateInput!
  ): WebhookEndpoint

  """
  Deletes an add-on
  """
  destroyAddOn(
    """
    Parameters for DestroyAddOn
    """
    input: DestroyAddOnInput!
  ): DestroyAddOnPayload

  """
  Deletes a Billable metric
  """
  destroyBillableMetric(
    """
    Parameters for DestroyBillableMetric
    """
    input: DestroyBillableMetricInput!
  ): DestroyBillableMetricPayload

  """
  Deletes a coupon
  """
  destroyCoupon(
    """
    Parameters for DestroyCoupon
    """
    input: DestroyCouponInput!
  ): DestroyCouponPayload

  """
  Delete a Customer
  """
  destroyCustomer(
    """
    Parameters for DestroyCustomer
    """
    input: DestroyCustomerInput!
  ): DestroyCustomerPayload

  """
  Destroy a payment provider
  """
  destroyPaymentProvider(
    """
    Parameters for DestroyPaymentProvider
    """
    input: DestroyPaymentProviderInput!
  ): DestroyPaymentProviderPayload

  """
  Deletes a Plan
  """
  destroyPlan(
    """
    Parameters for DestroyPlan
    """
    input: DestroyPlanInput!
  ): DestroyPlanPayload

  """
  Deletes a tax
  """
  destroyTax(
    """
    Parameters for DestroyTax
    """
    input: DestroyTaxInput!
  ): DestroyTaxPayload

  """
  Deletes a webhook endpoint
  """
  destroyWebhookEndpoint(
    """
    Parameters for DestroyWebhookEndpoint
    """
    input: DestroyWebhookEndpointInput!
  ): DestroyWebhookEndpointPayload

  """
  Download a Credit Note PDF
  """
  downloadCreditNote(
    """
    Parameters for DownloadCreditNote
    """
    input: DownloadCreditNoteInput!
  ): CreditNote

  """
  Download customer portal invoice PDF
  """
  downloadCustomerPortalInvoice(
    """
    Parameters for DownloadCustomerPortalInvoice
    """
    input: DownloadCustomerPortalInvoiceInput!
  ): Invoice

  """
  Download an Invoice PDF
  """
  downloadInvoice(
    """
    Parameters for DownloadInvoice
    """
    input: DownloadInvoiceInput!
  ): Invoice

  """
  Finalize a draft invoice
  """
  finalizeInvoice(
    """
    Parameters for FinalizeInvoice
    """
    input: FinalizeInvoiceInput!
  ): Invoice

  """
  Generate customer portal URL
  """
  generateCustomerPortalUrl(
    """
    Parameters for GenerateCustomerPortalUrl
    """
    input: GenerateCustomerPortalUrlInput!
  ): GenerateCustomerPortalUrlPayload

  """
  Opens a session for an existing user
  """
  loginUser(
    """
    Parameters for LoginUser
    """
    input: LoginUserInput!
  ): LoginUser

  """
  Refresh a draft invoice
  """
  refreshInvoice(
    """
    Parameters for RefreshInvoice
    """
    input: RefreshInvoiceInput!
  ): Invoice

  """
  Registers a new user and creates related organization
  """
  registerUser(
    """
    Parameters for RegisterUser
    """
    input: RegisterUserInput!
  ): RegisterUser

  """
  Reset password for user and log in
  """
  resetPassword(
    """
    Parameters for ResetPassword
    """
    input: ResetPasswordInput!
  ): LoginUser

  """
  Retry all invoice payments
  """
  retryAllInvoicePayments(
    """
    Parameters for RetryAllInvoicePayments
    """
    input: RetryAllInvoicePaymentsInput!
  ): InvoiceCollection

  """
  Retry invoice payment
  """
  retryInvoicePayment(
    """
    Parameters for RetryInvoicePayment
    """
    input: RetryInvoicePaymentInput!
  ): Invoice

  """
  Retry a Webhook
  """
  retryWebhook(
    """
    Parameters for RetryWebhook
    """
    input: RetryWebhookInput!
  ): Webhook

  """
  Revokes a invite
  """
  revokeInvite(
    """
    Parameters for RevokeInvite
    """
    input: RevokeInviteInput!
  ): Invite

  """
  Revoke a membership
  """
  revokeMembership(
    """
    Parameters for RevokeMembership
    """
    input: RevokeMembershipInput!
  ): Membership

  """
  Unassign a coupon from a customer
  """
  terminateAppliedCoupon(
    """
    Parameters for TerminateAppliedCoupon
    """
    input: TerminateAppliedCouponInput!
  ): AppliedCoupon

  """
  Deletes a coupon
  """
  terminateCoupon(
    """
    Parameters for TerminateCoupon
    """
    input: TerminateCouponInput!
  ): Coupon

  """
  Terminates a new Customer Wallet
  """
  terminateCustomerWallet(
    """
    Parameters for TerminateCustomerWallet
    """
    input: TerminateCustomerWalletInput!
  ): Wallet

  """
  Terminate a Subscription
  """
  terminateSubscription(
    """
    Parameters for TerminateSubscription
    """
    input: TerminateSubscriptionInput!
  ): Subscription

  """
  Update an existing add-on
  """
  updateAddOn(
    """
    Parameters for UpdateAddOn
    """
    input: UpdateAddOnInput!
  ): AddOn

  """
  Update Adyen payment provider
  """
  updateAdyenPaymentProvider(
    """
    Parameters for UpdateAdyenPaymentProvider
    """
    input: UpdateAdyenPaymentProviderInput!
  ): AdyenProvider

  """
  Updates an existing Billable metric
  """
  updateBillableMetric(
    """
    Parameters for UpdateBillableMetric
    """
    input: UpdateBillableMetricInput!
  ): BillableMetric

  """
  Update an existing coupon
  """
  updateCoupon(
    """
    Parameters for UpdateCoupon
    """
    input: UpdateCouponInput!
  ): Coupon

  """
  Updates an existing Credit Note
  """
  updateCreditNote(
    """
    Parameters for UpdateCreditNote
    """
    input: UpdateCreditNoteInput!
  ): CreditNote

  """
  Updates an existing Customer
  """
  updateCustomer(
    """
    Parameters for UpdateCustomer
    """
    input: UpdateCustomerInput!
  ): Customer

  """
  Assign the invoice grace period to Customers
  """
  updateCustomerInvoiceGracePeriod(
    """
    Parameters for UpdateCustomerInvoiceGracePeriod
    """
    input: UpdateCustomerInvoiceGracePeriodInput!
  ): Customer

  """
  Updates a new Customer Wallet
  """
  updateCustomerWallet(
    """
    Parameters for UpdateCustomerWallet
    """
    input: UpdateCustomerWalletInput!
  ): Wallet

  """
  Update Gocardless payment provider
  """
  updateGocardlessPaymentProvider(
    """
    Parameters for UpdateGocardlessPaymentProvider
    """
    input: UpdateGocardlessPaymentProviderInput!
  ): GocardlessProvider

  """
  Update an existing invoice
  """
  updateInvoice(
    """
    Parameters for UpdateInvoice
    """
    input: UpdateInvoiceInput!
  ): Invoice

  """
  Updates an Organization
  """
  updateOrganization(
    """
    Parameters for UpdateOrganization
    """
    input: UpdateOrganizationInput!
  ): Organization

  """
  Updates an existing Plan
  """
  updatePlan(
    """
    Parameters for UpdatePlan
    """
    input: UpdatePlanInput!
  ): Plan

  """
  Update Stripe payment provider
  """
  updateStripePaymentProvider(
    """
    Parameters for UpdateStripePaymentProvider
    """
    input: UpdateStripePaymentProviderInput!
  ): StripeProvider

  """
  Update a Subscription
  """
  updateSubscription(
    """
    Parameters for UpdateSubscription
    """
    input: UpdateSubscriptionInput!
  ): Subscription

  """
  Update an existing tax
  """
  updateTax(
    """
    Parameters for UpdateTax
    """
    input: TaxUpdateInput!
  ): Tax

  """
  Update a new webhook endpoint
  """
  updateWebhookEndpoint(
    """
    Parameters for UpdateWebhookEndpoint
    """
    input: WebhookEndpointUpdateInput!
  ): WebhookEndpoint

  """
  Voids a Credit Note
  """
  voidCreditNote(
    """
    Parameters for VoidCreditNote
    """
    input: VoidCreditNoteInput!
  ): CreditNote

  """
  Void an invoice
  """
  voidInvoice(
    """
    Parameters for VoidInvoice
    """
    input: VoidInvoiceInput!
  ): Invoice
}

"""
Organization Type
"""
type Organization {
  addressLine1: String
  addressLine2: String
  adyenPaymentProvider: AdyenProvider
  apiKey: String!
  billingConfiguration: OrganizationBillingConfiguration
  city: String
  country: CountryCode
  createdAt: ISO8601DateTime!
  defaultCurrency: CurrencyEnum!
  documentNumberPrefix: String!
  documentNumbering: DocumentNumberingEnum!
  email: String
  emailSettings: [EmailSettingsEnum!]
  euTaxManagement: Boolean!
  gocardlessPaymentProvider: GocardlessProvider
  id: ID!
  legalName: String
  legalNumber: String
  logoUrl: String
  name: String!
  netPaymentTerm: Int!
  state: String
  stripePaymentProvider: StripeProvider
  taxIdentificationNumber: String

  """
  Query taxes of an organization
  """
  taxes(
    appliedToOrganization: Boolean
    autoGenerated: Boolean

    """
    List of taxes IDs to fetch
    """
    ids: [ID!]
    limit: Int
    order: String
    page: Int
    searchTerm: String
  ): [Tax!]
  timezone: TimezoneEnum
  updatedAt: ISO8601DateTime!
  webhookUrl: String
  zipcode: String
}

type OrganizationBillingConfiguration {
  documentLocale: String
  id: ID!
  invoiceFooter: String
  invoiceGracePeriod: Int!
  vatRate: Float!
}

input OrganizationBillingConfigurationInput {
  documentLocale: String
  invoiceFooter: String
  invoiceGracePeriod: Int
}

type Plan {
  activeSubscriptionsCount: Int!
  amountCents: BigInt!
  amountCurrency: CurrencyEnum!
  billChargesMonthly: Boolean
  charges: [Charge!]

  """
  Number of charges attached to a plan
  """
  chargesCount: Int!
  code: String!
  createdAt: ISO8601DateTime!

  """
  Number of customers attached to a plan
  """
  customersCount: Int!
  description: String
  draftInvoicesCount: Int!
  id: ID!
  interval: PlanInterval!
  invoiceDisplayName: String
  name: String!
  organization: Organization
  parent: Plan
  payInAdvance: Boolean!
  subscriptionsCount: Int!
  taxes: [Tax!]
  trialPeriod: Float
  updatedAt: ISO8601DateTime!
}

type PlanCollection {
  collection: [Plan!]!
  metadata: CollectionMetadata!
}

enum PlanInterval {
  monthly
  quarterly
  weekly
  yearly
}

input PlanOverridesInput {
  amountCents: BigInt
  amountCurrency: CurrencyEnum
  charges: [ChargeOverridesInput!]
  description: String
  invoiceDisplayName: String
  name: String
  taxCodes: [String!]
  trialPeriod: Float
}

type Properties {
  amount: String
  fixedAmount: String
  freeUnits: BigInt
  freeUnitsPerEvents: BigInt
  freeUnitsPerTotalAggregation: String
  graduatedPercentageRanges: [GraduatedPercentageRange!]
  graduatedRanges: [GraduatedRange!]
  packageSize: BigInt
  perTransactionMaxAmount: String
  perTransactionMinAmount: String
  rate: String
  volumeRanges: [VolumeRange!]
}

input PropertiesInput {
  amount: String
  fixedAmount: String
  freeUnits: BigInt
  freeUnitsPerEvents: BigInt
  freeUnitsPerTotalAggregation: String
  graduatedPercentageRanges: [GraduatedPercentageRangeInput!]
  graduatedRanges: [GraduatedRangeInput!]
  packageSize: BigInt
  perTransactionMaxAmount: String
  perTransactionMinAmount: String
  rate: String
  volumeRanges: [VolumeRangeInput!]
}

type ProviderCustomer {
  id: ID!
  providerCustomerId: ID
  providerPaymentMethods: [ProviderPaymentMethodsEnum!]
  syncWithProvider: Boolean
}

input ProviderCustomerInput {
  providerCustomerId: ID
  providerPaymentMethods: [ProviderPaymentMethodsEnum!]
  syncWithProvider: Boolean
}

enum ProviderPaymentMethodsEnum {
  card
  sepa_debit
}

enum ProviderTypeEnum {
  adyen
  gocardless
  stripe
}

type Query {
  """
  Query a single add-on of an organization
  """
  addOn(
    """
    Uniq ID of the add-on
    """
    id: ID!
  ): AddOn

  """
  Query add-ons of an organization
  """
  addOns(
    """
    List of add-ons IDs to fetch
    """
    ids: [ID!]
    limit: Int
    page: Int
    searchTerm: String
  ): AddOnCollection!

  """
  Query a single billable metric of an organization
  """
  billableMetric(
    """
    Uniq ID of the billable metric
    """
    id: ID!
  ): BillableMetric

  """
  Query billable metrics of an organization
  """
  billableMetrics(
    aggregationTypes: [AggregationTypeEnum!]

    """
    List of plan ID to fetch
    """
    ids: [String!]
    limit: Int
    page: Int
    recurring: Boolean
    searchTerm: String
  ): BillableMetricCollection!

  """
  Query a single coupon of an organization
  """
  coupon(
    """
    Uniq ID of the coupon
    """
    id: ID!
  ): Coupon

  """
  Query coupons of an organization
  """
  coupons(
    """
    List of coupon IDs to fetch
    """
    ids: [ID!]
    limit: Int
    page: Int
    searchTerm: String
    status: CouponStatusEnum
  ): CouponCollection!

  """
  Query a single credit note
  """
  creditNote(
    """
    Uniq ID of the credit note
    """
    id: ID!
  ): CreditNote

  """
  Fetch amounts for credit note creation
  """
  creditNoteEstimate(invoiceId: ID!, items: [CreditNoteItemInput!]!): CreditNoteEstimate!

  """
  Retrieves currently connected user
  """
  currentUser: User!

  """
  Retrieve the version of the application
  """
  currentVersion: CurrentVersion!

  """
  Query a single customer of an organization
  """
  customer(
    """
    Uniq ID of the customer
    """
    id: ID!
  ): Customer

  """
  Query customer's credit note
  """
  customerCreditNotes(
    """
    Uniq ID of the customer
    """
    customerId: ID!

    """
    List of plan ID to fetch
    """
    ids: [String!]
    limit: Int
    page: Int
    searchTerm: String
  ): CreditNoteCollection

  """
  Query invoices of a customer
  """
  customerInvoices(customerId: ID!, limit: Int, page: Int, searchTerm: String, status: [InvoiceStatusTypeEnum!]): InvoiceCollection!

  """
  Query invoices of a customer
  """
  customerPortalInvoices(limit: Int, page: Int, searchTerm: String, status: [InvoiceStatusTypeEnum!]): InvoiceCollection!

  """
  Query customer portal organization
  """
  customerPortalOrganization: Organization

  """
  Query a customer portal user
  """
  customerPortalUser: Customer

  """
  Query the usage of the customer on the current billing period
  """
  customerUsage(customerId: ID, subscriptionId: ID!): CustomerUsage!

  """
  Query customers of an organization
  """
  customers(
    """
    List of customer Lago ID to fetch
    """
    ids: [String!]
    limit: Int
    page: Int
    searchTerm: String
  ): CustomerCollection!

  """
  Query events of an organization
  """
  events(limit: Int, page: Int): EventCollection

  """
  Query gross revenue of an organization
  """
  grossRevenues(currency: CurrencyEnum, externalCustomerId: String): GrossRevenueCollection!

  """
  Query a single Invite
  """
  invite(
    """
    Uniq token of the Invite
    """
    token: String!
  ): Invite

  """
  Query pending invites of an organization
  """
  invites(limit: Int, page: Int): InviteCollection!

  """
  Query a single Invoice of an organization
  """
  invoice(
    """
    Uniq ID of the invoice
    """
    id: ID!
  ): Invoice

  """
  Query invoice collections of an organization
  """
  invoiceCollections(currency: CurrencyEnum): FinalizedInvoiceCollectionCollection!

  """
  Query invoice's credit note
  """
  invoiceCreditNotes(
    """
    Uniq ID of the invoice
    """
    invoiceId: ID!
    limit: Int
    page: Int
  ): CreditNoteCollection

  """
  Query invoiced usage of an organization
  """
  invoicedUsages(currency: CurrencyEnum): InvoicedUsageCollection!

  """
  Query invoices
  """
  invoices(
    """
    List of invoice IDs to fetch
    """
    ids: [ID!]
    limit: Int
    page: Int
    paymentStatus: [InvoicePaymentStatusTypeEnum!]
    searchTerm: String
    status: InvoiceStatusTypeEnum
  ): InvoiceCollection!

  """
  Query memberships of an organization
  """
  memberships(limit: Int, page: Int): MembershipCollection!

  """
  Query MRR of an organization
  """
  mrrs(currency: CurrencyEnum): MrrCollection!

  """
  Query the current organization
  """
  organization: Organization

  """
  Query a password reset by token
  """
  passwordReset(
    """
    Uniq token of the password reset
    """
    token: String!
  ): ResetPassword!

  """
  Query a single plan of an organization
  """
  plan(
    """
    Uniq ID of the plan
    """
    id: ID!
  ): Plan

  """
  Query plans of an organization
  """
  plans(
    """
    List of plan ID to fetch
    """
    ids: [String!]
    limit: Int
    page: Int
    searchTerm: String
  ): PlanCollection!

  """
  Query a single subscription of an organization
  """
  subscription(
    """
    Uniq ID of the subscription
    """
    id: ID!
  ): Subscription

  """
  Query subscriptions of an organization
  """
  subscriptions(limit: Int, page: Int, planCode: String, status: [StatusTypeEnum!]): SubscriptionCollection!

  """
  Query a single tax of an organization
  """
  tax(
    """
    Uniq ID of the tax
    """
    id: ID!
  ): Tax

  """
  Query taxes of an organization
  """
  taxes(
    appliedToOrganization: Boolean
    autoGenerated: Boolean

    """
    List of taxes IDs to fetch
    """
    ids: [ID!]
    limit: Int
    order: String
    page: Int
    searchTerm: String
  ): TaxCollection!

  """
  Query a single wallet of an organization
  """
  wallet(
    """
    Uniq ID of the wallet
    """
    id: ID!
  ): Wallet

  """
  Query wallet transactions
  """
  walletTransactions(
    """
    List of wallet transaction IDs to fetch
    """
    ids: [ID!]
    limit: Int
    page: Int
    status: WalletTransactionStatusEnum
    transactionType: WalletTransactionTransactionTypeEnum

    """
    Uniq ID of the wallet
    """
    walletId: ID!
  ): WalletTransactionCollection!

  """
  Query wallets
  """
  wallets(
    """
    Uniq ID of the customer
    """
    customerId: ID!

    """
    List of wallet IDs to fetch
    """
    ids: [ID!]
    limit: Int
    page: Int
    status: WalletStatusEnum
  ): WalletCollection!

  """
  Query a single webhook endpoint
  """
  webhookEndpoint(
    """
    Uniq ID of the webhook endpoint
    """
    id: ID!
  ): WebhookEndpoint

  """
  Query webhook endpoints of an organization
  """
  webhookEndpoints(
    """
    List of webhook endpoint IDs to fetch
    """
    ids: [ID!]
    limit: Int
    page: Int
    searchTerm: String
  ): WebhookEndpointCollection!

  """
  Query Webhooks
  """
  webhooks(limit: Int, page: Int, searchTerm: String, status: WebhookStatusEnum, webhookEndpointId: String!): WebhookCollection!
}

enum RecurringTransactionIntervalEnum {
  monthly
  quarterly
  weekly
  yearly
}

type RecurringTransactionRule {
  createdAt: ISO8601DateTime!
  grantedCredits: String!
  interval: RecurringTransactionIntervalEnum
  lagoId: ID!
  paidCredits: String!
  ruleType: RecurringTransactionRuleTypeEnum!
  thresholdCredits: String
}

enum RecurringTransactionRuleTypeEnum {
  interval
  threshold
}

"""
Autogenerated input type of RefreshInvoice
"""
input RefreshInvoiceInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

type RegisterUser {
  membership: Membership!
  organization: Organization!
  token: String!
  user: User!
}

"""
Autogenerated input type of RegisterUser
"""
input RegisterUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  organizationName: String!
  password: String!
}

"""
ResetPassword type
"""
type ResetPassword {
  expireAt: ISO8601DateTime!
  id: ID!
  token: String!
  user: User!
}

"""
Autogenerated input type of ResetPassword
"""
input ResetPasswordInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  newPassword: String!
  token: String!
}

"""
Autogenerated input type of RetryAllInvoicePayments
"""
input RetryAllInvoicePaymentsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of RetryInvoicePayment
"""
input RetryInvoicePaymentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated input type of RetryWebhook
"""
input RetryWebhookInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated input type of RevokeInvite
"""
input RevokeInviteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated input type of RevokeMembership
"""
input RevokeMembershipInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

enum StatusTypeEnum {
  active
  canceled
  pending
  terminated
}

type StripeProvider {
  createCustomers: Boolean!
  id: ID!
  secretKey: String!
  successRedirectUrl: String
}

type Subscription {
  billingTime: BillingTimeEnum
  canceledAt: ISO8601DateTime
  createdAt: ISO8601DateTime!
  customer: Customer!
  endingAt: ISO8601DateTime
  externalId: String!
  fees: [Fee!]
  id: ID!
  name: String
  nextName: String
  nextPendingStartDate: ISO8601Date
  nextPlan: Plan
  nextSubscription: Subscription
  periodEndDate: ISO8601Date
  plan: Plan!
  startedAt: ISO8601DateTime
  status: StatusTypeEnum
  subscriptionAt: ISO8601DateTime
  terminatedAt: ISO8601DateTime
  updatedAt: ISO8601DateTime!
}

type SubscriptionCollection {
  collection: [Subscription!]!
  metadata: CollectionMetadata!
}

type Tax {
  """
  Number of add ons using this tax
  """
  addOnsCount: Int!
  appliedToOrganization: Boolean!
  autoGenerated: Boolean!

  """
  Number of charges using this tax
  """
  chargesCount: Int!
  code: String!
  createdAt: ISO8601DateTime!

  """
  Number of customers using this tax
  """
  customersCount: Int!
  description: String
  id: ID!
  name: String!
  organization: Organization

  """
  Number of plans using this tax
  """
  plansCount: Int!
  rate: Float!
  updatedAt: ISO8601DateTime!
}

type TaxCollection {
  collection: [Tax!]!
  metadata: CollectionMetadata!
}

"""
Autogenerated input type of CreateTax
"""
input TaxCreateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  code: String!
  description: String
  name: String!
  rate: Float!
}

"""
Autogenerated input type of UpdateTax
"""
input TaxUpdateInput {
  appliedToOrganization: Boolean

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  code: String
  description: String
  id: ID!
  name: String
  rate: Float
}

"""
Autogenerated input type of TerminateAppliedCoupon
"""
input TerminateAppliedCouponInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated input type of TerminateCoupon
"""
input TerminateCouponInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated input type of TerminateCustomerWallet
"""
input TerminateCustomerWalletInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated input type of TerminateSubscription
"""
input TerminateSubscriptionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

enum TimezoneEnum {
  """
  Africa/Algiers
  """
  TZ_AFRICA_ALGIERS

  """
  Africa/Cairo
  """
  TZ_AFRICA_CAIRO

  """
  Africa/Casablanca
  """
  TZ_AFRICA_CASABLANCA

  """
  Africa/Harare
  """
  TZ_AFRICA_HARARE

  """
  Africa/Johannesburg
  """
  TZ_AFRICA_JOHANNESBURG

  """
  Africa/Monrovia
  """
  TZ_AFRICA_MONROVIA

  """
  Africa/Nairobi
  """
  TZ_AFRICA_NAIROBI

  """
  America/Argentina/Buenos_Aires
  """
  TZ_AMERICA_ARGENTINA_BUENOS_AIRES

  """
  America/Bogota
  """
  TZ_AMERICA_BOGOTA

  """
  America/Caracas
  """
  TZ_AMERICA_CARACAS

  """
  America/Chicago
  """
  TZ_AMERICA_CHICAGO

  """
  America/Chihuahua
  """
  TZ_AMERICA_CHIHUAHUA

  """
  America/Denver
  """
  TZ_AMERICA_DENVER

  """
  America/Godthab
  """
  TZ_AMERICA_GODTHAB

  """
  America/Guatemala
  """
  TZ_AMERICA_GUATEMALA

  """
  America/Guyana
  """
  TZ_AMERICA_GUYANA

  """
  America/Halifax
  """
  TZ_AMERICA_HALIFAX

  """
  America/Indiana/Indianapolis
  """
  TZ_AMERICA_INDIANA_INDIANAPOLIS

  """
  America/Juneau
  """
  TZ_AMERICA_JUNEAU

  """
  America/La_Paz
  """
  TZ_AMERICA_LA_PAZ

  """
  America/Lima
  """
  TZ_AMERICA_LIMA

  """
  America/Los_Angeles
  """
  TZ_AMERICA_LOS_ANGELES

  """
  America/Mazatlan
  """
  TZ_AMERICA_MAZATLAN

  """
  America/Mexico_City
  """
  TZ_AMERICA_MEXICO_CITY

  """
  America/Monterrey
  """
  TZ_AMERICA_MONTERREY

  """
  America/Montevideo
  """
  TZ_AMERICA_MONTEVIDEO

  """
  America/New_York
  """
  TZ_AMERICA_NEW_YORK

  """
  America/Phoenix
  """
  TZ_AMERICA_PHOENIX

  """
  America/Puerto_Rico
  """
  TZ_AMERICA_PUERTO_RICO

  """
  America/Regina
  """
  TZ_AMERICA_REGINA

  """
  America/Santiago
  """
  TZ_AMERICA_SANTIAGO

  """
  America/Sao_Paulo
  """
  TZ_AMERICA_SAO_PAULO

  """
  America/St_Johns
  """
  TZ_AMERICA_ST_JOHNS

  """
  America/Tijuana
  """
  TZ_AMERICA_TIJUANA

  """
  Asia/Almaty
  """
  TZ_ASIA_ALMATY

  """
  Asia/Baghdad
  """
  TZ_ASIA_BAGHDAD

  """
  Asia/Baku
  """
  TZ_ASIA_BAKU

  """
  Asia/Bangkok
  """
  TZ_ASIA_BANGKOK

  """
  Asia/Chongqing
  """
  TZ_ASIA_CHONGQING

  """
  Asia/Colombo
  """
  TZ_ASIA_COLOMBO

  """
  Asia/Dhaka
  """
  TZ_ASIA_DHAKA

  """
  Asia/Hong_Kong
  """
  TZ_ASIA_HONG_KONG

  """
  Asia/Irkutsk
  """
  TZ_ASIA_IRKUTSK

  """
  Asia/Jakarta
  """
  TZ_ASIA_JAKARTA

  """
  Asia/Jerusalem
  """
  TZ_ASIA_JERUSALEM

  """
  Asia/Kabul
  """
  TZ_ASIA_KABUL

  """
  Asia/Kamchatka
  """
  TZ_ASIA_KAMCHATKA

  """
  Asia/Karachi
  """
  TZ_ASIA_KARACHI

  """
  Asia/Kathmandu
  """
  TZ_ASIA_KATHMANDU

  """
  Asia/Kolkata
  """
  TZ_ASIA_KOLKATA

  """
  Asia/Krasnoyarsk
  """
  TZ_ASIA_KRASNOYARSK

  """
  Asia/Kuala_Lumpur
  """
  TZ_ASIA_KUALA_LUMPUR

  """
  Asia/Kuwait
  """
  TZ_ASIA_KUWAIT

  """
  Asia/Magadan
  """
  TZ_ASIA_MAGADAN

  """
  Asia/Muscat
  """
  TZ_ASIA_MUSCAT

  """
  Asia/Novosibirsk
  """
  TZ_ASIA_NOVOSIBIRSK

  """
  Asia/Rangoon
  """
  TZ_ASIA_RANGOON

  """
  Asia/Riyadh
  """
  TZ_ASIA_RIYADH

  """
  Asia/Seoul
  """
  TZ_ASIA_SEOUL

  """
  Asia/Shanghai
  """
  TZ_ASIA_SHANGHAI

  """
  Asia/Singapore
  """
  TZ_ASIA_SINGAPORE

  """
  Asia/Srednekolymsk
  """
  TZ_ASIA_SREDNEKOLYMSK

  """
  Asia/Taipei
  """
  TZ_ASIA_TAIPEI

  """
  Asia/Tashkent
  """
  TZ_ASIA_TASHKENT

  """
  Asia/Tbilisi
  """
  TZ_ASIA_TBILISI

  """
  Asia/Tehran
  """
  TZ_ASIA_TEHRAN

  """
  Asia/Tokyo
  """
  TZ_ASIA_TOKYO

  """
  Asia/Ulaanbaatar
  """
  TZ_ASIA_ULAANBAATAR

  """
  Asia/Urumqi
  """
  TZ_ASIA_URUMQI

  """
  Asia/Vladivostok
  """
  TZ_ASIA_VLADIVOSTOK

  """
  Asia/Yakutsk
  """
  TZ_ASIA_YAKUTSK

  """
  Asia/Yekaterinburg
  """
  TZ_ASIA_YEKATERINBURG

  """
  Asia/Yerevan
  """
  TZ_ASIA_YEREVAN

  """
  Atlantic/Azores
  """
  TZ_ATLANTIC_AZORES

  """
  Atlantic/Cape_Verde
  """
  TZ_ATLANTIC_CAPE_VERDE

  """
  Atlantic/South_Georgia
  """
  TZ_ATLANTIC_SOUTH_GEORGIA

  """
  Australia/Adelaide
  """
  TZ_AUSTRALIA_ADELAIDE

  """
  Australia/Brisbane
  """
  TZ_AUSTRALIA_BRISBANE

  """
  Australia/Darwin
  """
  TZ_AUSTRALIA_DARWIN

  """
  Australia/Hobart
  """
  TZ_AUSTRALIA_HOBART

  """
  Australia/Melbourne
  """
  TZ_AUSTRALIA_MELBOURNE

  """
  Australia/Perth
  """
  TZ_AUSTRALIA_PERTH

  """
  Australia/Sydney
  """
  TZ_AUSTRALIA_SYDNEY

  """
  Etc/GMT+12
  """
  TZ_ETC_GMT_12

  """
  Europe/Amsterdam
  """
  TZ_EUROPE_AMSTERDAM

  """
  Europe/Athens
  """
  TZ_EUROPE_ATHENS

  """
  Europe/Belgrade
  """
  TZ_EUROPE_BELGRADE

  """
  Europe/Berlin
  """
  TZ_EUROPE_BERLIN

  """
  Europe/Bratislava
  """
  TZ_EUROPE_BRATISLAVA

  """
  Europe/Brussels
  """
  TZ_EUROPE_BRUSSELS

  """
  Europe/Bucharest
  """
  TZ_EUROPE_BUCHAREST

  """
  Europe/Budapest
  """
  TZ_EUROPE_BUDAPEST

  """
  Europe/Copenhagen
  """
  TZ_EUROPE_COPENHAGEN

  """
  Europe/Dublin
  """
  TZ_EUROPE_DUBLIN

  """
  Europe/Helsinki
  """
  TZ_EUROPE_HELSINKI

  """
  Europe/Istanbul
  """
  TZ_EUROPE_ISTANBUL

  """
  Europe/Kaliningrad
  """
  TZ_EUROPE_KALININGRAD

  """
  Europe/Kiev
  """
  TZ_EUROPE_KIEV

  """
  Europe/Lisbon
  """
  TZ_EUROPE_LISBON

  """
  Europe/Ljubljana
  """
  TZ_EUROPE_LJUBLJANA

  """
  Europe/London
  """
  TZ_EUROPE_LONDON

  """
  Europe/Madrid
  """
  TZ_EUROPE_MADRID

  """
  Europe/Minsk
  """
  TZ_EUROPE_MINSK

  """
  Europe/Moscow
  """
  TZ_EUROPE_MOSCOW

  """
  Europe/Paris
  """
  TZ_EUROPE_PARIS

  """
  Europe/Prague
  """
  TZ_EUROPE_PRAGUE

  """
  Europe/Riga
  """
  TZ_EUROPE_RIGA

  """
  Europe/Rome
  """
  TZ_EUROPE_ROME

  """
  Europe/Samara
  """
  TZ_EUROPE_SAMARA

  """
  Europe/Sarajevo
  """
  TZ_EUROPE_SARAJEVO

  """
  Europe/Skopje
  """
  TZ_EUROPE_SKOPJE

  """
  Europe/Sofia
  """
  TZ_EUROPE_SOFIA

  """
  Europe/Stockholm
  """
  TZ_EUROPE_STOCKHOLM

  """
  Europe/Tallinn
  """
  TZ_EUROPE_TALLINN

  """
  Europe/Vienna
  """
  TZ_EUROPE_VIENNA

  """
  Europe/Vilnius
  """
  TZ_EUROPE_VILNIUS

  """
  Europe/Volgograd
  """
  TZ_EUROPE_VOLGOGRAD

  """
  Europe/Warsaw
  """
  TZ_EUROPE_WARSAW

  """
  Europe/Zagreb
  """
  TZ_EUROPE_ZAGREB

  """
  Europe/Zurich
  """
  TZ_EUROPE_ZURICH

  """
  Pacific/Apia
  """
  TZ_PACIFIC_APIA

  """
  Pacific/Auckland
  """
  TZ_PACIFIC_AUCKLAND

  """
  Pacific/Chatham
  """
  TZ_PACIFIC_CHATHAM

  """
  Pacific/Fakaofo
  """
  TZ_PACIFIC_FAKAOFO

  """
  Pacific/Fiji
  """
  TZ_PACIFIC_FIJI

  """
  Pacific/Guadalcanal
  """
  TZ_PACIFIC_GUADALCANAL

  """
  Pacific/Guam
  """
  TZ_PACIFIC_GUAM

  """
  Pacific/Honolulu
  """
  TZ_PACIFIC_HONOLULU

  """
  Pacific/Majuro
  """
  TZ_PACIFIC_MAJURO

  """
  Pacific/Midway
  """
  TZ_PACIFIC_MIDWAY

  """
  Pacific/Noumea
  """
  TZ_PACIFIC_NOUMEA

  """
  Pacific/Pago_Pago
  """
  TZ_PACIFIC_PAGO_PAGO

  """
  Pacific/Port_Moresby
  """
  TZ_PACIFIC_PORT_MORESBY

  """
  Pacific/Tongatapu
  """
  TZ_PACIFIC_TONGATAPU

  """
  UTC
  """
  TZ_UTC
}

"""
Autogenerated input type of UpdateAddOn
"""
input UpdateAddOnInput {
  amountCents: BigInt!
  amountCurrency: CurrencyEnum!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  code: String!
  description: String
  id: ID!
  invoiceDisplayName: String
  name: String!
  taxCodes: [String!]
}

"""
Autogenerated input type of UpdateAdyenPaymentProvider
"""
input UpdateAdyenPaymentProviderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  successRedirectUrl: String
}

"""
Update Billable metric input arguments
"""
input UpdateBillableMetricInput {
  aggregationType: AggregationTypeEnum!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  code: String!
  description: String!
  fieldName: String
  group: JSON
  id: String!
  name: String!
  recurring: Boolean
  weightedInterval: WeightedIntervalEnum
}

"""
Autogenerated input type of UpdateCoupon
"""
input UpdateCouponInput {
  amountCents: BigInt
  amountCurrency: CurrencyEnum
  appliesTo: LimitationInput

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  code: String
  couponType: CouponTypeEnum!
  description: String
  expiration: CouponExpiration!
  expirationAt: ISO8601DateTime
  frequency: CouponFrequency!
  frequencyDuration: Int
  id: String!
  name: String!
  percentageRate: Float
  reusable: Boolean
}

"""
Autogenerated input type of UpdateCreditNote
"""
input UpdateCreditNoteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
  refundStatus: CreditNoteRefundStatusEnum!
}

"""
Update Customer input arguments
"""
input UpdateCustomerInput {
  addressLine1: String
  addressLine2: String
  billingConfiguration: CustomerBillingConfigurationInput
  city: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  country: CountryCode
  currency: CurrencyEnum
  email: String
  externalId: String!
  externalSalesforceId: String
  id: ID!
  invoiceGracePeriod: Int
  legalName: String
  legalNumber: String
  logoUrl: String
  metadata: [CustomerMetadataInput!]
  name: String!
  netPaymentTerm: Int
  paymentProvider: ProviderTypeEnum
  phone: String
  providerCustomer: ProviderCustomerInput
  state: String
  taxCodes: [String!]
  taxIdentificationNumber: String
  timezone: TimezoneEnum
  url: String
  zipcode: String
}

"""
Autogenerated input type of UpdateCustomerInvoiceGracePeriod
"""
input UpdateCustomerInvoiceGracePeriodInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
  invoiceGracePeriod: Int
}

"""
Update Wallet Input
"""
input UpdateCustomerWalletInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  expirationAt: ISO8601DateTime
  id: ID!
  name: String
  recurringTransactionRules: [UpdateRecurringTransactionRuleInput!]
}

"""
Autogenerated input type of UpdateGocardlessPaymentProvider
"""
input UpdateGocardlessPaymentProviderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  successRedirectUrl: String
}

"""
Update Invoice input arguments
"""
input UpdateInvoiceInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
  metadata: [InvoiceMetadataInput!]
  paymentStatus: InvoicePaymentStatusTypeEnum
}

"""
Update Organization input arguments
"""
input UpdateOrganizationInput {
  addressLine1: String
  addressLine2: String
  billingConfiguration: OrganizationBillingConfigurationInput
  city: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  country: CountryCode
  defaultCurrency: CurrencyEnum
  documentNumberPrefix: String
  documentNumbering: DocumentNumberingEnum
  email: String
  emailSettings: [EmailSettingsEnum!]
  euTaxManagement: Boolean
  legalName: String
  legalNumber: String
  logo: String
  netPaymentTerm: Int
  state: String
  taxIdentificationNumber: String
  timezone: TimezoneEnum
  webhookUrl: String
  zipcode: String
}

"""
Autogenerated input type of UpdatePlan
"""
input UpdatePlanInput {
  amountCents: BigInt!
  amountCurrency: CurrencyEnum!
  billChargesMonthly: Boolean
  charges: [ChargeInput!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  code: String!
  description: String
  id: String!
  interval: PlanInterval!
  invoiceDisplayName: String
  name: String!
  payInAdvance: Boolean!
  taxCodes: [String!]
  trialPeriod: Float
}

input UpdateRecurringTransactionRuleInput {
  grantedCredits: String
  interval: RecurringTransactionIntervalEnum
  lagoId: ID
  paidCredits: String
  ruleType: RecurringTransactionRuleTypeEnum
  thresholdCredits: String
}

"""
Autogenerated input type of UpdateStripePaymentProvider
"""
input UpdateStripePaymentProviderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  successRedirectUrl: String
}

"""
Update Subscription input arguments
"""
input UpdateSubscriptionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  endingAt: ISO8601DateTime
  id: ID!
  name: String
  planOverrides: PlanOverridesInput
  subscriptionAt: ISO8601DateTime
}

type User {
  createdAt: ISO8601DateTime!
  email: String
  id: ID!
  organizations: [Organization!]
  premium: Boolean!
  updatedAt: ISO8601DateTime!
}

"""
Autogenerated input type of VoidCreditNote
"""
input VoidCreditNoteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated input type of VoidInvoice
"""
input VoidInvoiceInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

type VolumeRange {
  flatAmount: String!
  fromValue: BigInt!
  perUnitAmount: String!
  toValue: BigInt
}

input VolumeRangeInput {
  flatAmount: String!
  fromValue: BigInt!
  perUnitAmount: String!
  toValue: BigInt
}

"""
Wallet
"""
type Wallet {
  balanceCents: BigInt!
  consumedAmountCents: BigInt!
  consumedCredits: Float!
  createdAt: ISO8601DateTime!
  creditsBalance: Float!
  currency: CurrencyEnum!
  customer: Customer
  expirationAt: ISO8601DateTime
  id: ID!
  lastBalanceSyncAt: ISO8601DateTime
  lastConsumedCreditAt: ISO8601DateTime
  name: String
  rateAmount: Float!
  recurringTransactionRules: [RecurringTransactionRule!]
  status: WalletStatusEnum!
  terminatedAt: ISO8601DateTime
  updatedAt: ISO8601DateTime!
}

type WalletCollection {
  collection: [Wallet!]!
  metadata: CollectionMetadata!
}

enum WalletStatusEnum {
  active
  terminated
}

type WalletTransaction {
  amount: String!
  createdAt: ISO8601DateTime!
  creditAmount: String!
  id: ID!
  settledAt: ISO8601DateTime
  status: WalletTransactionStatusEnum!
  transactionType: WalletTransactionTransactionTypeEnum!
  updatedAt: ISO8601DateTime!
  wallet: Wallet
}

type WalletTransactionCollection {
  collection: [WalletTransaction!]!
  metadata: CollectionMetadata!
}

enum WalletTransactionStatusEnum {
  pending
  settled
}

enum WalletTransactionTransactionTypeEnum {
  inbound
  outbound
}

type Webhook {
  createdAt: ISO8601DateTime!
  endpoint: String!
  httpStatus: Int
  id: ID!
  lastRetriedAt: ISO8601DateTime
  objectType: String!
  payload: String
  response: String
  retries: Int!
  status: WebhookStatusEnum!
  updatedAt: ISO8601DateTime!
  webhookEndpoint: WebhookEndpoint
  webhookType: String!
}

type WebhookCollection {
  collection: [Webhook!]!
  metadata: CollectionMetadata!
}

type WebhookEndpoint {
  createdAt: ISO8601DateTime!
  id: ID!
  organization: Organization
  signatureAlgo: WebhookEndpointSignatureAlgoEnum
  updatedAt: ISO8601DateTime!
  webhookUrl: String!
}

type WebhookEndpointCollection {
  collection: [WebhookEndpoint!]!
  metadata: CollectionMetadata!
}

"""
Autogenerated input type of CreateWebhookEndpoint
"""
input WebhookEndpointCreateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  signatureAlgo: WebhookEndpointSignatureAlgoEnum
  webhookUrl: String!
}

enum WebhookEndpointSignatureAlgoEnum {
  hmac
  jwt
}

"""
Autogenerated input type of UpdateWebhookEndpoint
"""
input WebhookEndpointUpdateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
  signatureAlgo: WebhookEndpointSignatureAlgoEnum
  webhookUrl: String!
}

enum WebhookStatusEnum {
  failed
  pending
  succeeded
}

enum WeightedIntervalEnum {
  seconds
}
