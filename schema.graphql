"""
Autogenerated input type of AcceptInvite
"""
input AcceptInviteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  password: String!

  """
  Uniq token of the Invite
  """
  token: String!
}

"""
Autogenerated input type of AddGocardlessPaymentProvider
"""
input AddGocardlessPaymentProviderInput {
  accessCode: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

type AddOn {
  amountCents: Int!
  amountCurrency: CurrencyEnum!

  """
  Check if add-on is deletable
  """
  canBeDeleted: Boolean!
  code: String!
  createdAt: ISO8601DateTime!

  """
  Number of customers using this add-on
  """
  customerCount: Int!
  description: String
  id: ID!
  name: String!
  organization: Organization
  updatedAt: ISO8601DateTime!
}

type AddOnCollection {
  collection: [AddOn!]!
  metadata: CollectionMetadata!
}

type AddOnDetails {
  amountCents: Int!
  amountCurrency: CurrencyEnum!

  """
  Check if add-on is deletable
  """
  canBeDeleted: Boolean!
  code: String!
  createdAt: ISO8601DateTime!

  """
  Number of customers using this add-on
  """
  customerCount: Int!
  description: String
  id: ID!
  name: String!
  organization: Organization
  updatedAt: ISO8601DateTime!
}

"""
Autogenerated input type of AddStripePaymentProvider
"""
input AddStripePaymentProviderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  createCustomers: Boolean
  secretKey: String
}

enum AggregationTypeEnum {
  count_agg
  max_agg
  recurring_count_agg
  sum_agg
  unique_count_agg
}

type AppliedAddOn {
  addOn: AddOn!
  amountCents: Int!
  amountCurrency: CurrencyEnum!
  createdAt: ISO8601DateTime!
  id: ID!
}

type AppliedCoupon {
  amountCents: Int
  amountCurrency: CurrencyEnum
  coupon: Coupon!
  createdAt: ISO8601DateTime!
  frequency: CouponFrequency!
  frequencyDuration: Int
  id: ID!
  percentageRate: Float
  terminatedAt: ISO8601DateTime!
}

"""
Represents non-fractional signed whole numeric values. Since the value may
exceed the size of a 32-bit integer, it's encoded as a string.
"""
scalar BigInt

type BillableMetric {
  aggregationType: AggregationTypeEnum!

  """
  Check if billable metric is deletable
  """
  canBeDeleted: Boolean!
  code: String!
  createdAt: ISO8601DateTime!
  description: String
  fieldName: String
  flatGroups: [Group!]
  group: JSON
  id: ID!
  name: String!
  organization: Organization
  updatedAt: ISO8601DateTime!
}

type BillableMetricCollection {
  collection: [BillableMetric!]!
  metadata: CollectionMetadata!
}

type BillableMetricDetail {
  aggregationType: AggregationTypeEnum!

  """
  Check if billable metric is deletable
  """
  canBeDeleted: Boolean!
  code: String!
  createdAt: ISO8601DateTime!
  description: String
  fieldName: String
  flatGroups: [Group!]
  group: JSON
  id: ID!
  name: String!
  organization: Organization
  updatedAt: ISO8601DateTime!
}

enum BillingTimeEnum {
  anniversary
  calendar
}

type Charge {
  billableMetric: BillableMetric!
  chargeModel: ChargeModelEnum!
  createdAt: ISO8601DateTime!
  groupProperties: [GroupProperties!]
  id: ID!
  properties: Properties
  updatedAt: ISO8601DateTime!
}

input ChargeInput {
  billableMetricId: ID!
  chargeModel: ChargeModelEnum!
  groupProperties: [GroupPropertiesInput!]
  id: ID
  properties: PropertiesInput
}

enum ChargeModelEnum {
  graduated
  package
  percentage
  standard
  volume
}

type ChargeUsage {
  amountCents: BigInt!
  billableMetric: BillableMetric!
  charge: Charge!
  groups: [GroupUsage!]
  units: Float!
}

type CollectionMetadata {
  currentPage: Int!
  limitValue: Int!
  totalCount: Int!
  totalPages: Int!
}

enum CountryCode {
  """
  Andorra
  """
  AD

  """
  United Arab Emirates
  """
  AE

  """
  Afghanistan
  """
  AF

  """
  Antigua and Barbuda
  """
  AG

  """
  Anguilla
  """
  AI

  """
  Albania
  """
  AL

  """
  Armenia
  """
  AM

  """
  Angola
  """
  AO

  """
  Antarctica
  """
  AQ

  """
  Argentina
  """
  AR

  """
  American Samoa
  """
  AS

  """
  Austria
  """
  AT

  """
  Australia
  """
  AU

  """
  Aruba
  """
  AW

  """
  Åland Islands
  """
  AX

  """
  Azerbaijan
  """
  AZ

  """
  Bosnia and Herzegovina
  """
  BA

  """
  Barbados
  """
  BB

  """
  Bangladesh
  """
  BD

  """
  Belgium
  """
  BE

  """
  Burkina Faso
  """
  BF

  """
  Bulgaria
  """
  BG

  """
  Bahrain
  """
  BH

  """
  Burundi
  """
  BI

  """
  Benin
  """
  BJ

  """
  Saint Barthélemy
  """
  BL

  """
  Bermuda
  """
  BM

  """
  Brunei Darussalam
  """
  BN

  """
  Bolivia (Plurinational State of)
  """
  BO

  """
  Bonaire, Sint Eustatius and Saba
  """
  BQ

  """
  Brazil
  """
  BR

  """
  Bahamas
  """
  BS

  """
  Bhutan
  """
  BT

  """
  Bouvet Island
  """
  BV

  """
  Botswana
  """
  BW

  """
  Belarus
  """
  BY

  """
  Belize
  """
  BZ

  """
  Canada
  """
  CA

  """
  Cocos (Keeling) Islands
  """
  CC

  """
  Congo (Democratic Republic of the)
  """
  CD

  """
  Central African Republic
  """
  CF

  """
  Congo
  """
  CG

  """
  Switzerland
  """
  CH

  """
  Côte d'Ivoire
  """
  CI

  """
  Cook Islands
  """
  CK

  """
  Chile
  """
  CL

  """
  Cameroon
  """
  CM

  """
  China
  """
  CN

  """
  Colombia
  """
  CO

  """
  Costa Rica
  """
  CR

  """
  Cuba
  """
  CU

  """
  Cabo Verde
  """
  CV

  """
  Curaçao
  """
  CW

  """
  Christmas Island
  """
  CX

  """
  Cyprus
  """
  CY

  """
  Czechia
  """
  CZ

  """
  Germany
  """
  DE

  """
  Djibouti
  """
  DJ

  """
  Denmark
  """
  DK

  """
  Dominica
  """
  DM

  """
  Dominican Republic
  """
  DO

  """
  Algeria
  """
  DZ

  """
  Ecuador
  """
  EC

  """
  Estonia
  """
  EE

  """
  Egypt
  """
  EG

  """
  Western Sahara
  """
  EH

  """
  Eritrea
  """
  ER

  """
  Spain
  """
  ES

  """
  Ethiopia
  """
  ET

  """
  Finland
  """
  FI

  """
  Fiji
  """
  FJ

  """
  Falkland Islands (Malvinas)
  """
  FK

  """
  Micronesia (Federated States of)
  """
  FM

  """
  Faroe Islands
  """
  FO

  """
  France
  """
  FR

  """
  Gabon
  """
  GA

  """
  United Kingdom of Great Britain and Northern Ireland
  """
  GB

  """
  Grenada
  """
  GD

  """
  Georgia
  """
  GE

  """
  French Guiana
  """
  GF

  """
  Guernsey
  """
  GG

  """
  Ghana
  """
  GH

  """
  Gibraltar
  """
  GI

  """
  Greenland
  """
  GL

  """
  Gambia
  """
  GM

  """
  Guinea
  """
  GN

  """
  Guadeloupe
  """
  GP

  """
  Equatorial Guinea
  """
  GQ

  """
  Greece
  """
  GR

  """
  South Georgia and the South Sandwich Islands
  """
  GS

  """
  Guatemala
  """
  GT

  """
  Guam
  """
  GU

  """
  Guinea-Bissau
  """
  GW

  """
  Guyana
  """
  GY

  """
  Hong Kong
  """
  HK

  """
  Heard Island and McDonald Islands
  """
  HM

  """
  Honduras
  """
  HN

  """
  Croatia
  """
  HR

  """
  Haiti
  """
  HT

  """
  Hungary
  """
  HU

  """
  Indonesia
  """
  ID

  """
  Ireland
  """
  IE

  """
  Israel
  """
  IL

  """
  Isle of Man
  """
  IM

  """
  India
  """
  IN

  """
  British Indian Ocean Territory
  """
  IO

  """
  Iraq
  """
  IQ

  """
  Iran (Islamic Republic of)
  """
  IR

  """
  Iceland
  """
  IS

  """
  Italy
  """
  IT

  """
  Jersey
  """
  JE

  """
  Jamaica
  """
  JM

  """
  Jordan
  """
  JO

  """
  Japan
  """
  JP

  """
  Kenya
  """
  KE

  """
  Kyrgyzstan
  """
  KG

  """
  Cambodia
  """
  KH

  """
  Kiribati
  """
  KI

  """
  Comoros
  """
  KM

  """
  Saint Kitts and Nevis
  """
  KN

  """
  Korea (Democratic People's Republic of)
  """
  KP

  """
  Korea (Republic of)
  """
  KR

  """
  Kuwait
  """
  KW

  """
  Cayman Islands
  """
  KY

  """
  Kazakhstan
  """
  KZ

  """
  Lao People's Democratic Republic
  """
  LA

  """
  Lebanon
  """
  LB

  """
  Saint Lucia
  """
  LC

  """
  Liechtenstein
  """
  LI

  """
  Sri Lanka
  """
  LK

  """
  Liberia
  """
  LR

  """
  Lesotho
  """
  LS

  """
  Lithuania
  """
  LT

  """
  Luxembourg
  """
  LU

  """
  Latvia
  """
  LV

  """
  Libya
  """
  LY

  """
  Morocco
  """
  MA

  """
  Monaco
  """
  MC

  """
  Moldova (Republic of)
  """
  MD

  """
  Montenegro
  """
  ME

  """
  Saint Martin (French part)
  """
  MF

  """
  Madagascar
  """
  MG

  """
  Marshall Islands
  """
  MH

  """
  North Macedonia
  """
  MK

  """
  Mali
  """
  ML

  """
  Myanmar
  """
  MM

  """
  Mongolia
  """
  MN

  """
  Macao
  """
  MO

  """
  Northern Mariana Islands
  """
  MP

  """
  Martinique
  """
  MQ

  """
  Mauritania
  """
  MR

  """
  Montserrat
  """
  MS

  """
  Malta
  """
  MT

  """
  Mauritius
  """
  MU

  """
  Maldives
  """
  MV

  """
  Malawi
  """
  MW

  """
  Mexico
  """
  MX

  """
  Malaysia
  """
  MY

  """
  Mozambique
  """
  MZ

  """
  Namibia
  """
  NA

  """
  New Caledonia
  """
  NC

  """
  Niger
  """
  NE

  """
  Norfolk Island
  """
  NF

  """
  Nigeria
  """
  NG

  """
  Nicaragua
  """
  NI

  """
  Netherlands
  """
  NL

  """
  Norway
  """
  NO

  """
  Nepal
  """
  NP

  """
  Nauru
  """
  NR

  """
  Niue
  """
  NU

  """
  New Zealand
  """
  NZ

  """
  Oman
  """
  OM

  """
  Panama
  """
  PA

  """
  Peru
  """
  PE

  """
  French Polynesia
  """
  PF

  """
  Papua New Guinea
  """
  PG

  """
  Philippines
  """
  PH

  """
  Pakistan
  """
  PK

  """
  Poland
  """
  PL

  """
  Saint Pierre and Miquelon
  """
  PM

  """
  Pitcairn
  """
  PN

  """
  Puerto Rico
  """
  PR

  """
  Palestine, State of
  """
  PS

  """
  Portugal
  """
  PT

  """
  Palau
  """
  PW

  """
  Paraguay
  """
  PY

  """
  Qatar
  """
  QA

  """
  Réunion
  """
  RE

  """
  Romania
  """
  RO

  """
  Serbia
  """
  RS

  """
  Russian Federation
  """
  RU

  """
  Rwanda
  """
  RW

  """
  Saudi Arabia
  """
  SA

  """
  Solomon Islands
  """
  SB

  """
  Seychelles
  """
  SC

  """
  Sudan
  """
  SD

  """
  Sweden
  """
  SE

  """
  Singapore
  """
  SG

  """
  Saint Helena, Ascension and Tristan da Cunha
  """
  SH

  """
  Slovenia
  """
  SI

  """
  Svalbard and Jan Mayen
  """
  SJ

  """
  Slovakia
  """
  SK

  """
  Sierra Leone
  """
  SL

  """
  San Marino
  """
  SM

  """
  Senegal
  """
  SN

  """
  Somalia
  """
  SO

  """
  Suriname
  """
  SR

  """
  South Sudan
  """
  SS

  """
  Sao Tome and Principe
  """
  ST

  """
  El Salvador
  """
  SV

  """
  Sint Maarten (Dutch part)
  """
  SX

  """
  Syrian Arab Republic
  """
  SY

  """
  Eswatini
  """
  SZ

  """
  Turks and Caicos Islands
  """
  TC

  """
  Chad
  """
  TD

  """
  French Southern Territories
  """
  TF

  """
  Togo
  """
  TG

  """
  Thailand
  """
  TH

  """
  Tajikistan
  """
  TJ

  """
  Tokelau
  """
  TK

  """
  Timor-Leste
  """
  TL

  """
  Turkmenistan
  """
  TM

  """
  Tunisia
  """
  TN

  """
  Tonga
  """
  TO

  """
  Turkey
  """
  TR

  """
  Trinidad and Tobago
  """
  TT

  """
  Tuvalu
  """
  TV

  """
  Taiwan, Province of China
  """
  TW

  """
  Tanzania, United Republic of
  """
  TZ

  """
  Ukraine
  """
  UA

  """
  Uganda
  """
  UG

  """
  United States Minor Outlying Islands
  """
  UM

  """
  United States of America
  """
  US

  """
  Uruguay
  """
  UY

  """
  Uzbekistan
  """
  UZ

  """
  Holy See
  """
  VA

  """
  Saint Vincent and the Grenadines
  """
  VC

  """
  Venezuela (Bolivarian Republic of)
  """
  VE

  """
  Virgin Islands (British)
  """
  VG

  """
  Virgin Islands (U.S.)
  """
  VI

  """
  Viet Nam
  """
  VN

  """
  Vanuatu
  """
  VU

  """
  Wallis and Futuna
  """
  WF

  """
  Samoa
  """
  WS

  """
  Yemen
  """
  YE

  """
  Mayotte
  """
  YT

  """
  South Africa
  """
  ZA

  """
  Zambia
  """
  ZM

  """
  Zimbabwe
  """
  ZW
}

type Coupon {
  amountCents: Int
  amountCurrency: CurrencyEnum

  """
  Check if coupon is deletable
  """
  canBeDeleted: Boolean!
  code: String
  couponType: CouponTypeEnum!
  createdAt: ISO8601DateTime!

  """
  Number of customers using this coupon
  """
  customerCount: Int!
  expiration: CouponExpiration!
  expirationDate: ISO8601Date
  frequency: CouponFrequency!
  frequencyDuration: Int
  id: ID!
  name: String!
  organization: Organization
  percentageRate: Float
  status: CouponStatusEnum!
  terminatedAt: ISO8601DateTime
  updatedAt: ISO8601DateTime!
}

type CouponCollection {
  collection: [Coupon!]!
  metadata: CollectionMetadata!
}

type CouponDetails {
  amountCents: Int
  amountCurrency: CurrencyEnum

  """
  Check if coupon is deletable
  """
  canBeDeleted: Boolean!
  code: String
  couponType: CouponTypeEnum!
  createdAt: ISO8601DateTime!

  """
  Number of customers using this coupon
  """
  customerCount: Int!
  expiration: CouponExpiration!
  expirationDate: ISO8601Date
  frequency: CouponFrequency!
  frequencyDuration: Int
  id: ID!
  name: String!
  organization: Organization
  percentageRate: Float
  status: CouponStatusEnum!
  terminatedAt: ISO8601DateTime
  updatedAt: ISO8601DateTime!
}

enum CouponExpiration {
  no_expiration
  time_limit
}

enum CouponFrequency {
  once
  recurring
}

enum CouponStatusEnum {
  active
  terminated
}

enum CouponTypeEnum {
  fixed_amount
  percentage
}

"""
Autogenerated input type of CreateAddOn
"""
input CreateAddOnInput {
  amountCents: Int!
  amountCurrency: CurrencyEnum!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  code: String!
  description: String
  name: String!
}

"""
Autogenerated input type of CreateAppliedAddOn
"""
input CreateAppliedAddOnInput {
  addOnId: ID!
  amountCents: Int
  amountCurrency: CurrencyEnum

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  customerId: ID!
}

"""
Autogenerated input type of CreateAppliedCoupon
"""
input CreateAppliedCouponInput {
  amountCents: Int
  amountCurrency: CurrencyEnum

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  couponId: ID!
  customerId: ID!
  frequency: CouponFrequency
  frequencyDuration: Int
  percentageRate: Float
}

"""
Autogenerated input type of CreateBillableMetric
"""
input CreateBillableMetricInput {
  aggregationType: AggregationTypeEnum!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  code: String!
  description: String!
  fieldName: String
  group: JSON
  name: String!
}

"""
Autogenerated input type of CreateCoupon
"""
input CreateCouponInput {
  amountCents: Int
  amountCurrency: CurrencyEnum

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  code: String
  couponType: CouponTypeEnum!
  expiration: CouponExpiration!
  expirationDate: ISO8601Date
  frequency: CouponFrequency!
  frequencyDuration: Int
  name: String!
  percentageRate: Float
}

"""
Autogenerated input type of CreateCreditNote
"""
input CreateCreditNoteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  description: String
  invoiceId: ID!
  items: [CreditNoteItemInput!]!
  reason: CreditNoteReasonEnum!
}

"""
Autogenerated input type of CreateCustomer
"""
input CreateCustomerInput {
  addressLine1: String
  addressLine2: String
  city: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  country: CountryCode
  currency: CurrencyEnum
  email: String
  externalId: String!
  invoiceGracePeriod: Int
  legalName: String
  legalNumber: String
  logoUrl: String
  name: String!
  paymentProvider: ProviderTypeEnum
  phone: String
  providerCustomer: ProviderCustomerInput
  state: String
  url: String
  vatRate: Float
  zipcode: String
}

"""
Autogenerated input type of CreateCustomerWallet
"""
input CreateCustomerWalletInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currency: CurrencyEnum!
  customerId: ID!
  expirationDate: ISO8601Date
  grantedCredits: String!
  name: String
  paidCredits: String!
  rateAmount: String!
}

"""
Autogenerated input type of CreateCustomerWalletTransaction
"""
input CreateCustomerWalletTransactionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  grantedCredits: String!
  paidCredits: String!
  walletId: ID!
}

"""
Autogenerated input type of CreateInvite
"""
input CreateInviteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
}

"""
Autogenerated input type of CreatePlan
"""
input CreatePlanInput {
  amountCents: Int!
  amountCurrency: CurrencyEnum!
  billChargesMonthly: Boolean
  charges: [ChargeInput!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  code: String!
  description: String
  interval: PlanInterval!
  name: String!
  parentId: ID
  payInAdvance: Boolean!
  trialPeriod: Float
}

"""
Autogenerated input type of CreateSubscription
"""
input CreateSubscriptionInput {
  billingTime: BillingTimeEnum!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  customerId: ID!
  name: String
  planId: ID!
  subscriptionDate: ISO8601Date
  subscriptionId: ID
}

type CreditNote {
  balanceAmountCents: BigInt!
  balanceAmountCurrency: CurrencyEnum!

  """
  Check if credit note can be voided
  """
  canBeVoided: Boolean!
  createdAt: ISO8601DateTime!
  creditAmountCents: BigInt!
  creditAmountCurrency: CurrencyEnum!
  creditStatus: CreditNoteCreditStatusEnum
  description: String
  fileUrl: String
  id: ID!
  invoice: Invoice
  items: [CreditNoteItem!]!
  number: String!
  reason: CreditNoteReasonEnum!
  refundAmountCents: BigInt!
  refundAmountCurrency: CurrencyEnum!
  refundStatus: CreditNoteRefundStatusEnum
  sequentialId: ID!
  subTotalVatExcludedAmountCents: BigInt!
  subTotalVatExcludedAmountCurrency: CurrencyEnum!
  totalAmountCents: BigInt!
  totalAmountCurrency: CurrencyEnum!
  updatedAt: ISO8601DateTime!
  vatAmountCents: BigInt!
  vatAmountCurrency: CurrencyEnum!
}

enum CreditNoteCreditStatusEnum {
  available
  consumed
  voided
}

type CreditNoteItem {
  createdAt: ISO8601DateTime!
  creditAmountCents: BigInt!
  creditAmountCurrency: CurrencyEnum!
  fee: Fee!
  id: ID!
  refundAmountCents: BigInt!
  refundAmountCurrency: CurrencyEnum!
}

input CreditNoteItemInput {
  creditAmountCents: BigInt!
  feeId: ID!
  refundAmountCents: BigInt!
}

enum CreditNoteReasonEnum {
  duplicated_charge
  fraudulent_charge
  order_cancellation
  order_change
  other
  product_unsatisfactory
}

enum CreditNoteRefundStatusEnum {
  failed
  pending
  succeeded
}

enum CurrencyEnum {
  """
  United Arab Emirates dirham
  """
  AED

  """
  Afghan afghani
  """
  AFN

  """
  Albanian lek
  """
  ALL

  """
  Armenian dram
  """
  AMD

  """
  Netherlands Antillean guilder
  """
  ANG

  """
  Angolan kwanza
  """
  AOA

  """
  Argentine peso
  """
  ARS

  """
  Australian dollar
  """
  AUD

  """
  Aruban florin
  """
  AWG

  """
  Azerbaijani manat
  """
  AZN

  """
  Bosnia and Herzegovina convertible mark
  """
  BAM

  """
  Barbados dollar
  """
  BBD

  """
  Bangladeshi taka
  """
  BDT

  """
  Bulgarian lev
  """
  BGN

  """
  Bahraini dinar
  """
  BIF

  """
  Burundian franc
  """
  BMD

  """
  Bermudian dollar
  """
  BND

  """
  Brunei dollar
  """
  BOB

  """
  Boliviano
  """
  BRL

  """
  Brazilian real
  """
  BSD

  """
  Bahamian dollar
  """
  BWP

  """
  Botswana pula
  """
  BYN

  """
  Belarusian ruble
  """
  BZD

  """
  Belize dollar
  """
  CAD

  """
  Canadian dollar
  """
  CDF

  """
  Congolese franc
  """
  CHF

  """
  Swiss franc
  """
  CLP

  """
  Chilean peso
  """
  CNY

  """
  Colombian peso
  """
  COP

  """
  Costa Rican colon
  """
  CRC

  """
  Cape Verdean escudo
  """
  CVE

  """
  Czech koruna
  """
  CZK

  """
  Djiboutian franc
  """
  DJF

  """
  Danish krone
  """
  DKK

  """
  Dominican peso
  """
  DOP

  """
  Algerian dinar
  """
  DZD

  """
  Egyptian pound
  """
  EGP

  """
  Ethiopian birr
  """
  ETB

  """
  Euro
  """
  EUR

  """
  Fiji dollar
  """
  FJD

  """
  Falkland Islands pound
  """
  FKP

  """
  Pound sterling
  """
  GBP

  """
  Georgian lari
  """
  GEL

  """
  Gibraltar pound
  """
  GIP

  """
  Gambian dalasi
  """
  GMD

  """
  Guinean franc
  """
  GNF

  """
  Guatemalan quetzal
  """
  GTQ

  """
  Guyanese dollar
  """
  GYD

  """
  Hong Kong dollar
  """
  HKD

  """
  Honduran lempira
  """
  HNL

  """
  Croatian kuna
  """
  HRK

  """
  Haitian gourde
  """
  HTG

  """
  Hungarian forint
  """
  HUF

  """
  Indonesian Rupiah
  """
  IDR

  """
  Israeli new shekel
  """
  ILS

  """
  Indian rupee
  """
  INR

  """
  Icelandic króna
  """
  ISK

  """
  Jamaican dollar
  """
  JMD

  """
  Japanese yen
  """
  JPY

  """
  Kenyan shilling
  """
  KES

  """
  Kyrgyzstani som
  """
  KGS

  """
  Cambodian riel
  """
  KHR

  """
  Comoro franc
  """
  KMF

  """
  South Korean won
  """
  KRW

  """
  Cayman Islands dollar
  """
  KYD

  """
  Kazakhstani tenge
  """
  KZT

  """
  Lao kip
  """
  LAK

  """
  Lebanese pound
  """
  LBP

  """
  Sri Lankan rupee
  """
  LKR

  """
  Liberian dollar
  """
  LRD

  """
  Lesotho loti
  """
  LSL

  """
  Moroccan dirham
  """
  MAD

  """
  Moldovan leu
  """
  MDL

  """
  Malagasy ariary
  """
  MGA

  """
  Macedonian denar
  """
  MKD

  """
  Myanmar kyat
  """
  MMK

  """
  Mongolian tögrög
  """
  MNT

  """
  Macanese pataca
  """
  MOP

  """
  Mauritanian ouguiya
  """
  MRO

  """
  Mauritian rupee
  """
  MUR

  """
  Maldivian rufiyaa
  """
  MVR

  """
  Malawian kwacha
  """
  MWK

  """
  Mexican peso
  """
  MXN

  """
  Malaysian ringgit
  """
  MYR

  """
  Mozambican metical
  """
  MZN

  """
  Namibian dollar
  """
  NAD

  """
  Nigerian naira
  """
  NGN

  """
  Nicaraguan córdoba
  """
  NIO

  """
  Norwegian Krone
  """
  NOK

  """
  Nepalese rupee
  """
  NPR

  """
  New Zealand dollar
  """
  NZD

  """
  Panamanian balboa
  """
  PAB

  """
  Peruvian sol
  """
  PEN

  """
  Papua New Guinean kina
  """
  PGK

  """
  Philippine peso
  """
  PHP

  """
  Pakistani rupee
  """
  PKR

  """
  Polish złoty
  """
  PLN

  """
  Paraguayan guaraní
  """
  PYG

  """
  Qatari riyal
  """
  QAR

  """
  Romanian leu
  """
  RON

  """
  Serbian dinar
  """
  RSD

  """
  Russian ruble
  """
  RUB

  """
  Rwandan franc
  """
  RWF

  """
  Saudi riyal
  """
  SAR

  """
  Solomon Islands dollar
  """
  SBD

  """
  Seychelles rupee
  """
  SCR

  """
  Swedish Krona
  """
  SEK

  """
  Singapore dollar
  """
  SGD

  """
  Saint Helena pound
  """
  SHP

  """
  Sierra Leonean leone
  """
  SLL

  """
  Somali shilling
  """
  SOS

  """
  Surinamese dollar
  """
  SRD

  """
  São Tomé and Príncipe dobra
  """
  STD

  """
  Swazi lilangeni
  """
  SZL

  """
  Thai baht
  """
  THB

  """
  Tajikistani somoni
  """
  TJS

  """
  Tongan paʻanga
  """
  TOP

  """
  Turkish lira
  """
  TRY

  """
  Trinidad and Tobago dollar
  """
  TTD

  """
  New Taiwan dollar
  """
  TWD

  """
  Tanzanian shilling
  """
  TZS

  """
  Ukrainian hryvnia
  """
  UAH

  """
  Ugandan shilling
  """
  UGX

  """
  American Dollar
  """
  USD

  """
  Uruguayan peso
  """
  UYU

  """
  Uzbekistan som
  """
  UZS

  """
  Vietnamese đồng
  """
  VND

  """
  Vanuatu vatu
  """
  VUV

  """
  Samoan tala
  """
  WST

  """
  CFA franc BEAC
  """
  XAF

  """
  East Caribbean dollar
  """
  XCD

  """
  CFA franc BCEAO
  """
  XOF

  """
  CFP franc (franc Pacifique)
  """
  XPF

  """
  Yemeni rial
  """
  YER

  """
  South African rand
  """
  ZAR

  """
  Zambian kwacha
  """
  ZMW
}

type CurrentVersion {
  githubUrl: String!
  number: String!
}

type Customer {
  """
  Number of active subscriptions per customer
  """
  activeSubscriptionCount: Int!
  addressLine1: String
  addressLine2: String
  applicableTimezone: TimezoneEnum!

  """
  Check if customer is deletable
  """
  canBeDeleted: Boolean!

  """
  Check if customer attributes are editable
  """
  canEditAttributes: Boolean!
  city: String
  country: CountryCode
  createdAt: ISO8601DateTime!
  currency: CurrencyEnum
  email: String
  externalId: String!

  """
  Define if a customer has an active wallet
  """
  hasActiveWallet: Boolean!
  id: ID!
  invoiceGracePeriod: Int!
  legalName: String
  legalNumber: String
  logoUrl: String
  name: String
  paymentProvider: ProviderTypeEnum
  phone: String
  providerCustomer: ProviderCustomer
  sequentialId: String!
  slug: String!
  state: String
  subscriptions: [Subscription!]
  timezone: TimezoneEnum
  updatedAt: ISO8601DateTime!
  url: String
  vatRate: Float
  zipcode: String
}

type CustomerCollection {
  collection: [Customer!]!
  metadata: CollectionMetadata!
}

type CustomerDetails {
  """
  Number of active subscriptions per customer
  """
  activeSubscriptionCount: Int!
  addressLine1: String
  addressLine2: String
  applicableTimezone: TimezoneEnum!
  appliedAddOns: [AppliedAddOn!]
  appliedCoupons: [AppliedCoupon!]

  """
  Check if customer is deletable
  """
  canBeDeleted: Boolean!

  """
  Check if customer attributes are editable
  """
  canEditAttributes: Boolean!
  city: String
  country: CountryCode
  createdAt: ISO8601DateTime!
  creditNotes: [CreditNote!]
  currency: CurrencyEnum
  email: String
  externalId: String!

  """
  Define if a customer has an active wallet
  """
  hasActiveWallet: Boolean!
  id: ID!
  invoiceGracePeriod: Int!
  invoices: [Invoice!]
  legalName: String
  legalNumber: String
  logoUrl: String
  name: String
  paymentProvider: ProviderTypeEnum
  phone: String
  providerCustomer: ProviderCustomer
  sequentialId: String!
  slug: String!
  state: String

  """
  Query subscriptions of a customer
  """
  subscriptions(
    """
    Statuses of subscriptions to retrieve
    """
    status: [StatusTypeEnum!]
  ): [Subscription!]!
  timezone: TimezoneEnum
  updatedAt: ISO8601DateTime!
  url: String
  vatRate: Float
  zipcode: String
}

type CustomerUsage {
  amountCents: BigInt!
  amountCurrency: CurrencyEnum!
  chargesUsage: [ChargeUsage!]!
  fromDate: ISO8601Date!
  issuingDate: ISO8601Date!
  toDate: ISO8601Date!
  totalAmountCents: BigInt!
  totalAmountCurrency: CurrencyEnum!
  vatAmountCents: BigInt!
  vatAmountCurrency: CurrencyEnum!
}

"""
Autogenerated input type of DestroyAddOn
"""
input DestroyAddOnInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of DestroyAddOn
"""
type DestroyAddOnPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated input type of DestroyBillableMetric
"""
input DestroyBillableMetricInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: String!
}

"""
Autogenerated return type of DestroyBillableMetric
"""
type DestroyBillableMetricPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated input type of DestroyCoupon
"""
input DestroyCouponInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of DestroyCoupon
"""
type DestroyCouponPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated input type of DestroyCustomer
"""
input DestroyCustomerInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of DestroyCustomer
"""
type DestroyCustomerPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated input type of DestroyPaymentProvider
"""
input DestroyPaymentProviderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of DestroyPaymentProvider
"""
type DestroyPaymentProviderPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated input type of DestroyPlan
"""
input DestroyPlanInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of DestroyPlan
"""
type DestroyPlanPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated input type of DownloadCreditNote
"""
input DownloadCreditNoteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated input type of DownloadInvoice
"""
input DownloadInvoiceInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

type Event {
  apiClient: String
  billableMetricName: String
  code: String!
  externalCustomerId: String!
  externalSubscriptionId: String!
  id: ID!
  ipAddress: String
  matchBillableMetric: Boolean!
  matchCustomField: Boolean!
  payload: JSON!
  receivedAt: ISO8601DateTime!
  timestamp: ISO8601DateTime
  transactionId: String
}

type EventCollection {
  collection: [Event!]!
  metadata: CollectionMetadata!
}

type Fee implements InvoiceItem {
  amountCents: BigInt!
  amountCurrency: CurrencyEnum!
  charge: Charge
  eventsCount: BigInt
  feeType: FeeTypesEnum!
  group: Group
  id: ID!
  itemCode: String!
  itemName: String!
  itemType: String!
  subscription: Subscription
  units: Float!
  vatAmountCents: BigInt!
  vatAmountCurrency: CurrencyEnum!
  vatRate: Float
}

enum FeeTypesEnum {
  add_on
  charge
  credit
  subscription
}

type GocardlessProvider {
  hasAccessToken: Boolean!
  id: ID!
  webhookSecret: String
}

type GraduatedRange {
  flatAmount: String!
  fromValue: Int!
  perUnitAmount: String!
  toValue: Int
}

input GraduatedRangeInput {
  flatAmount: String!
  fromValue: Int!
  perUnitAmount: String!
  toValue: Int
}

type Group {
  id: ID!
  key: String
  value: String!
}

type GroupProperties {
  groupId: ID!
  values: Properties!
}

input GroupPropertiesInput {
  groupId: ID!
  values: PropertiesInput!
}

type GroupUsage {
  amountCents: BigInt!
  id: ID!
  key: String
  units: Float!
  value: String!
}

"""
An ISO 8601-encoded date
"""
scalar ISO8601Date

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

type Invite {
  acceptedAt: ISO8601DateTime!
  email: String!
  id: ID!
  organization: Organization!
  recipient: Membership!
  revokedAt: ISO8601DateTime!
  status: InviteStatusTypeEnum!
  token: String!
}

type InviteCollection {
  collection: [Invite!]!
  metadata: CollectionMetadata!
}

enum InviteStatusTypeEnum {
  accepted
  pending
  revoked
}

type Invoice {
  amountCents: Int!
  amountCurrency: CurrencyEnum!
  chargeAmountCents: Int!
  createdAt: ISO8601DateTime!
  creditAmountCents: Int!
  creditAmountCurrency: CurrencyEnum!
  customer: Customer!
  fees: [Fee!]
  fileUrl: String
  id: ID!
  invoiceSubscriptions: [InvoiceSubscription!]
  invoiceType: InvoiceTypeEnum!
  issuingDate: ISO8601Date!
  number: String!
  plan: Plan
  sequentialId: ID!
  status: InvoiceStatusTypeEnum!
  subscriptions: [Subscription!]
  subtotalBeforePrepaidCredits: String!
  totalAmountCents: Int!
  totalAmountCurrency: CurrencyEnum!
  updatedAt: ISO8601DateTime!
  vatAmountCents: Int!
  vatAmountCurrency: CurrencyEnum!
  walletTransactionAmountCents: Int!
}

"""
Invoice Item
"""
interface InvoiceItem {
  amountCents: BigInt!
  amountCurrency: CurrencyEnum!
  group: Group
  id: ID!
  itemCode: String!
  itemName: String!
  itemType: String!
}

enum InvoiceStatusTypeEnum {
  failed
  pending
  succeeded
}

type InvoiceSubscription {
  chargeAmountCents: Int!
  fees: [Fee!]
  fromDate: ISO8601Date!
  invoice: Invoice!
  subscription: Subscription!
  subscriptionAmountCents: Int!
  toDate: ISO8601Date!
  totalAmountCents: Int!
}

enum InvoiceTypeEnum {
  add_on
  credit
  subscription
}

"""
Represents untyped JSON
"""
scalar JSON

type LoginUser {
  token: String!
  user: User!
}

"""
Autogenerated input type of LoginUser
"""
input LoginUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  password: String!
}

type Membership {
  createdAt: ISO8601DateTime!
  id: ID!
  organization: Organization!
  revokedAt: ISO8601DateTime!
  role: String
  status: MembershipStatus!
  updatedAt: ISO8601DateTime!
  user: User!
}

type MembershipCollection {
  collection: [Membership!]!
  metadata: CollectionMetadata!
}

enum MembershipStatus {
  active
  revoked
}

type Mutation {
  """
  Accepts a new Invite
  """
  acceptInvite(
    """
    Parameters for AcceptInvite
    """
    input: AcceptInviteInput!
  ): RegisterUser

  """
  Add or update Gocardless payment provider
  """
  addGocardlessPaymentProvider(
    """
    Parameters for AddGocardlessPaymentProvider
    """
    input: AddGocardlessPaymentProviderInput!
  ): GocardlessProvider

  """
  Add or update Stripe API keys to the organization
  """
  addStripePaymentProvider(
    """
    Parameters for AddStripePaymentProvider
    """
    input: AddStripePaymentProviderInput!
  ): StripeProvider

  """
  Creates a new add-on
  """
  createAddOn(
    """
    Parameters for CreateAddOn
    """
    input: CreateAddOnInput!
  ): AddOn

  """
  Assigns an add-on to a Customer
  """
  createAppliedAddOn(
    """
    Parameters for CreateAppliedAddOn
    """
    input: CreateAppliedAddOnInput!
  ): AppliedAddOn

  """
  Assigns a Coupon to a Customer
  """
  createAppliedCoupon(
    """
    Parameters for CreateAppliedCoupon
    """
    input: CreateAppliedCouponInput!
  ): AppliedCoupon

  """
  Creates a new Billable metric
  """
  createBillableMetric(
    """
    Parameters for CreateBillableMetric
    """
    input: CreateBillableMetricInput!
  ): BillableMetric

  """
  Creates a new Coupon
  """
  createCoupon(
    """
    Parameters for CreateCoupon
    """
    input: CreateCouponInput!
  ): Coupon

  """
  Creates a new Credit Note
  """
  createCreditNote(
    """
    Parameters for CreateCreditNote
    """
    input: CreateCreditNoteInput!
  ): CreditNote

  """
  Creates a new customer
  """
  createCustomer(
    """
    Parameters for CreateCustomer
    """
    input: CreateCustomerInput!
  ): Customer

  """
  Creates a new Customer Wallet
  """
  createCustomerWallet(
    """
    Parameters for CreateCustomerWallet
    """
    input: CreateCustomerWalletInput!
  ): Wallet

  """
  Creates a new Customer Wallet Transaction
  """
  createCustomerWalletTransaction(
    """
    Parameters for CreateCustomerWalletTransaction
    """
    input: CreateCustomerWalletTransactionInput!
  ): WalletTransactionCollection

  """
  Creates a new Invite
  """
  createInvite(
    """
    Parameters for CreateInvite
    """
    input: CreateInviteInput!
  ): Invite

  """
  Creates a new Plan
  """
  createPlan(
    """
    Parameters for CreatePlan
    """
    input: CreatePlanInput!
  ): Plan

  """
  Create a new Subscription
  """
  createSubscription(
    """
    Parameters for CreateSubscription
    """
    input: CreateSubscriptionInput!
  ): Subscription

  """
  Deletes an add-on
  """
  destroyAddOn(
    """
    Parameters for DestroyAddOn
    """
    input: DestroyAddOnInput!
  ): DestroyAddOnPayload

  """
  Deletes a Billable metric
  """
  destroyBillableMetric(
    """
    Parameters for DestroyBillableMetric
    """
    input: DestroyBillableMetricInput!
  ): DestroyBillableMetricPayload

  """
  Deletes a coupon
  """
  destroyCoupon(
    """
    Parameters for DestroyCoupon
    """
    input: DestroyCouponInput!
  ): DestroyCouponPayload

  """
  Delete a Customer
  """
  destroyCustomer(
    """
    Parameters for DestroyCustomer
    """
    input: DestroyCustomerInput!
  ): DestroyCustomerPayload

  """
  Destroy a payment provider
  """
  destroyPaymentProvider(
    """
    Parameters for DestroyPaymentProvider
    """
    input: DestroyPaymentProviderInput!
  ): DestroyPaymentProviderPayload

  """
  Deletes a Plan
  """
  destroyPlan(
    """
    Parameters for DestroyPlan
    """
    input: DestroyPlanInput!
  ): DestroyPlanPayload

  """
  Download a Credit Note PDF
  """
  downloadCreditNote(
    """
    Parameters for DownloadCreditNote
    """
    input: DownloadCreditNoteInput!
  ): CreditNote

  """
  Download an Invoice PDF
  """
  downloadInvoice(
    """
    Parameters for DownloadInvoice
    """
    input: DownloadInvoiceInput!
  ): Invoice

  """
  Opens a session for an existing user
  """
  loginUser(
    """
    Parameters for LoginUser
    """
    input: LoginUserInput!
  ): LoginUser

  """
  Registers a new user and creates related organization
  """
  registerUser(
    """
    Parameters for RegisterUser
    """
    input: RegisterUserInput!
  ): RegisterUser

  """
  Revokes a invite
  """
  revokeInvite(
    """
    Parameters for RevokeInvite
    """
    input: RevokeInviteInput!
  ): Invite

  """
  Revoke a membership
  """
  revokeMembership(
    """
    Parameters for RevokeMembership
    """
    input: RevokeMembershipInput!
  ): Membership

  """
  Unassign a coupon from a customer
  """
  terminateAppliedCoupon(
    """
    Parameters for TerminateAppliedCoupon
    """
    input: TerminateAppliedCouponInput!
  ): AppliedCoupon

  """
  Deletes a coupon
  """
  terminateCoupon(
    """
    Parameters for TerminateCoupon
    """
    input: TerminateCouponInput!
  ): Coupon

  """
  Terminates a new Customer Wallet
  """
  terminateCustomerWallet(
    """
    Parameters for TerminateCustomerWallet
    """
    input: TerminateCustomerWalletInput!
  ): Wallet

  """
  Terminate a Subscription
  """
  terminateSubscription(
    """
    Parameters for TerminateSubscription
    """
    input: TerminateSubscriptionInput!
  ): Subscription

  """
  Update an existing add-on
  """
  updateAddOn(
    """
    Parameters for UpdateAddOn
    """
    input: UpdateAddOnInput!
  ): AddOn

  """
  Updates an existing Billable metric
  """
  updateBillableMetric(
    """
    Parameters for UpdateBillableMetric
    """
    input: UpdateBillableMetricInput!
  ): BillableMetric

  """
  Update an existing coupon
  """
  updateCoupon(
    """
    Parameters for UpdateCoupon
    """
    input: UpdateCouponInput!
  ): Coupon

  """
  Updates an existing Credit Note
  """
  updateCreditNote(
    """
    Parameters for UpdateCreditNote
    """
    input: UpdateCreditNoteInput!
  ): CreditNote

  """
  Updates an existing Customer
  """
  updateCustomer(
    """
    Parameters for UpdateCustomer
    """
    input: UpdateCustomerInput!
  ): Customer

  """
  Assign the vat rate to Customers
  """
  updateCustomerVatRate(
    """
    Parameters for UpdateCustomerVatRate
    """
    input: UpdateCustomerVatRateInput!
  ): CustomerDetails

  """
  Updates a new Customer Wallet
  """
  updateCustomerWallet(
    """
    Parameters for UpdateCustomerWallet
    """
    input: UpdateCustomerWalletInput!
  ): Wallet

  """
  Updates an Organization
  """
  updateOrganization(
    """
    Parameters for UpdateOrganization
    """
    input: UpdateOrganizationInput!
  ): Organization

  """
  Updates an existing Plan
  """
  updatePlan(
    """
    Parameters for UpdatePlan
    """
    input: UpdatePlanInput!
  ): Plan

  """
  Update a Subscription
  """
  updateSubscription(
    """
    Parameters for UpdateSubscription
    """
    input: UpdateSubscriptionInput!
  ): Subscription

  """
  Voids a Credit Note
  """
  voidCreditNote(
    """
    Parameters for VoidCreditNote
    """
    input: VoidCreditNoteInput!
  ): CreditNote
}

type Organization {
  addressLine1: String
  addressLine2: String
  apiKey: String!
  city: String
  country: CountryCode
  createdAt: ISO8601DateTime!
  email: String
  gocardlessPaymentProvider: GocardlessProvider
  id: ID!
  invoiceFooter: String
  invoiceGracePeriod: Int!
  legalName: String
  legalNumber: String
  logoUrl: String
  name: String!
  state: String
  stripePaymentProvider: StripeProvider
  timezone: TimezoneEnum
  updatedAt: ISO8601DateTime!
  vatRate: Float!
  webhookUrl: String
  zipcode: String
}

type Plan {
  amountCents: Int!
  amountCurrency: CurrencyEnum!
  billChargesMonthly: Boolean

  """
  Check if plan is deletable
  """
  canBeDeleted: Boolean!

  """
  Number of charges attached to a plan
  """
  chargeCount: Int!
  charges: [Charge!]
  code: String!
  createdAt: ISO8601DateTime!

  """
  Number of customers attached to a plan
  """
  customerCount: Int!
  description: String
  id: ID!
  interval: PlanInterval!
  name: String!
  organization: Organization
  parentId: ID
  payInAdvance: Boolean!
  trialPeriod: Float
  updatedAt: ISO8601DateTime!
}

type PlanCollection {
  collection: [Plan!]!
  metadata: CollectionMetadata!
}

type PlanDetails {
  amountCents: Int!
  amountCurrency: CurrencyEnum!
  billChargesMonthly: Boolean

  """
  Check if plan is deletable
  """
  canBeDeleted: Boolean!

  """
  Number of charges attached to a plan
  """
  chargeCount: Int!
  charges: [Charge!]
  code: String!
  createdAt: ISO8601DateTime!

  """
  Number of customers attached to a plan
  """
  customerCount: Int!
  description: String
  id: ID!
  interval: PlanInterval!
  name: String!
  organization: Organization
  parentId: ID
  payInAdvance: Boolean!
  trialPeriod: Float
  updatedAt: ISO8601DateTime!
}

enum PlanInterval {
  monthly
  weekly
  yearly
}

type Properties {
  amount: String
  fixedAmount: String
  freeUnits: Int
  freeUnitsPerEvents: Int
  freeUnitsPerTotalAggregation: String
  graduatedRanges: [GraduatedRange!]
  packageSize: Int
  rate: String
  volumeRanges: [VolumeRange!]
}

input PropertiesInput {
  amount: String
  fixedAmount: String
  freeUnits: Int
  freeUnitsPerEvents: Int
  freeUnitsPerTotalAggregation: String
  graduatedRanges: [GraduatedRangeInput!]
  packageSize: Int
  rate: String
  volumeRanges: [VolumeRangeInput!]
}

type ProviderCustomer {
  id: ID!
  providerCustomerId: ID
  syncWithProvider: Boolean
}

input ProviderCustomerInput {
  providerCustomerId: ID
  syncWithProvider: Boolean
}

enum ProviderTypeEnum {
  gocardless
  stripe
}

type Query {
  """
  Query a single add-on of an organization
  """
  addOn(
    """
    Uniq ID of the add-on
    """
    id: ID!
  ): AddOnDetails

  """
  Query add-ons of an organization
  """
  addOns(
    """
    List of add-ons IDs to fetch
    """
    ids: [ID!]
    limit: Int
    page: Int
  ): AddOnCollection!

  """
  Query a single billable metric of an organization
  """
  billableMetric(
    """
    Uniq ID of the billable metric
    """
    id: ID!
  ): BillableMetricDetail

  """
  Query billable metrics of an organization
  """
  billableMetrics(
    """
    List of plan ID to fetch
    """
    ids: [String!]
    limit: Int
    page: Int
  ): BillableMetricCollection!

  """
  Query a single coupon of an organization
  """
  coupon(
    """
    Uniq ID of the coupon
    """
    id: ID!
  ): CouponDetails

  """
  Query coupons of an organization
  """
  coupons(
    """
    List of coupon IDs to fetch
    """
    ids: [ID!]
    limit: Int
    page: Int
    status: CouponStatusEnum
  ): CouponCollection!

  """
  Query a single credit note
  """
  creditNote(
    """
    Uniq ID of the credit note
    """
    id: ID!
  ): CreditNote

  """
  Retrieves currently connected user
  """
  currentUser: User!

  """
  Retrieve the version of the application
  """
  currentVersion: CurrentVersion!

  """
  Query a single customer of an organization
  """
  customer(
    """
    Uniq ID of the customer
    """
    id: ID!
  ): CustomerDetails

  """
  Query the usage of the customer on the current billing period
  """
  customerUsage(customerId: ID, subscriptionId: ID!): CustomerUsage!

  """
  Query customers of an organization
  """
  customers(
    """
    List of customer Lago ID to fetch
    """
    ids: [String!]
    limit: Int
    page: Int
  ): CustomerCollection!

  """
  Query events of an organization
  """
  events(limit: Int, page: Int): EventCollection

  """
  Query a single Invite
  """
  invite(
    """
    Uniq token of the Invite
    """
    token: String!
  ): Invite

  """
  Query pending invites of an organization
  """
  invites(limit: Int, page: Int): InviteCollection!

  """
  Query a single Invoice of an organization
  """
  invoice(
    """
    Uniq ID of the invoice
    """
    id: ID!
  ): Invoice

  """
  Query memberships of an organization
  """
  memberships(limit: Int, page: Int): MembershipCollection!

  """
  Query a single plan of an organization
  """
  plan(
    """
    Uniq ID of the plan
    """
    id: ID!
  ): PlanDetails

  """
  Query plans of an organization
  """
  plans(
    """
    List of plan ID to fetch
    """
    ids: [String!]
    limit: Int
    page: Int
  ): PlanCollection!

  """
  Query a single wallet
  """
  wallet(
    """
    Uniq ID of the wallet
    """
    id: ID!
  ): WalletDetails

  """
  Query a single wallet transaction
  """
  walletTransaction(
    """
    Uniq ID of the wallet transaction
    """
    id: ID!
  ): WalletTransactionDetails

  """
  Query wallet transactions
  """
  walletTransactions(
    """
    List of wallet transaction IDs to fetch
    """
    ids: [ID!]
    limit: Int
    page: Int
    status: WalletTransactionStatusEnum
    transactionType: WalletTransactionTransactionTypeEnum

    """
    Uniq ID of the wallet
    """
    walletId: ID!
  ): WalletTransactionCollection!

  """
  Query wallets
  """
  wallets(
    """
    Uniq ID of the customer
    """
    customerId: ID!

    """
    List of wallet IDs to fetch
    """
    ids: [ID!]
    limit: Int
    page: Int
    status: WalletStatusEnum
  ): WalletCollection!
}

type RegisterUser {
  membership: Membership!
  organization: Organization!
  token: String!
  user: User!
}

"""
Autogenerated input type of RegisterUser
"""
input RegisterUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  organizationName: String!
  password: String!
}

"""
Autogenerated input type of RevokeInvite
"""
input RevokeInviteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated input type of RevokeMembership
"""
input RevokeMembershipInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

enum StatusTypeEnum {
  active
  canceled
  pending
  terminated
}

type StripeProvider {
  createCustomers: Boolean!
  id: ID!
  secretKey: String!
}

type Subscription {
  billingTime: BillingTimeEnum
  canceledAt: ISO8601DateTime
  createdAt: ISO8601DateTime!
  customer: Customer!
  externalId: String!
  fees: [Fee!]
  id: ID!
  name: String
  nextName: String
  nextPendingStartDate: ISO8601Date
  nextPlan: Plan
  periodEndDate: ISO8601Date
  plan: Plan!
  startedAt: ISO8601DateTime
  status: StatusTypeEnum
  subscriptionDate: ISO8601Date
  terminatedAt: ISO8601DateTime
  updatedAt: ISO8601DateTime!
}

"""
Autogenerated input type of TerminateAppliedCoupon
"""
input TerminateAppliedCouponInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated input type of TerminateCoupon
"""
input TerminateCouponInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated input type of TerminateCustomerWallet
"""
input TerminateCustomerWalletInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated input type of TerminateSubscription
"""
input TerminateSubscriptionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

enum TimezoneEnum {
  """
  Africa/Algiers (+01:00)
  """
  TZ_AFRICA_ALGIERS

  """
  Africa/Cairo (+02:00)
  """
  TZ_AFRICA_CAIRO

  """
  Africa/Casablanca (+01:00)
  """
  TZ_AFRICA_CASABLANCA

  """
  Africa/Harare (+02:00)
  """
  TZ_AFRICA_HARARE

  """
  Africa/Johannesburg (+02:00)
  """
  TZ_AFRICA_JOHANNESBURG

  """
  Africa/Monrovia (+00:00)
  """
  TZ_AFRICA_MONROVIA

  """
  Africa/Nairobi (+03:00)
  """
  TZ_AFRICA_NAIROBI

  """
  America/Argentina/Buenos_Aires (-03:00)
  """
  TZ_AMERICA_ARGENTINA_BUENOS_AIRES

  """
  America/Bogota (-05:00)
  """
  TZ_AMERICA_BOGOTA

  """
  America/Caracas (-04:00)
  """
  TZ_AMERICA_CARACAS

  """
  America/Chicago (-06:00)
  """
  TZ_AMERICA_CHICAGO

  """
  America/Chihuahua (-07:00)
  """
  TZ_AMERICA_CHIHUAHUA

  """
  America/Denver (-07:00)
  """
  TZ_AMERICA_DENVER

  """
  America/Godthab (-03:00)
  """
  TZ_AMERICA_GODTHAB

  """
  America/Guatemala (-06:00)
  """
  TZ_AMERICA_GUATEMALA

  """
  America/Guyana (-04:00)
  """
  TZ_AMERICA_GUYANA

  """
  America/Halifax (-04:00)
  """
  TZ_AMERICA_HALIFAX

  """
  America/Indiana/Indianapolis (-05:00)
  """
  TZ_AMERICA_INDIANA_INDIANAPOLIS

  """
  America/Juneau (-09:00)
  """
  TZ_AMERICA_JUNEAU

  """
  America/La_Paz (-04:00)
  """
  TZ_AMERICA_LA_PAZ

  """
  America/Lima (-05:00)
  """
  TZ_AMERICA_LIMA

  """
  America/Los_Angeles (-08:00)
  """
  TZ_AMERICA_LOS_ANGELES

  """
  America/Mazatlan (-07:00)
  """
  TZ_AMERICA_MAZATLAN

  """
  America/Mexico_City (-06:00)
  """
  TZ_AMERICA_MEXICO_CITY

  """
  America/Monterrey (-06:00)
  """
  TZ_AMERICA_MONTERREY

  """
  America/Montevideo (-03:00)
  """
  TZ_AMERICA_MONTEVIDEO

  """
  America/New_York (-05:00)
  """
  TZ_AMERICA_NEW_YORK

  """
  America/Phoenix (-07:00)
  """
  TZ_AMERICA_PHOENIX

  """
  America/Puerto_Rico (-04:00)
  """
  TZ_AMERICA_PUERTO_RICO

  """
  America/Regina (-06:00)
  """
  TZ_AMERICA_REGINA

  """
  America/Santiago (-04:00)
  """
  TZ_AMERICA_SANTIAGO

  """
  America/Sao_Paulo (-03:00)
  """
  TZ_AMERICA_SAO_PAULO

  """
  America/St_Johns (-03:30)
  """
  TZ_AMERICA_ST_JOHNS

  """
  America/Tijuana (-08:00)
  """
  TZ_AMERICA_TIJUANA

  """
  Asia/Almaty (+06:00)
  """
  TZ_ASIA_ALMATY

  """
  Asia/Baghdad (+03:00)
  """
  TZ_ASIA_BAGHDAD

  """
  Asia/Baku (+04:00)
  """
  TZ_ASIA_BAKU

  """
  Asia/Bangkok (+07:00)
  """
  TZ_ASIA_BANGKOK

  """
  Asia/Chongqing (+08:00)
  """
  TZ_ASIA_CHONGQING

  """
  Asia/Colombo (+05:30)
  """
  TZ_ASIA_COLOMBO

  """
  Asia/Dhaka (+06:00)
  """
  TZ_ASIA_DHAKA

  """
  Asia/Hong_Kong (+08:00)
  """
  TZ_ASIA_HONG_KONG

  """
  Asia/Irkutsk (+08:00)
  """
  TZ_ASIA_IRKUTSK

  """
  Asia/Jakarta (+07:00)
  """
  TZ_ASIA_JAKARTA

  """
  Asia/Jerusalem (+02:00)
  """
  TZ_ASIA_JERUSALEM

  """
  Asia/Kabul (+04:30)
  """
  TZ_ASIA_KABUL

  """
  Asia/Kamchatka (+12:00)
  """
  TZ_ASIA_KAMCHATKA

  """
  Asia/Karachi (+05:00)
  """
  TZ_ASIA_KARACHI

  """
  Asia/Kathmandu (+05:45)
  """
  TZ_ASIA_KATHMANDU

  """
  Asia/Kolkata (+05:30)
  """
  TZ_ASIA_KOLKATA

  """
  Asia/Krasnoyarsk (+07:00)
  """
  TZ_ASIA_KRASNOYARSK

  """
  Asia/Kuala_Lumpur (+08:00)
  """
  TZ_ASIA_KUALA_LUMPUR

  """
  Asia/Kuwait (+03:00)
  """
  TZ_ASIA_KUWAIT

  """
  Asia/Magadan (+11:00)
  """
  TZ_ASIA_MAGADAN

  """
  Asia/Muscat (+04:00)
  """
  TZ_ASIA_MUSCAT

  """
  Asia/Novosibirsk (+07:00)
  """
  TZ_ASIA_NOVOSIBIRSK

  """
  Asia/Rangoon (+06:30)
  """
  TZ_ASIA_RANGOON

  """
  Asia/Riyadh (+03:00)
  """
  TZ_ASIA_RIYADH

  """
  Asia/Seoul (+09:00)
  """
  TZ_ASIA_SEOUL

  """
  Asia/Shanghai (+08:00)
  """
  TZ_ASIA_SHANGHAI

  """
  Asia/Singapore (+08:00)
  """
  TZ_ASIA_SINGAPORE

  """
  Asia/Srednekolymsk (+11:00)
  """
  TZ_ASIA_SREDNEKOLYMSK

  """
  Asia/Taipei (+08:00)
  """
  TZ_ASIA_TAIPEI

  """
  Asia/Tashkent (+05:00)
  """
  TZ_ASIA_TASHKENT

  """
  Asia/Tbilisi (+04:00)
  """
  TZ_ASIA_TBILISI

  """
  Asia/Tehran (+03:30)
  """
  TZ_ASIA_TEHRAN

  """
  Asia/Tokyo (+09:00)
  """
  TZ_ASIA_TOKYO

  """
  Asia/Ulaanbaatar (+08:00)
  """
  TZ_ASIA_ULAANBAATAR

  """
  Asia/Urumqi (+06:00)
  """
  TZ_ASIA_URUMQI

  """
  Asia/Vladivostok (+10:00)
  """
  TZ_ASIA_VLADIVOSTOK

  """
  Asia/Yakutsk (+09:00)
  """
  TZ_ASIA_YAKUTSK

  """
  Asia/Yekaterinburg (+05:00)
  """
  TZ_ASIA_YEKATERINBURG

  """
  Asia/Yerevan (+04:00)
  """
  TZ_ASIA_YEREVAN

  """
  Atlantic/Azores (-01:00)
  """
  TZ_ATLANTIC_AZORES

  """
  Atlantic/Cape_Verde (-01:00)
  """
  TZ_ATLANTIC_CAPE_VERDE

  """
  Atlantic/South_Georgia (-02:00)
  """
  TZ_ATLANTIC_SOUTH_GEORGIA

  """
  Australia/Adelaide (+09:30)
  """
  TZ_AUSTRALIA_ADELAIDE

  """
  Australia/Brisbane (+10:00)
  """
  TZ_AUSTRALIA_BRISBANE

  """
  Australia/Darwin (+09:30)
  """
  TZ_AUSTRALIA_DARWIN

  """
  Australia/Hobart (+10:00)
  """
  TZ_AUSTRALIA_HOBART

  """
  Australia/Melbourne (+10:00)
  """
  TZ_AUSTRALIA_MELBOURNE

  """
  Australia/Perth (+08:00)
  """
  TZ_AUSTRALIA_PERTH

  """
  Australia/Sydney (+10:00)
  """
  TZ_AUSTRALIA_SYDNEY

  """
  Europe/Amsterdam (+01:00)
  """
  TZ_EUROPE_AMSTERDAM

  """
  Europe/Athens (+02:00)
  """
  TZ_EUROPE_ATHENS

  """
  Europe/Belgrade (+01:00)
  """
  TZ_EUROPE_BELGRADE

  """
  Europe/Berlin (+01:00)
  """
  TZ_EUROPE_BERLIN

  """
  Europe/Bratislava (+01:00)
  """
  TZ_EUROPE_BRATISLAVA

  """
  Europe/Brussels (+01:00)
  """
  TZ_EUROPE_BRUSSELS

  """
  Europe/Bucharest (+02:00)
  """
  TZ_EUROPE_BUCHAREST

  """
  Europe/Budapest (+01:00)
  """
  TZ_EUROPE_BUDAPEST

  """
  Europe/Copenhagen (+01:00)
  """
  TZ_EUROPE_COPENHAGEN

  """
  Europe/Dublin (+01:00)
  """
  TZ_EUROPE_DUBLIN

  """
  Europe/Helsinki (+02:00)
  """
  TZ_EUROPE_HELSINKI

  """
  Europe/Istanbul (+03:00)
  """
  TZ_EUROPE_ISTANBUL

  """
  Europe/Kaliningrad (+02:00)
  """
  TZ_EUROPE_KALININGRAD

  """
  Europe/Kiev (+02:00)
  """
  TZ_EUROPE_KIEV

  """
  Europe/Lisbon (+00:00)
  """
  TZ_EUROPE_LISBON

  """
  Europe/Ljubljana (+01:00)
  """
  TZ_EUROPE_LJUBLJANA

  """
  Europe/London (+00:00)
  """
  TZ_EUROPE_LONDON

  """
  Europe/Madrid (+01:00)
  """
  TZ_EUROPE_MADRID

  """
  Europe/Minsk (+03:00)
  """
  TZ_EUROPE_MINSK

  """
  Europe/Moscow (+03:00)
  """
  TZ_EUROPE_MOSCOW

  """
  Europe/Paris (+01:00)
  """
  TZ_EUROPE_PARIS

  """
  Europe/Prague (+01:00)
  """
  TZ_EUROPE_PRAGUE

  """
  Europe/Riga (+02:00)
  """
  TZ_EUROPE_RIGA

  """
  Europe/Rome (+01:00)
  """
  TZ_EUROPE_ROME

  """
  Europe/Samara (+04:00)
  """
  TZ_EUROPE_SAMARA

  """
  Europe/Sarajevo (+01:00)
  """
  TZ_EUROPE_SARAJEVO

  """
  Europe/Skopje (+01:00)
  """
  TZ_EUROPE_SKOPJE

  """
  Europe/Sofia (+02:00)
  """
  TZ_EUROPE_SOFIA

  """
  Europe/Stockholm (+01:00)
  """
  TZ_EUROPE_STOCKHOLM

  """
  Europe/Tallinn (+02:00)
  """
  TZ_EUROPE_TALLINN

  """
  Europe/Vienna (+01:00)
  """
  TZ_EUROPE_VIENNA

  """
  Europe/Vilnius (+02:00)
  """
  TZ_EUROPE_VILNIUS

  """
  Europe/Volgograd (+03:00)
  """
  TZ_EUROPE_VOLGOGRAD

  """
  Europe/Warsaw (+01:00)
  """
  TZ_EUROPE_WARSAW

  """
  Europe/Zagreb (+01:00)
  """
  TZ_EUROPE_ZAGREB

  """
  Europe/Zurich (+01:00)
  """
  TZ_EUROPE_ZURICH

  """
  GMT+12 (-12:00)
  """
  TZ_GMT_12

  """
  Pacific/Apia (+13:00)
  """
  TZ_PACIFIC_APIA

  """
  Pacific/Auckland (+12:00)
  """
  TZ_PACIFIC_AUCKLAND

  """
  Pacific/Chatham (+12:45)
  """
  TZ_PACIFIC_CHATHAM

  """
  Pacific/Fakaofo (+13:00)
  """
  TZ_PACIFIC_FAKAOFO

  """
  Pacific/Fiji (+12:00)
  """
  TZ_PACIFIC_FIJI

  """
  Pacific/Guadalcanal (+11:00)
  """
  TZ_PACIFIC_GUADALCANAL

  """
  Pacific/Guam (+10:00)
  """
  TZ_PACIFIC_GUAM

  """
  Pacific/Honolulu (-10:00)
  """
  TZ_PACIFIC_HONOLULU

  """
  Pacific/Majuro (+12:00)
  """
  TZ_PACIFIC_MAJURO

  """
  Pacific/Midway (-11:00)
  """
  TZ_PACIFIC_MIDWAY

  """
  Pacific/Noumea (+11:00)
  """
  TZ_PACIFIC_NOUMEA

  """
  Pacific/Pago_Pago (-11:00)
  """
  TZ_PACIFIC_PAGO_PAGO

  """
  Pacific/Port_Moresby (+10:00)
  """
  TZ_PACIFIC_PORT_MORESBY

  """
  Pacific/Tongatapu (+13:00)
  """
  TZ_PACIFIC_TONGATAPU

  """
  UTC (+00:00)
  """
  TZ_UTC
}

"""
Autogenerated input type of UpdateAddOn
"""
input UpdateAddOnInput {
  amountCents: Int!
  amountCurrency: CurrencyEnum!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  code: String!
  description: String
  id: ID!
  name: String!
}

"""
Autogenerated input type of UpdateBillableMetric
"""
input UpdateBillableMetricInput {
  aggregationType: AggregationTypeEnum!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  code: String!
  description: String!
  fieldName: String
  group: JSON
  id: String!
  name: String!
}

"""
Autogenerated input type of UpdateCoupon
"""
input UpdateCouponInput {
  amountCents: Int
  amountCurrency: CurrencyEnum

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  code: String
  couponType: CouponTypeEnum!
  expiration: CouponExpiration!
  expirationDate: ISO8601Date
  frequency: CouponFrequency!
  frequencyDuration: Int
  id: String!
  name: String!
  percentageRate: Float
}

"""
Autogenerated input type of UpdateCreditNote
"""
input UpdateCreditNoteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
  refundStatus: CreditNoteRefundStatusEnum!
}

"""
Autogenerated input type of UpdateCustomer
"""
input UpdateCustomerInput {
  addressLine1: String
  addressLine2: String
  city: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  country: CountryCode
  currency: CurrencyEnum
  email: String
  externalId: String!
  id: ID!
  invoiceGracePeriod: Int
  legalName: String
  legalNumber: String
  logoUrl: String
  name: String!
  paymentProvider: ProviderTypeEnum
  phone: String
  providerCustomer: ProviderCustomerInput
  state: String
  url: String
  vatRate: Float
  zipcode: String
}

"""
Autogenerated input type of UpdateCustomerVatRate
"""
input UpdateCustomerVatRateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
  vatRate: Float
}

"""
Autogenerated input type of UpdateCustomerWallet
"""
input UpdateCustomerWalletInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  expirationDate: ISO8601Date
  id: ID!
  name: String
}

"""
Autogenerated input type of UpdateOrganization
"""
input UpdateOrganizationInput {
  addressLine1: String
  addressLine2: String
  city: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  country: CountryCode
  email: String
  invoiceFooter: String
  invoiceGracePeriod: Int
  legalName: String
  legalNumber: String
  logo: String
  state: String
  vatRate: Float
  webhookUrl: String
  zipcode: String
}

"""
Autogenerated input type of UpdatePlan
"""
input UpdatePlanInput {
  amountCents: Int!
  amountCurrency: CurrencyEnum!
  billChargesMonthly: Boolean
  charges: [ChargeInput!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  code: String!
  description: String
  id: String!
  interval: PlanInterval!
  name: String!
  payInAdvance: Boolean!
  trialPeriod: Float
}

"""
Autogenerated input type of UpdateSubscription
"""
input UpdateSubscriptionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
  name: String
  subscriptionDate: ISO8601Date
}

type User {
  createdAt: ISO8601DateTime!
  email: String
  id: ID!
  organizations: [Organization!]
  updatedAt: ISO8601DateTime!
}

"""
Autogenerated input type of VoidCreditNote
"""
input VoidCreditNoteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

type VolumeRange {
  flatAmount: String!
  fromValue: Int!
  perUnitAmount: String!
  toValue: Int
}

input VolumeRangeInput {
  flatAmount: String!
  fromValue: Int!
  perUnitAmount: String!
  toValue: Int
}

type Wallet {
  balance: String!
  consumedAmount: String!
  consumedCredits: String!
  createdAt: ISO8601DateTime!
  creditsBalance: String!
  currency: CurrencyEnum!
  customer: Customer
  expirationDate: ISO8601Date
  id: ID!
  lastBalanceSyncAt: ISO8601DateTime
  lastConsumedCreditAt: ISO8601DateTime
  name: String
  rateAmount: String!
  status: WalletStatusEnum!
  terminatedAt: ISO8601DateTime
  updatedAt: ISO8601DateTime!
}

type WalletCollection {
  collection: [Wallet!]!
  metadata: CollectionMetadata!
}

type WalletDetails {
  balance: String!
  consumedAmount: String!
  consumedCredits: String!
  createdAt: ISO8601DateTime!
  creditsBalance: String!
  currency: CurrencyEnum!
  customer: Customer
  expirationDate: ISO8601Date
  id: ID!
  lastBalanceSyncAt: ISO8601DateTime
  lastConsumedCreditAt: ISO8601DateTime
  name: String
  rateAmount: String!
  status: WalletStatusEnum!
  terminatedAt: ISO8601DateTime
  updatedAt: ISO8601DateTime!
}

enum WalletStatusEnum {
  active
  terminated
}

type WalletTransaction {
  amount: String!
  createdAt: ISO8601DateTime!
  creditAmount: String!
  id: ID!
  settledAt: ISO8601DateTime
  status: WalletTransactionStatusEnum!
  transactionType: WalletTransactionTransactionTypeEnum!
  updatedAt: ISO8601DateTime!
  wallet: Wallet
}

type WalletTransactionCollection {
  collection: [WalletTransaction!]!
  metadata: CollectionMetadata!
}

type WalletTransactionDetails {
  amount: String!
  createdAt: ISO8601DateTime!
  creditAmount: String!
  id: ID!
  settledAt: ISO8601DateTime
  status: WalletTransactionStatusEnum!
  transactionType: WalletTransactionTransactionTypeEnum!
  updatedAt: ISO8601DateTime!
  wallet: Wallet
}

enum WalletTransactionStatusEnum {
  pending
  settled
}

enum WalletTransactionTransactionTypeEnum {
  inbound
  outbound
}
