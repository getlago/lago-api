# frozen_string_literal: true

# == John Doe

# NOTE: If hooli is not found, run 01_base.rb first
organization = Organization.find_by!(name: "Hooli")
billing_entity = organization.default_billing_entity
plan = Plan.find_by!(code: "premium_plan")

customer_external_id = "cust_john-doe"
sub_external_id = "sub_john-doe-main"
started_at = 6.months.ago
currency = "EUR"
addon = AddOn.find_by!(code: "setup_fee")

john_doe = Customer.create_with(
  name: "John Doe",
  country: "FR",
  address_line1: Faker::Address.street_address,
  address_line2: Faker::Address.secondary_address,
  zipcode: Faker::Address.zip_code,
  email: "john.doe@example.com",
  city: Faker::Address.city,
  url: Faker::Internet.url,
  phone: Faker::PhoneNumber.phone_number,
  logo_url: Faker::Internet.url,
  legal_number: Faker::Company.duns_number,
  currency:,
  created_at: started_at
).find_or_create_by!(
  organization:,
  billing_entity:,
  external_id: customer_external_id
)

sub = john_doe.subscriptions.active.find_by(external_id: sub_external_id)
unless sub
  sub = Subscriptions::CreateService.call!(
    customer: john_doe,
    plan:,
    params: {
      name: "Main Subscription",
      billing_time: :calendar,
      subscription_at: started_at,
      started_at: started_at,
      external_id: sub_external_id
    }
  ).subscription
  sub.update(created_at: started_at)
end

unless john_doe.wallets.active.exists?
  Wallets::CreateService.call!(params: {
    customer: john_doe,
    name: "Main wallet",
    rate_amount: "3",
    paid_top_up_min_amount_cents: 12_00,
    recurring_transaction_rules: [
      {
        granted_credits: "10",
        interval: :weekly,
        method: :fixed,
        expiration_at: 1.year.from_now,
        trigger: :interval,
        transaction_metadata: [{key: :origin, value: :seeder}],
        transaction_name: "10 credits for free üéÅ"
      }
    ]
  })

  john_doe.wallets.create!(
    organization:,
    customer: john_doe,
    name: "Terminated wallet",
    rate_amount: "1",
    status: :terminated,
    terminated_at: 1.week.ago,
    currency:
  )
end

# == one-off invoice with credit note

one_off = Invoices::CreateOneOffService.call!(
  customer: john_doe,
  currency:,
  fees: [{
    add_on_id: addon.id,
    name: addon.name,
    units: 2,
    unit_amount_cents: addon.amount_cents,
    tax_codes: ["lago_eu_fr_standard"]
  }],
  timestamp: started_at + 5.days,
  skip_psp: true
).invoice

CreditNotes::CreateService.call!(
  invoice: one_off,
  credit_amount_cents: 48_00,
  description: "Generated by seeders",
  items: [
    fee_id: one_off.fees.sole.id, amount_cents: 40_00
  ]
)
