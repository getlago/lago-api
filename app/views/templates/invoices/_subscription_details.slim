- if subscription?
  - subscriptions.each do |subscription|
    - if subscriptions.count > 1
      - if subscription.name.present?
        h2.title-2.mb-24 class="#{'invoice-details-title' if subscriptions.count > 1}" = I18n.t('invoice.details', resource: subscription.name)
      - else
        h2.title-2.mb-24 class="#{'invoice-details-title' if subscriptions.count > 1}" = I18n.t('invoice.details', resource: subscription.plan.name)

    .invoice-resume.overflow-auto class="#{'mb-24' if subscription_fees(subscription.id).charge_kind.any?}"
      table.invoice-resume-table width="100%"
        tr
          td.body-2 = I18n.t('invoice.fees_from_to_date', from_date: I18n.l(invoice_subscription(subscription.id).from_datetime_in_customer_timezone&.to_date, format: :default), to_date: I18n.l(invoice_subscription(subscription.id).to_datetime_in_customer_timezone&.to_date, format: :default))
          td.body-2 = I18n.t('invoice.unit')
          td.body-2 = I18n.t('invoice.tax_rate')
          td.body-2 = I18n.t('invoice.amount_without_tax')
        tr
          td.body-1 = I18n.t('invoice.subscription_interval', plan_interval: I18n.t("invoice.#{subscription.plan.interval}"), plan_name: subscription.plan.name)
          td.body-2 = 1
          td.body-2 == TaxHelper.applied_taxes(invoice_subscription(subscription.id).subscription_fee)
          td.body-2 = MoneyHelper.format(invoice_subscription(subscription.id).subscription_amount)
        /* TODO: tr charge pay in advance */

    - if subscription? && subscription_fees(subscription.id).charge_kind.any?
      .invoice-resume.overflow-auto
        table.invoice-resume-table width="100%"
          tr
            td.body-2 = I18n.t('invoice.fees_from_to_date', from_date: I18n.l(invoice_subscription(subscription.id).charges_from_datetime_in_customer_timezone&.to_date, format: :default), to_date: I18n.l(invoice_subscription(subscription.id).charges_to_datetime_in_customer_timezone&.to_date, format: :default))
            td.body-2 = I18n.t('invoice.unit')
            td.body-2 = I18n.t('invoice.tax_rate')
            td.body-2 = I18n.t('invoice.amount_without_tax')
          - subscription_fees(subscription.id).charge_kind.where(true_up_parent_fee: nil).group_by(&:charge_id).each do |_charge_id, fees|
            - fee = fees.first
            - if fees.all? { |f| f.group_id? } && fees.sum(&:units) > 0
              tr
                td
                  .body-1 = fee.billable_metric.name
                  .body-3
                    - if fee.charge.percentage?
                      = I18n.t('invoice.total_events', count: fees.sum(&:events_count))
                td
                td
                td
              - fees.select { |f| f.units.positive? }.each do |fee|
                tr
                  td style="padding-left: 16px;"
                    .body-1 = fee.group.name
                    - unless fee.billable_metric.recurring_count_agg?
                      .body-3
                        - if fee.charge.percentage?
                          = I18n.t('invoice.total_events', count: fee.events_count)
                  td.body-2 = fee.units
                  td.body-2 == TaxHelper.applied_taxes(fee)
                  td.body-2 = MoneyHelper.format(fee.amount)
              - fees.select { |f| f.true_up_fee.present? }.each do |fee|
                tr
                  td
                    .body-1 = I18n.t('invoice.true_up_metric', metric: fee.billable_metric.name)
                    .body-3 = I18n.t('invoice.true_up_details', min_amount: MoneyHelper.format(fee.charge.min_amount))
                  td.body-2 = fee.true_up_fee.units
                  td.body-2 == TaxHelper.applied_taxes(fee.true_up_fee)
                  td.body-2 = MoneyHelper.format(fee.true_up_fee.amount)
            - else
              tr
                td
                  .body-1 = fee.billable_metric.name
                  - unless fee.billable_metric.recurring_count_agg?
                      .body-3
                        - if fee.charge.percentage?
                          = I18n.t('invoice.total_events', count: fee.events_count)
                td.body-2 = fees.sum(&:units)
                td.body-2 == TaxHelper.applied_taxes(fee)
                td.body-2 = MoneyHelper.format(fees.sum(&:amount))
              - if fee.true_up_fee.present?
                tr
                  td
                    .body-1 = I18n.t('invoice.true_up_metric', metric: fee.billable_metric.name)
                    .body-3 = I18n.t('invoice.true_up_details', min_amount: MoneyHelper.format(fee.charge.min_amount))
                  td.body-2 = fee.true_up_fee.units
                  td.body-2 == TaxHelper.applied_taxes(fee.true_up_fee)
                  td.body-2 = MoneyHelper.format(fee.true_up_fee.amount)
    .invoice-resume.overflow-auto
      table.total-table width="100%"
        - if subscriptions.count == 1
          - unless credit?
            - if coupons_amount_cents.positive?
              - credits.coupon_kind.order(created_at: :asc).each do |credit|
                tr
                  td.body-2
                  td.body-2 #{credit.invoice_coupon_display_name}
                  td.body-2 = '-' +  MoneyHelper.format(credit.amount)
          tr
            td.body-2
            td.body-2 = I18n.t('invoice.sub_total_without_tax')
            td.body-2 = MoneyHelper.format(sub_total_excluding_taxes_amount)
          - if applied_taxes.present?
            - applied_taxes.order(tax_rate: :desc).each do |applied_tax|
              tr
                td.body-2
                td.body-2 = I18n.t('invoice.tax_name_with_details', name: applied_tax.tax_name, rate: applied_tax.tax_rate)
                td.body-2 = MoneyHelper.format(applied_tax.amount)
          - else
            tr
              td.body-2
              td.body-2 = I18n.t('invoice.tax_name_with_details', name: 'Tax', rate: 0)
              td.body-2 = MoneyHelper.format(0.to_money(currency))
          tr
            td.body-2
            td.body-2 = I18n.t('invoice.sub_total_with_tax')
            td.body-2 = MoneyHelper.format(sub_total_including_taxes_amount)
          - if credits.credit_note_kind.any?
            tr
              td.body-2
              td.body-2 = I18n.t('invoice.credit_notes')
              td.body-2 = '-' +  MoneyHelper.format(credit_notes_amount)
          - if subscription? && wallet_transactions.exists?
            tr
              td.body-2
              td.body-2 = I18n.t('invoice.prepaid_credits')
              td.body-2 = '-' + MoneyHelper.format(prepaid_credit_amount)
          tr
            td.body-2
            td.body-1 = I18n.t('invoice.total_due')
            td.body-1
              = MoneyHelper.format(total_amount)
        - else
          tr
            td.body-2
            td.body-1 = I18n.t('invoice.total')
            td.body-1
              = MoneyHelper.format(invoice_subscription(subscription.id).total_amount)

    - if subscription? && subscription_fees(subscription.id).charge_kind.any?
      .invoice-resume.mb-24.overflow-auto
        - recurring_fees(subscription.id).group_by(&:charge_id).each do |_charge_id, fees|
          - if fees.sum(&:units) > 0
            - if subscription.name.present?
              h2.invoice-details-title.title-2.mb-24 = I18n.t('invoice.details', resource: subscription.name)
            - else
              h2.invoice-details-title.title-2.mb-24 = I18n.t('invoice.details', resource: subscription.plan.name)

            - if fees.all? { |f| f.group_id? }
              - fees.select { |f| f.units.positive? }.each do |fee|
                .body-3 = fees.first.billable_metric.name
                .body-1.mb-24 = I18n.t('invoice.breakdown_of', fee_group_name: fee.group.name)
                .breakdown-details.mb-24
                  table.breakdown-details-table width="100%"
                    - recurring_breakdown(fee).each do |breakdown|
                      tr
                        td.body-3 width="15%" = I18n.l(breakdown.date, format: :default)
                        td.body-1 width="65%"
                          - if breakdown.action.to_sym == :add
                            | +#{breakdown.count} #{fee.item_name}
                          - elsif breakdown.action.to_sym == :remove
                            | -#{breakdown.count} #{fee.item_name}
                          - else
                            | +/-#{breakdown.count} #{fee.item_name}
                        td.body-3 width="20%"
                          = I18n.t('invoice.breakdown_for_days', breakdown_duration: breakdown.duration, breakdown_total_duration: breakdown.total_duration)
            - else
              .body-3 = fees.first.billable_metric.name
              .body-1.mb-24 = I18n.t('invoice.breakdown')
              .breakdown-details.mb-24
                table.breakdown-details-table width="100%"
                  - fees.each do |fee|
                    - recurring_breakdown(fee).each do |breakdown|
                      tr
                        td.body-3 width="15%" = breakdown.date.strftime('%b %d, %Y')
                        td.body-1 width="65%"
                          - if breakdown.action.to_sym == :add
                            | +#{breakdown.count} #{fee.item_name}
                          - elsif breakdown.action.to_sym == :remove
                            | -#{breakdown.count} #{fee.item_name}
                          - else
                            | +/-#{breakdown.count} #{fee.item_name}
                        td.body-3 width="20%"
                          = I18n.t('invoice.breakdown_for_days', breakdown_duration: breakdown.duration, breakdown_total_duration: breakdown.total_duration)

            .alert.body-3 = I18n.t('invoice.notice')
