name: Release
on:
  repository_dispatch:
    types: [release]
jobs:
  build-image:
    name: Build Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log In to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Add version into docker image
        run: echo ${{ github.event.client_payload.version }} > LAGO_VERSION

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: getlago/api:${{ github.event.client_payload.version }}
          build-args: |
            SEGMENT_WRITE_KEY=${{ secrets.SEGMENT_WRITE_KEY }}
            GOCARDLESS_CLIENT_ID=${{ secrets.PRODUCTION_GOCARDLESS_CLIENT_ID }}
            GOCARDLESS_CLIENT_SECRET=${{ secrets.PRODUCTION_GOCARDLESS_CLIENT_SECRET }}
            LAGO_OAUTH_URL=https://proxy.getlago.com

      - name: Build and Push ARM64 Docker Image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile.arm64
          platforms: linux/arm64
          push: true
          tags: getlago/api-arm64v8:${{ github.event.client_payload.version }}
          build-args: |
            SEGMENT_WRITE_KEY=${{ secrets.SEGMENT_WRITE_KEY }}
            GOCARDLESS_CLIENT_ID=${{ secrets.PRODUCTION_GOCARDLESS_CLIENT_ID }}
            GOCARDLESS_CLIENT_SECRET=${{ secrets.PRODUCTION_GOCARDLESS_CLIENT_SECRET }}
            LAGO_OAUTH_URL=https://proxy.getlago.com
  
  fern-generate:
    name: Fern Generate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup node
        uses: actions/setup-node@v3
      
      - name: Download Fern
        run: npm install -g fern-api

      - name: Generate Postman, Java SDK, and Docs
        env:
          POSTMAN_API_KEY: ${{ secrets.POSTMAN_API_KEY }}
          POSTMAN_WORKSPACE_ID: ${{ secrets.POSTMAN_WORKSPACE_ID }}
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
          FERN_TOKEN: ${{ secrets.FERN_TOKEN }}
        run: fern generate --group publish --version ${{ github.event.client_payload.version }} --log-level debug
    