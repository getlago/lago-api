name: Deploy Preview to Staging
on: workflow_dispatch
jobs:
  build-image:
    name: "Build Staging Image"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Docker tag
        id: docker_tag
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: lago-api-staging
          IMAGE_TAG: ${{ steps.extract_branch.outputs.branch }}
          API_URL: https://${{ steps.extract_branch.outputs.branch }}-api.staging.getlago.com
        run: echo "##[set-output name=tag;]$(echo $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG)"
      - name: Build and push
        uses: docker/build-push-action@v2
        env:
          RAILS_ENV: staging
        with:
          context: .
          push: true
          tags: ${{ steps.docker_tag.outputs.tag }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
  porter-deploy:
    runs-on: ubuntu-latest
    needs: [build-image]
    container:
      image: getlago/deploy-staging
    env:
      PORTER_HOST: https://dashboard.getporter.dev
      PORTER_CLUSTER: ${{ secrets.PORTER_CLUSTER }}
      PORTER_PROJECT: ${{ secrets.PORTER_PROJECT }}
      PORTER_TOKEN: ${{ secrets.PORTER_TOKEN_2643 }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2.3.4
    - name: Extract branch name
      shell: bash
      run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
      id: extract_branch
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Replace Variables
      env:
        ECR_REPOSITORY: ${{ steps.login-ecr.outputs.registry }}/lago-api-staging
        BRANCH: ${{ steps.extract_branch.outputs.branch }}
        DOMAIN: ${{ steps.extract_branch.outputs.branch }}
        DATABASE_URL: postgres://lago:${{ secrets.DB_STAGING_PASSWORD }}@${{ secrets.DB_STAGING_HOST}}:5432/${{ steps.extract_branch.outputs.branch }}
        REDIS_URL: redis://${{ secrets.REDIS_STAGING_URL }}
      run: |
        envsubst < ./porter/api.yaml > ./porter/env_api.yaml
        envsubst < ./porter/worker.yaml > ./porter/env_worker.yaml
    - name: Configure kubectl
      run: echo "${{ secrets.KUBE_STAGING_CONFIG }}" | base64 -d > kubeconfig.yaml
    - name: Get Helm API deployment
      id: helm_deployment
      run: echo "::set-output name=deployment::$(helm --kubeconfig ./kubeconfig.yaml list -f ${{ steps.extract_branch.outputs.branch }}-api -o=json | jq '.[0].name')"
    - name: Delete API app
      if: ${{ steps.helm_deployment.outputs.deployment != 'null' }}
      run: |
        helm --kubeconfig ./kubeconfig.yaml uninstall ${{ steps.extract_branch.outputs.branch }}-api
    - name: Create API app
      uses: porter-dev/porter-cli-action@v0.1.0
      with:
        command: create web --app ${{ steps.extract_branch.outputs.branch}}-api --source registry --values ./porter/env_api.yaml --image ${{ steps.login-ecr.outputs.registry }}/lago-api-staging:${{ steps.extract_branch.outputs.branch }}
    - name : Get Helm Worker Deployment
      id: helm_worker_deployment
      run: echo "::set-output name=deployment::$(helm --kubeconfig ./kubeconfig.yaml list -f ${{ steps.extract_branch.outputs.branch }}-worker -o=json | jq '.[0].name')"
    - name: Delete Worker App
      if: ${{ steps.helm_worker_deployment.outputs.deployment != 'null' }}
      run: |
        helm --kubeconfig ./kubeconfig.yaml uninstall ${{ steps.extract_branch.outputs.branch }}-worker
    - name: Create Worker App
      uses: porter-dev/porter-cli-action@v0.1.0
      with:
        command: create worker --app ${{ steps.extract_branch.outputs.branch }}-worker --source registry --values ./porter/env_worker.yaml --image ${{ steps.login-ecr.outputs.registry }}/lago-api-staging:${{ steps.extract_branch.outputs.branch }}
