type AddOn {
  amountCents: BigInt!
  amountCurrency: CurrencyEnum!
  appliedAddOnsCount: Int!
  code: String!
  createdAt: ISO8601DateTime!

  """
  Number of customers using this add-on
  """
  customersCount: Int!
  deletedAt: ISO8601DateTime
  description: String
  id: ID!
  integrationMappings(integrationId: ID): [Mapping!]
  invoiceDisplayName: String
  name: String!
  organization: Organization
  taxes: [Tax!]
  updatedAt: ISO8601DateTime!
}

enum AdjustedFeeTypeEnum {
  adjusted_amount
  adjusted_units
}

enum AggregationTypeEnum {
  count_agg
  custom_agg
  latest_agg
  max_agg
  sum_agg
  unique_count_agg
  weighted_sum_agg
}

type AnrokCustomer {
  externalAccountId: String
  externalCustomerId: String
  id: ID!
  integrationCode: String
  integrationId: ID
  integrationType: IntegrationTypeEnum
  syncWithProvider: Boolean
}

type AppliedAddOn {
  addOn: AddOn!
  amountCents: BigInt!
  amountCurrency: CurrencyEnum!
  createdAt: ISO8601DateTime!
  id: ID!
}

type AppliedCoupon {
  amountCents: BigInt
  amountCentsRemaining: BigInt
  amountCurrency: CurrencyEnum
  coupon: Coupon!
  createdAt: ISO8601DateTime!
  frequency: CouponFrequency!
  frequencyDuration: Int
  frequencyDurationRemaining: Int
  id: ID!
  percentageRate: Float
  terminatedAt: ISO8601DateTime!
}

interface AppliedTax {
  amountCents: BigInt!
  amountCurrency: CurrencyEnum!
  createdAt: ISO8601DateTime!
  id: ID!
  tax: Tax
  taxCode: String!
  taxDescription: String
  taxName: String!
  taxRate: Float!
  updatedAt: ISO8601DateTime!
}

"""
Represents non-fractional signed whole numeric values. Since the value may
exceed the size of a 32-bit integer, it's encoded as a string.
"""
scalar BigInt

"""
Base billable metric
"""
type BillableMetric {
  activeSubscriptionsCount: Int!
  aggregationType: AggregationTypeEnum!
  code: String!
  createdAt: ISO8601DateTime!
  deletedAt: ISO8601DateTime
  description: String
  draftInvoicesCount: Int!
  fieldName: String
  filters: [BillableMetricFilter!]
  id: ID!
  integrationMappings(integrationId: ID): [Mapping!]
  name: String!
  organization: Organization
  plansCount: Int!
  recurring: Boolean!
  subscriptionsCount: Int!
  updatedAt: ISO8601DateTime!
  weightedInterval: WeightedIntervalEnum
}

"""
Billable metric filters
"""
type BillableMetricFilter {
  id: ID!
  key: String!
  values: [String!]!
}

enum BillingTimeEnum {
  anniversary
  calendar
}

type Charge {
  billableMetric: BillableMetric!
  chargeModel: ChargeModelEnum!
  createdAt: ISO8601DateTime!
  deletedAt: ISO8601DateTime
  filters: [ChargeFilter!]
  id: ID!
  invoiceDisplayName: String
  invoiceable: Boolean!
  minAmountCents: BigInt!
  payInAdvance: Boolean!
  properties: Properties
  prorated: Boolean!
  regroupPaidFees: RegroupPaidFeesEnum
  taxes: [Tax!]
  updatedAt: ISO8601DateTime!
}

"""
Charge filters object
"""
type ChargeFilter {
  id: ID!
  invoiceDisplayName: String
  properties: Properties!
  values: ChargeFilterValues!
}

scalar ChargeFilterValues

enum ChargeModelEnum {
  custom
  graduated
  graduated_percentage
  package
  percentage
  standard
  volume
}

"""
Type for CollectionMetadataType
"""
type CollectionMetadata {
  """
  Current Page of loaded data
  """
  currentPage: Int!

  """
  The number of items per page
  """
  limitValue: Int!

  """
  The total number of items to be paginated
  """
  totalCount: Int!

  """
  The total number of pages in the pagination
  """
  totalPages: Int!
}

type Commitment {
  amountCents: BigInt!
  commitmentType: CommitmentTypeEnum!
  createdAt: ISO8601DateTime!
  id: ID!
  invoiceDisplayName: String
  plan: Plan!
  taxes: [Tax!]
  updatedAt: ISO8601DateTime!
}

enum CommitmentTypeEnum {
  minimum_commitment
}

enum CountryCode {
  """
  Andorra
  """
  AD

  """
  United Arab Emirates
  """
  AE

  """
  Afghanistan
  """
  AF

  """
  Antigua and Barbuda
  """
  AG

  """
  Anguilla
  """
  AI

  """
  Albania
  """
  AL

  """
  Armenia
  """
  AM

  """
  Angola
  """
  AO

  """
  Antarctica
  """
  AQ

  """
  Argentina
  """
  AR

  """
  American Samoa
  """
  AS

  """
  Austria
  """
  AT

  """
  Australia
  """
  AU

  """
  Aruba
  """
  AW

  """
  Åland Islands
  """
  AX

  """
  Azerbaijan
  """
  AZ

  """
  Bosnia and Herzegovina
  """
  BA

  """
  Barbados
  """
  BB

  """
  Bangladesh
  """
  BD

  """
  Belgium
  """
  BE

  """
  Burkina Faso
  """
  BF

  """
  Bulgaria
  """
  BG

  """
  Bahrain
  """
  BH

  """
  Burundi
  """
  BI

  """
  Benin
  """
  BJ

  """
  Saint Barthélemy
  """
  BL

  """
  Bermuda
  """
  BM

  """
  Brunei Darussalam
  """
  BN

  """
  Bolivia (Plurinational State of)
  """
  BO

  """
  Bonaire, Sint Eustatius and Saba
  """
  BQ

  """
  Brazil
  """
  BR

  """
  Bahamas
  """
  BS

  """
  Bhutan
  """
  BT

  """
  Bouvet Island
  """
  BV

  """
  Botswana
  """
  BW

  """
  Belarus
  """
  BY

  """
  Belize
  """
  BZ

  """
  Canada
  """
  CA

  """
  Cocos (Keeling) Islands
  """
  CC

  """
  Congo (Democratic Republic of the)
  """
  CD

  """
  Central African Republic
  """
  CF

  """
  Congo
  """
  CG

  """
  Switzerland
  """
  CH

  """
  Côte d'Ivoire
  """
  CI

  """
  Cook Islands
  """
  CK

  """
  Chile
  """
  CL

  """
  Cameroon
  """
  CM

  """
  China
  """
  CN

  """
  Colombia
  """
  CO

  """
  Costa Rica
  """
  CR

  """
  Cuba
  """
  CU

  """
  Cabo Verde
  """
  CV

  """
  Curaçao
  """
  CW

  """
  Christmas Island
  """
  CX

  """
  Cyprus
  """
  CY

  """
  Czechia
  """
  CZ

  """
  Germany
  """
  DE

  """
  Djibouti
  """
  DJ

  """
  Denmark
  """
  DK

  """
  Dominica
  """
  DM

  """
  Dominican Republic
  """
  DO

  """
  Algeria
  """
  DZ

  """
  Ecuador
  """
  EC

  """
  Estonia
  """
  EE

  """
  Egypt
  """
  EG

  """
  Western Sahara
  """
  EH

  """
  Eritrea
  """
  ER

  """
  Spain
  """
  ES

  """
  Ethiopia
  """
  ET

  """
  Finland
  """
  FI

  """
  Fiji
  """
  FJ

  """
  Falkland Islands (Malvinas)
  """
  FK

  """
  Micronesia (Federated States of)
  """
  FM

  """
  Faroe Islands
  """
  FO

  """
  France
  """
  FR

  """
  Gabon
  """
  GA

  """
  United Kingdom of Great Britain and Northern Ireland
  """
  GB

  """
  Grenada
  """
  GD

  """
  Georgia
  """
  GE

  """
  French Guiana
  """
  GF

  """
  Guernsey
  """
  GG

  """
  Ghana
  """
  GH

  """
  Gibraltar
  """
  GI

  """
  Greenland
  """
  GL

  """
  Gambia
  """
  GM

  """
  Guinea
  """
  GN

  """
  Guadeloupe
  """
  GP

  """
  Equatorial Guinea
  """
  GQ

  """
  Greece
  """
  GR

  """
  South Georgia and the South Sandwich Islands
  """
  GS

  """
  Guatemala
  """
  GT

  """
  Guam
  """
  GU

  """
  Guinea-Bissau
  """
  GW

  """
  Guyana
  """
  GY

  """
  Hong Kong
  """
  HK

  """
  Heard Island and McDonald Islands
  """
  HM

  """
  Honduras
  """
  HN

  """
  Croatia
  """
  HR

  """
  Haiti
  """
  HT

  """
  Hungary
  """
  HU

  """
  Indonesia
  """
  ID

  """
  Ireland
  """
  IE

  """
  Israel
  """
  IL

  """
  Isle of Man
  """
  IM

  """
  India
  """
  IN

  """
  British Indian Ocean Territory
  """
  IO

  """
  Iraq
  """
  IQ

  """
  Iran (Islamic Republic of)
  """
  IR

  """
  Iceland
  """
  IS

  """
  Italy
  """
  IT

  """
  Jersey
  """
  JE

  """
  Jamaica
  """
  JM

  """
  Jordan
  """
  JO

  """
  Japan
  """
  JP

  """
  Kenya
  """
  KE

  """
  Kyrgyzstan
  """
  KG

  """
  Cambodia
  """
  KH

  """
  Kiribati
  """
  KI

  """
  Comoros
  """
  KM

  """
  Saint Kitts and Nevis
  """
  KN

  """
  Korea (Democratic People's Republic of)
  """
  KP

  """
  Korea (Republic of)
  """
  KR

  """
  Kuwait
  """
  KW

  """
  Cayman Islands
  """
  KY

  """
  Kazakhstan
  """
  KZ

  """
  Lao People's Democratic Republic
  """
  LA

  """
  Lebanon
  """
  LB

  """
  Saint Lucia
  """
  LC

  """
  Liechtenstein
  """
  LI

  """
  Sri Lanka
  """
  LK

  """
  Liberia
  """
  LR

  """
  Lesotho
  """
  LS

  """
  Lithuania
  """
  LT

  """
  Luxembourg
  """
  LU

  """
  Latvia
  """
  LV

  """
  Libya
  """
  LY

  """
  Morocco
  """
  MA

  """
  Monaco
  """
  MC

  """
  Moldova (Republic of)
  """
  MD

  """
  Montenegro
  """
  ME

  """
  Saint Martin (French part)
  """
  MF

  """
  Madagascar
  """
  MG

  """
  Marshall Islands
  """
  MH

  """
  North Macedonia
  """
  MK

  """
  Mali
  """
  ML

  """
  Myanmar
  """
  MM

  """
  Mongolia
  """
  MN

  """
  Macao
  """
  MO

  """
  Northern Mariana Islands
  """
  MP

  """
  Martinique
  """
  MQ

  """
  Mauritania
  """
  MR

  """
  Montserrat
  """
  MS

  """
  Malta
  """
  MT

  """
  Mauritius
  """
  MU

  """
  Maldives
  """
  MV

  """
  Malawi
  """
  MW

  """
  Mexico
  """
  MX

  """
  Malaysia
  """
  MY

  """
  Mozambique
  """
  MZ

  """
  Namibia
  """
  NA

  """
  New Caledonia
  """
  NC

  """
  Niger
  """
  NE

  """
  Norfolk Island
  """
  NF

  """
  Nigeria
  """
  NG

  """
  Nicaragua
  """
  NI

  """
  Netherlands
  """
  NL

  """
  Norway
  """
  NO

  """
  Nepal
  """
  NP

  """
  Nauru
  """
  NR

  """
  Niue
  """
  NU

  """
  New Zealand
  """
  NZ

  """
  Oman
  """
  OM

  """
  Panama
  """
  PA

  """
  Peru
  """
  PE

  """
  French Polynesia
  """
  PF

  """
  Papua New Guinea
  """
  PG

  """
  Philippines
  """
  PH

  """
  Pakistan
  """
  PK

  """
  Poland
  """
  PL

  """
  Saint Pierre and Miquelon
  """
  PM

  """
  Pitcairn
  """
  PN

  """
  Puerto Rico
  """
  PR

  """
  Palestine, State of
  """
  PS

  """
  Portugal
  """
  PT

  """
  Palau
  """
  PW

  """
  Paraguay
  """
  PY

  """
  Qatar
  """
  QA

  """
  Réunion
  """
  RE

  """
  Romania
  """
  RO

  """
  Serbia
  """
  RS

  """
  Russian Federation
  """
  RU

  """
  Rwanda
  """
  RW

  """
  Saudi Arabia
  """
  SA

  """
  Solomon Islands
  """
  SB

  """
  Seychelles
  """
  SC

  """
  Sudan
  """
  SD

  """
  Sweden
  """
  SE

  """
  Singapore
  """
  SG

  """
  Saint Helena, Ascension and Tristan da Cunha
  """
  SH

  """
  Slovenia
  """
  SI

  """
  Svalbard and Jan Mayen
  """
  SJ

  """
  Slovakia
  """
  SK

  """
  Sierra Leone
  """
  SL

  """
  San Marino
  """
  SM

  """
  Senegal
  """
  SN

  """
  Somalia
  """
  SO

  """
  Suriname
  """
  SR

  """
  South Sudan
  """
  SS

  """
  Sao Tome and Principe
  """
  ST

  """
  El Salvador
  """
  SV

  """
  Sint Maarten (Dutch part)
  """
  SX

  """
  Syrian Arab Republic
  """
  SY

  """
  Eswatini
  """
  SZ

  """
  Turks and Caicos Islands
  """
  TC

  """
  Chad
  """
  TD

  """
  French Southern Territories
  """
  TF

  """
  Togo
  """
  TG

  """
  Thailand
  """
  TH

  """
  Tajikistan
  """
  TJ

  """
  Tokelau
  """
  TK

  """
  Timor-Leste
  """
  TL

  """
  Turkmenistan
  """
  TM

  """
  Tunisia
  """
  TN

  """
  Tonga
  """
  TO

  """
  Türkiye
  """
  TR

  """
  Trinidad and Tobago
  """
  TT

  """
  Tuvalu
  """
  TV

  """
  Taiwan, Province of China
  """
  TW

  """
  Tanzania, United Republic of
  """
  TZ

  """
  Ukraine
  """
  UA

  """
  Uganda
  """
  UG

  """
  United States Minor Outlying Islands
  """
  UM

  """
  United States of America
  """
  US

  """
  Uruguay
  """
  UY

  """
  Uzbekistan
  """
  UZ

  """
  Holy See
  """
  VA

  """
  Saint Vincent and the Grenadines
  """
  VC

  """
  Venezuela (Bolivarian Republic of)
  """
  VE

  """
  Virgin Islands (British)
  """
  VG

  """
  Virgin Islands (U.S.)
  """
  VI

  """
  Viet Nam
  """
  VN

  """
  Vanuatu
  """
  VU

  """
  Wallis and Futuna
  """
  WF

  """
  Samoa
  """
  WS

  """
  Yemen
  """
  YE

  """
  Mayotte
  """
  YT

  """
  South Africa
  """
  ZA

  """
  Zambia
  """
  ZM

  """
  Zimbabwe
  """
  ZW
}

type Coupon {
  amountCents: BigInt
  amountCurrency: CurrencyEnum
  appliedCouponsCount: Int!
  billableMetrics: [BillableMetric!]
  code: String
  couponType: CouponTypeEnum!
  createdAt: ISO8601DateTime!

  """
  Number of customers using this coupon
  """
  customersCount: Int!
  description: String
  expiration: CouponExpiration!
  expirationAt: ISO8601DateTime
  frequency: CouponFrequency!
  frequencyDuration: Int
  id: ID!
  limitedBillableMetrics: Boolean!
  limitedPlans: Boolean!
  name: String!
  organization: Organization
  percentageRate: Float
  plans: [Plan!]
  reusable: Boolean!
  status: CouponStatusEnum!
  terminatedAt: ISO8601DateTime
  updatedAt: ISO8601DateTime!
}

enum CouponExpiration {
  no_expiration
  time_limit
}

enum CouponFrequency {
  forever
  once
  recurring
}

enum CouponStatusEnum {
  active
  terminated
}

enum CouponTypeEnum {
  fixed_amount
  percentage
}

"""
CreditNote
"""
type CreditNote {
  appliedTaxes: [CreditNoteAppliedTax!]
  balanceAmountCents: BigInt!

  """
  Check if credit note can be voided
  """
  canBeVoided: Boolean!
  couponsAdjustmentAmountCents: BigInt!
  createdAt: ISO8601DateTime!
  creditAmountCents: BigInt!
  creditStatus: CreditNoteCreditStatusEnum
  currency: CurrencyEnum!
  customer: Customer!
  description: String
  errorDetails: [ErrorDetail!]
  externalIntegrationId: String
  fileUrl: String
  id: ID!
  integrationSyncable: Boolean!
  invoice: Invoice
  issuingDate: ISO8601Date!
  items: [CreditNoteItem!]!
  number: String!
  reason: CreditNoteReasonEnum!
  refundAmountCents: BigInt!
  refundStatus: CreditNoteRefundStatusEnum
  refundedAt: ISO8601DateTime
  sequentialId: ID!
  subTotalExcludingTaxesAmountCents: BigInt!
  taxProviderSyncable: Boolean!
  taxesAmountCents: BigInt!
  taxesRate: Float!
  totalAmountCents: BigInt!
  updatedAt: ISO8601DateTime!
  voidedAt: ISO8601DateTime
}

type CreditNoteAppliedTax implements AppliedTax {
  amountCents: BigInt!
  amountCurrency: CurrencyEnum!
  baseAmountCents: BigInt!
  createdAt: ISO8601DateTime!
  creditNote: CreditNote!
  id: ID!
  tax: Tax
  taxCode: String!
  taxDescription: String
  taxName: String!
  taxRate: Float!
  updatedAt: ISO8601DateTime!
}

enum CreditNoteCreditStatusEnum {
  available
  consumed
  voided
}

type CreditNoteItem {
  amountCents: BigInt!
  amountCurrency: CurrencyEnum!
  createdAt: ISO8601DateTime!
  fee: Fee!
  id: ID!
}

enum CreditNoteReasonEnum {
  duplicated_charge
  fraudulent_charge
  order_cancellation
  order_change
  other
  product_unsatisfactory
}

enum CreditNoteRefundStatusEnum {
  failed
  pending
  succeeded
}

enum CurrencyEnum {
  """
  United Arab Emirates Dirham
  """
  AED

  """
  Afghan Afghani
  """
  AFN

  """
  Albanian Lek
  """
  ALL

  """
  Armenian Dram
  """
  AMD

  """
  Netherlands Antillean Gulden
  """
  ANG

  """
  Angolan Kwanza
  """
  AOA

  """
  Argentine Peso
  """
  ARS

  """
  Australian Dollar
  """
  AUD

  """
  Aruban Florin
  """
  AWG

  """
  Azerbaijani Manat
  """
  AZN

  """
  Bosnia and Herzegovina Convertible Mark
  """
  BAM

  """
  Barbadian Dollar
  """
  BBD

  """
  Bangladeshi Taka
  """
  BDT

  """
  Bulgarian Lev
  """
  BGN

  """
  Burundian Franc
  """
  BIF

  """
  Bermudian Dollar
  """
  BMD

  """
  Brunei Dollar
  """
  BND

  """
  Bolivian Boliviano
  """
  BOB

  """
  Brazilian Real
  """
  BRL

  """
  Bahamian Dollar
  """
  BSD

  """
  Botswana Pula
  """
  BWP

  """
  Belarusian Ruble
  """
  BYN

  """
  Belize Dollar
  """
  BZD

  """
  Canadian Dollar
  """
  CAD

  """
  Congolese Franc
  """
  CDF

  """
  Swiss Franc
  """
  CHF

  """
  Unidad de Fomento
  """
  CLF

  """
  Chilean Peso
  """
  CLP

  """
  Chinese Renminbi Yuan
  """
  CNY

  """
  Colombian Peso
  """
  COP

  """
  Costa Rican Colón
  """
  CRC

  """
  Cape Verdean Escudo
  """
  CVE

  """
  Czech Koruna
  """
  CZK

  """
  Djiboutian Franc
  """
  DJF

  """
  Danish Krone
  """
  DKK

  """
  Dominican Peso
  """
  DOP

  """
  Algerian Dinar
  """
  DZD

  """
  Egyptian Pound
  """
  EGP

  """
  Ethiopian Birr
  """
  ETB

  """
  Euro
  """
  EUR

  """
  Fijian Dollar
  """
  FJD

  """
  Falkland Pound
  """
  FKP

  """
  British Pound
  """
  GBP

  """
  Georgian Lari
  """
  GEL

  """
  Gibraltar Pound
  """
  GIP

  """
  Gambian Dalasi
  """
  GMD

  """
  Guinean Franc
  """
  GNF

  """
  Guatemalan Quetzal
  """
  GTQ

  """
  Guyanese Dollar
  """
  GYD

  """
  Hong Kong Dollar
  """
  HKD

  """
  Honduran Lempira
  """
  HNL

  """
  Croatian Kuna
  """
  HRK

  """
  Haitian Gourde
  """
  HTG

  """
  Hungarian Forint
  """
  HUF

  """
  Indonesian Rupiah
  """
  IDR

  """
  Israeli New Sheqel
  """
  ILS

  """
  Indian Rupee
  """
  INR

  """
  Iranian Rial
  """
  IRR

  """
  Icelandic Króna
  """
  ISK

  """
  Jamaican Dollar
  """
  JMD

  """
  Jordanian Dinar
  """
  JOD

  """
  Japanese Yen
  """
  JPY

  """
  Kenyan Shilling
  """
  KES

  """
  Kyrgyzstani Som
  """
  KGS

  """
  Cambodian Riel
  """
  KHR

  """
  Comorian Franc
  """
  KMF

  """
  South Korean Won
  """
  KRW

  """
  Kuwaiti Dinar
  """
  KWD

  """
  Cayman Islands Dollar
  """
  KYD

  """
  Kazakhstani Tenge
  """
  KZT

  """
  Lao Kip
  """
  LAK

  """
  Lebanese Pound
  """
  LBP

  """
  Sri Lankan Rupee
  """
  LKR

  """
  Liberian Dollar
  """
  LRD

  """
  Lesotho Loti
  """
  LSL

  """
  Moroccan Dirham
  """
  MAD

  """
  Moldovan Leu
  """
  MDL

  """
  Malagasy Ariary
  """
  MGA

  """
  Macedonian Denar
  """
  MKD

  """
  Myanmar Kyat
  """
  MMK

  """
  Mongolian Tögrög
  """
  MNT

  """
  Macanese Pataca
  """
  MOP

  """
  Mauritanian Ouguiya
  """
  MRO

  """
  Mauritian Rupee
  """
  MUR

  """
  Maldivian Rufiyaa
  """
  MVR

  """
  Malawian Kwacha
  """
  MWK

  """
  Mexican Peso
  """
  MXN

  """
  Malaysian Ringgit
  """
  MYR

  """
  Mozambican Metical
  """
  MZN

  """
  Namibian Dollar
  """
  NAD

  """
  Nigerian Naira
  """
  NGN

  """
  Nicaraguan Córdoba
  """
  NIO

  """
  Norwegian Krone
  """
  NOK

  """
  Nepalese Rupee
  """
  NPR

  """
  New Zealand Dollar
  """
  NZD

  """
  Panamanian Balboa
  """
  PAB

  """
  Peruvian Sol
  """
  PEN

  """
  Papua New Guinean Kina
  """
  PGK

  """
  Philippine Peso
  """
  PHP

  """
  Pakistani Rupee
  """
  PKR

  """
  Polish Złoty
  """
  PLN

  """
  Paraguayan Guaraní
  """
  PYG

  """
  Qatari Riyal
  """
  QAR

  """
  Romanian Leu
  """
  RON

  """
  Serbian Dinar
  """
  RSD

  """
  Russian Ruble
  """
  RUB

  """
  Rwandan Franc
  """
  RWF

  """
  Saudi Riyal
  """
  SAR

  """
  Solomon Islands Dollar
  """
  SBD

  """
  Seychellois Rupee
  """
  SCR

  """
  Swedish Krona
  """
  SEK

  """
  Singapore Dollar
  """
  SGD

  """
  Saint Helenian Pound
  """
  SHP

  """
  Sierra Leonean Leone
  """
  SLL

  """
  Somali Shilling
  """
  SOS

  """
  Surinamese Dollar
  """
  SRD

  """
  São Tomé and Príncipe Dobra
  """
  STD

  """
  Swazi Lilangeni
  """
  SZL

  """
  Thai Baht
  """
  THB

  """
  Tajikistani Somoni
  """
  TJS

  """
  Tongan Paʻanga
  """
  TOP

  """
  Turkish Lira
  """
  TRY

  """
  Trinidad and Tobago Dollar
  """
  TTD

  """
  New Taiwan Dollar
  """
  TWD

  """
  Tanzanian Shilling
  """
  TZS

  """
  Ukrainian Hryvnia
  """
  UAH

  """
  Ugandan Shilling
  """
  UGX

  """
  United States Dollar
  """
  USD

  """
  Uruguayan Peso
  """
  UYU

  """
  Uzbekistan Som
  """
  UZS

  """
  Vietnamese Đồng
  """
  VND

  """
  Vanuatu Vatu
  """
  VUV

  """
  Samoan Tala
  """
  WST

  """
  Central African Cfa Franc
  """
  XAF

  """
  East Caribbean Dollar
  """
  XCD

  """
  West African Cfa Franc
  """
  XOF

  """
  Cfp Franc
  """
  XPF

  """
  Yemeni Rial
  """
  YER

  """
  South African Rand
  """
  ZAR

  """
  Zambian Kwacha
  """
  ZMW
}

type Customer {
  """
  Number of active subscriptions per customer
  """
  activeSubscriptionsCount: Int!
  addressLine1: String
  addressLine2: String
  anrokCustomer: AnrokCustomer
  applicableTimezone: TimezoneEnum!
  appliedAddOns: [AppliedAddOn!]
  appliedCoupons: [AppliedCoupon!]
  billingConfiguration: CustomerBillingConfiguration

  """
  Check if customer attributes are editable
  """
  canEditAttributes: Boolean!
  city: String
  country: CountryCode
  createdAt: ISO8601DateTime!
  creditNotes: [CreditNote!]

  """
  Credit notes credits balance available per customer
  """
  creditNotesBalanceAmountCents: BigInt!

  """
  Number of available credits from credit notes per customer
  """
  creditNotesCreditsAvailableCount: Int!
  currency: CurrencyEnum
  customerType: CustomerTypeEnum
  deletedAt: ISO8601DateTime
  displayName: String!
  email: String
  externalId: String!
  externalSalesforceId: String

  """
  Options for handling invoices with a zero total amount.
  """
  finalizeZeroAmountInvoice: FinalizeZeroAmountInvoiceEnum
  firstname: String

  """
  Define if a customer has an active wallet
  """
  hasActiveWallet: Boolean!

  """
  Define if a customer has any credit note
  """
  hasCreditNotes: Boolean!

  """
  Define if a customer has overdue invoices
  """
  hasOverdueInvoices: Boolean!
  id: ID!
  invoiceGracePeriod: Int
  invoices: [Invoice!]
  lastname: String
  legalName: String
  legalNumber: String
  logoUrl: String
  metadata: [CustomerMetadata!]
  name: String
  netPaymentTerm: Int
  netsuiteCustomer: NetsuiteCustomer
  paymentProvider: ProviderTypeEnum
  paymentProviderCode: String
  phone: String
  providerCustomer: ProviderCustomer
  sequentialId: String!
  shippingAddress: CustomerAddress
  slug: String!
  state: String

  """
  Query subscriptions of a customer
  """
  subscriptions(
    """
    Statuses of subscriptions to retrieve
    """
    status: [StatusTypeEnum!]
  ): [Subscription!]!
  taxIdentificationNumber: String
  taxes: [Tax!]
  timezone: TimezoneEnum
  updatedAt: ISO8601DateTime!
  url: String
  xeroCustomer: XeroCustomer
  zipcode: String
}

type CustomerAddress {
  addressLine1: String
  addressLine2: String
  city: String
  country: CountryCode
  state: String
  zipcode: String
}

type CustomerBillingConfiguration {
  documentLocale: String
  id: ID!
}

type CustomerMetadata {
  createdAt: ISO8601DateTime!
  displayInInvoice: Boolean!
  id: ID!
  key: String!
  updatedAt: ISO8601DateTime!
  value: String!
}

enum CustomerTypeEnum {
  company
  individual
}

"""
Autogenerated input type of DownloadCustomerPortalInvoice
"""
input DownloadCustomerPortalInvoiceInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

enum ErrorCodesEnum {
  not_provided
  tax_error
  tax_voiding_error
}

type ErrorDetail {
  errorCode: ErrorCodesEnum!
  errorDetails: String
  id: ID!
}

type Fee implements InvoiceItem {
  adjustedFee: Boolean!
  adjustedFeeType: AdjustedFeeTypeEnum
  amountCents: BigInt!
  amountCurrency: CurrencyEnum!
  amountDetails: FeeAmountDetails
  appliedTaxes: [FeeAppliedTax!]
  charge: Charge
  chargeFilter: ChargeFilter
  creditableAmountCents: BigInt!
  currency: CurrencyEnum!
  description: String
  eventsCount: BigInt
  feeType: FeeTypesEnum!
  groupedBy: JSON!
  id: ID!
  invoiceDisplayName: String
  invoiceName: String
  itemCode: String!
  itemName: String!
  itemType: String!
  preciseUnitAmount: Float!
  subscription: Subscription
  succeededAt: ISO8601DateTime
  taxesAmountCents: BigInt!
  taxesRate: Float
  trueUpFee: Fee
  trueUpParentFee: Fee
  units: Float!
}

type FeeAmountDetails {
  fixedFeeTotalAmount: String
  fixedFeeUnitAmount: String
  flatUnitAmount: String
  freeEvents: Int
  freeUnits: String
  graduatedPercentageRanges: [FeeAmountDetailsGraduatedPercentageRange!]
  graduatedRanges: [FeeAmountDetailsGraduatedRange!]
  minMaxAdjustmentTotalAmount: String
  paidEvents: Int
  paidUnits: String
  perPackageSize: Int
  perPackageUnitAmount: String
  perUnitAmount: String
  perUnitTotalAmount: String
  rate: String
  units: String
}

type FeeAmountDetailsGraduatedPercentageRange {
  flatUnitAmount: String
  fromValue: BigInt
  perUnitTotalAmount: String
  rate: String
  toValue: BigInt
  totalWithFlatAmount: String
  units: String
}

type FeeAmountDetailsGraduatedRange {
  flatUnitAmount: String
  fromValue: BigInt
  perUnitAmount: String
  perUnitTotalAmount: String
  toValue: BigInt
  totalWithFlatAmount: String
  units: String
}

type FeeAppliedTax implements AppliedTax {
  amountCents: BigInt!
  amountCurrency: CurrencyEnum!
  createdAt: ISO8601DateTime!
  fee: Fee!
  id: ID!
  tax: Tax
  taxCode: String!
  taxDescription: String
  taxName: String!
  taxRate: Float!
  updatedAt: ISO8601DateTime!
}

enum FeeTypesEnum {
  add_on
  charge
  commitment
  credit
  subscription
}

enum FinalizeZeroAmountInvoiceEnum {
  finalize
  inherit
  skip
}

type FinalizedInvoiceCollection {
  amountCents: BigInt!
  currency: CurrencyEnum
  invoicesCount: BigInt!
  month: ISO8601DateTime!
  paymentStatus: InvoicePaymentStatusTypeEnum
}

"""
FinalizedInvoiceCollectionCollection type
"""
type FinalizedInvoiceCollectionCollection {
  """
  A collection of paginated FinalizedInvoiceCollectionCollection
  """
  collection: [FinalizedInvoiceCollection!]!

  """
  Pagination Metadata for navigating the Pagination
  """
  metadata: CollectionMetadata!
}

type GraduatedPercentageRange {
  flatAmount: String!
  fromValue: BigInt!
  rate: String!
  toValue: BigInt
}

type GraduatedRange {
  flatAmount: String!
  fromValue: BigInt!
  perUnitAmount: String!
  toValue: BigInt
}

"""
An ISO 8601-encoded date
"""
scalar ISO8601Date @specifiedBy(url: "https://tools.ietf.org/html/rfc3339")

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime @specifiedBy(url: "https://tools.ietf.org/html/rfc3339")

enum IntegrationTypeEnum {
  anrok
  hubspot
  netsuite
  okta
  progressive_billing
  xero
}

"""
Invoice
"""
type Invoice {
  appliedTaxes: [InvoiceAppliedTax!]
  chargeAmountCents: BigInt!
  couponsAmountCents: BigInt!
  createdAt: ISO8601DateTime!
  creditNotes: [CreditNote!]
  creditNotesAmountCents: BigInt!
  creditableAmountCents: BigInt!
  currency: CurrencyEnum
  customer: Customer!
  errorDetails: [ErrorDetail!]
  externalIntegrationId: String
  fees: [Fee!]
  feesAmountCents: BigInt!
  fileUrl: String
  id: ID!
  integrationSyncable: Boolean!
  invoiceSubscriptions: [InvoiceSubscription!]
  invoiceType: InvoiceTypeEnum!
  issuingDate: ISO8601Date!
  metadata: [InvoiceMetadata!]
  number: String!
  paymentDisputeLosable: Boolean!
  paymentDisputeLostAt: ISO8601DateTime
  paymentDueDate: ISO8601Date!
  paymentOverdue: Boolean!
  paymentStatus: InvoicePaymentStatusTypeEnum!
  prepaidCreditAmountCents: BigInt!
  progressiveBillingCreditAmountCents: BigInt!
  refundableAmountCents: BigInt!
  sequentialId: ID!
  status: InvoiceStatusTypeEnum!
  subTotalExcludingTaxesAmountCents: BigInt!
  subTotalIncludingTaxesAmountCents: BigInt!
  subscriptions: [Subscription!]
  taxProviderVoidable: Boolean!
  taxesAmountCents: BigInt!
  taxesRate: Float!
  totalAmountCents: BigInt!
  updatedAt: ISO8601DateTime!
  versionNumber: Int!
  voidable: Boolean!
}

type InvoiceAppliedTax implements AppliedTax {
  amountCents: BigInt!
  amountCurrency: CurrencyEnum!
  appliedOnWholeInvoice: Boolean!
  createdAt: ISO8601DateTime!
  enumedTaxCode: InvoiceAppliedTaxOnWholeInvoiceCodeEnum
  feesAmountCents: BigInt!
  id: ID!
  invoice: Invoice!
  tax: Tax
  taxCode: String!
  taxDescription: String
  taxName: String!
  taxRate: Float!
  updatedAt: ISO8601DateTime!
}

enum InvoiceAppliedTaxOnWholeInvoiceCodeEnum {
  customer_exempt
  juris_has_no_tax
  juris_not_taxed
  not_collecting
  reverse_charge
  transaction_exempt
  unknown_taxation
}

"""
InvoiceCollection type
"""
type InvoiceCollection {
  """
  A collection of paginated InvoiceCollection
  """
  collection: [Invoice!]!

  """
  Pagination Metadata for navigating the Pagination
  """
  metadata: CollectionMetadata!
}

"""
Invoice Item
"""
interface InvoiceItem {
  amountCents: BigInt!
  amountCurrency: CurrencyEnum!
  id: ID!
  itemCode: String!
  itemName: String!
  itemType: String!
}

"""
Attributes for invoice metadata object
"""
type InvoiceMetadata {
  createdAt: ISO8601DateTime!
  id: ID!
  key: String!
  updatedAt: ISO8601DateTime!
  value: String!
}

enum InvoicePaymentStatusTypeEnum {
  failed
  pending
  succeeded
}

enum InvoiceStatusTypeEnum {
  closed
  draft
  failed
  finalized
  generating
  open
  voided
}

type InvoiceSubscription {
  chargeAmountCents: BigInt!
  chargesFromDatetime: ISO8601DateTime
  chargesToDatetime: ISO8601DateTime
  fees: [Fee!]
  fromDatetime: ISO8601DateTime
  inAdvanceChargesFromDatetime: ISO8601DateTime
  inAdvanceChargesToDatetime: ISO8601DateTime
  invoice: Invoice!
  subscription: Subscription!
  subscriptionAmountCents: BigInt!
  toDatetime: ISO8601DateTime
  totalAmountCents: BigInt!
}

enum InvoiceTypeEnum {
  add_on
  advance_charges
  credit
  one_off
  progressive_billing
  subscription
}

"""
Represents untyped JSON
"""
scalar JSON

enum MappableTypeEnum {
  AddOn
  BillableMetric
}

type Mapping {
  externalAccountCode: String
  externalId: String!
  externalName: String
  id: ID!
  integrationId: ID!
  mappableId: ID!
  mappableType: MappableTypeEnum!
}

type Mutation {
  """
  Download customer portal invoice PDF
  """
  downloadCustomerPortalInvoice(
    """
    Parameters for DownloadCustomerPortalInvoice
    """
    input: DownloadCustomerPortalInvoiceInput!
  ): Invoice
}

type NetsuiteCustomer {
  externalCustomerId: String
  id: ID!
  integrationCode: String
  integrationId: ID
  integrationType: IntegrationTypeEnum
  subsidiaryId: String
  syncWithProvider: Boolean
}

"""
Safe Organization Type
"""
type Organization {
  billingConfiguration: OrganizationBillingConfiguration
  defaultCurrency: CurrencyEnum!
  id: ID!
  logoUrl: String
  name: String!
  timezone: TimezoneEnum
}

type OrganizationBillingConfiguration {
  documentLocale: String
  id: ID!
  invoiceFooter: String
  invoiceGracePeriod: Int!
}

type OverdueBalance {
  amountCents: BigInt!
  currency: CurrencyEnum!
  lagoInvoiceIds: [String!]!
  month: ISO8601DateTime!
}

"""
OverdueBalanceCollection type
"""
type OverdueBalanceCollection {
  """
  A collection of paginated OverdueBalanceCollection
  """
  collection: [OverdueBalance!]!

  """
  Pagination Metadata for navigating the Pagination
  """
  metadata: CollectionMetadata!
}

type Plan {
  activeSubscriptionsCount: Int!
  amountCents: BigInt!
  amountCurrency: CurrencyEnum!
  billChargesMonthly: Boolean
  charges: [Charge!]

  """
  Number of charges attached to a plan
  """
  chargesCount: Int!
  code: String!
  createdAt: ISO8601DateTime!

  """
  Number of customers attached to a plan
  """
  customersCount: Int!
  description: String
  draftInvoicesCount: Int!
  id: ID!
  interval: PlanInterval!
  invoiceDisplayName: String
  minimumCommitment: Commitment
  name: String!
  organization: Organization
  parent: Plan
  payInAdvance: Boolean!
  subscriptionsCount: Int!
  taxes: [Tax!]
  trialPeriod: Float
  updatedAt: ISO8601DateTime!
  usageThresholds: [UsageThreshold!]
}

enum PlanInterval {
  monthly
  quarterly
  weekly
  yearly
}

type Properties {
  amount: String
  customProperties: JSON
  fixedAmount: String
  freeUnits: BigInt
  freeUnitsPerEvents: BigInt
  freeUnitsPerTotalAggregation: String
  graduatedPercentageRanges: [GraduatedPercentageRange!]
  graduatedRanges: [GraduatedRange!]
  groupedBy: [String!]
  packageSize: BigInt
  perTransactionMaxAmount: String
  perTransactionMinAmount: String
  rate: String
  volumeRanges: [VolumeRange!]
}

type ProviderCustomer {
  id: ID!
  providerCustomerId: ID
  providerPaymentMethods: [ProviderPaymentMethodsEnum!]
  syncWithProvider: Boolean
}

enum ProviderPaymentMethodsEnum {
  bacs_debit
  card
  link
  sepa_debit
  us_bank_account
}

enum ProviderTypeEnum {
  adyen
  gocardless
  stripe
}

type Query {
  """
  Query invoice collections of a customer portal user
  """
  customerPortalInvoiceCollections(expireCache: Boolean, months: Int): FinalizedInvoiceCollectionCollection!

  """
  Query invoices of a customer
  """
  customerPortalInvoices(limit: Int, page: Int, searchTerm: String, status: [InvoiceStatusTypeEnum!]): InvoiceCollection!

  """
  Query customer portal organization
  """
  customerPortalOrganization: Organization

  """
  Query overdue balances of a customer portal user
  """
  customerPortalOverdueBalances(expireCache: Boolean, months: Int): OverdueBalanceCollection!

  """
  Query a customer portal user
  """
  customerPortalUser: Customer
}

enum RegroupPaidFeesEnum {
  invoice
}

enum StatusTypeEnum {
  active
  canceled
  pending
  terminated
}

type Subscription {
  billingTime: BillingTimeEnum
  canceledAt: ISO8601DateTime
  createdAt: ISO8601DateTime!
  customer: Customer!
  endingAt: ISO8601DateTime
  externalId: String!
  fees: [Fee!]
  id: ID!
  lifetimeUsage: SubscriptionLifetimeUsage
  name: String
  nextName: String
  nextPendingStartDate: ISO8601Date
  nextPlan: Plan
  nextSubscription: Subscription
  periodEndDate: ISO8601Date
  plan: Plan!
  startedAt: ISO8601DateTime
  status: StatusTypeEnum
  subscriptionAt: ISO8601DateTime
  terminatedAt: ISO8601DateTime
  updatedAt: ISO8601DateTime!
}

type SubscriptionLifetimeUsage {
  lastThresholdAmountCents: BigInt
  nextThresholdAmountCents: BigInt
  nextThresholdRatio: Float
  totalUsageAmountCents: BigInt!
  totalUsageFromDatetime: ISO8601DateTime!
  totalUsageToDatetime: ISO8601DateTime!
}

type Tax {
  """
  Number of add ons using this tax
  """
  addOnsCount: Int!
  appliedToOrganization: Boolean!
  autoGenerated: Boolean!

  """
  Number of charges using this tax
  """
  chargesCount: Int!
  code: String!
  createdAt: ISO8601DateTime!

  """
  Number of customers using this tax
  """
  customersCount: Int!
  description: String
  id: ID!
  name: String!
  organization: Organization

  """
  Number of plans using this tax
  """
  plansCount: Int!
  rate: Float!
  updatedAt: ISO8601DateTime!
}

enum TimezoneEnum {
  """
  Africa/Algiers
  """
  TZ_AFRICA_ALGIERS

  """
  Africa/Cairo
  """
  TZ_AFRICA_CAIRO

  """
  Africa/Casablanca
  """
  TZ_AFRICA_CASABLANCA

  """
  Africa/Harare
  """
  TZ_AFRICA_HARARE

  """
  Africa/Johannesburg
  """
  TZ_AFRICA_JOHANNESBURG

  """
  Africa/Monrovia
  """
  TZ_AFRICA_MONROVIA

  """
  Africa/Nairobi
  """
  TZ_AFRICA_NAIROBI

  """
  America/Argentina/Buenos_Aires
  """
  TZ_AMERICA_ARGENTINA_BUENOS_AIRES

  """
  America/Bogota
  """
  TZ_AMERICA_BOGOTA

  """
  America/Caracas
  """
  TZ_AMERICA_CARACAS

  """
  America/Chicago
  """
  TZ_AMERICA_CHICAGO

  """
  America/Chihuahua
  """
  TZ_AMERICA_CHIHUAHUA

  """
  America/Denver
  """
  TZ_AMERICA_DENVER

  """
  America/Godthab
  """
  TZ_AMERICA_GODTHAB

  """
  America/Guatemala
  """
  TZ_AMERICA_GUATEMALA

  """
  America/Guyana
  """
  TZ_AMERICA_GUYANA

  """
  America/Halifax
  """
  TZ_AMERICA_HALIFAX

  """
  America/Indiana/Indianapolis
  """
  TZ_AMERICA_INDIANA_INDIANAPOLIS

  """
  America/Juneau
  """
  TZ_AMERICA_JUNEAU

  """
  America/La_Paz
  """
  TZ_AMERICA_LA_PAZ

  """
  America/Lima
  """
  TZ_AMERICA_LIMA

  """
  America/Los_Angeles
  """
  TZ_AMERICA_LOS_ANGELES

  """
  America/Mazatlan
  """
  TZ_AMERICA_MAZATLAN

  """
  America/Mexico_City
  """
  TZ_AMERICA_MEXICO_CITY

  """
  America/Monterrey
  """
  TZ_AMERICA_MONTERREY

  """
  America/Montevideo
  """
  TZ_AMERICA_MONTEVIDEO

  """
  America/New_York
  """
  TZ_AMERICA_NEW_YORK

  """
  America/Phoenix
  """
  TZ_AMERICA_PHOENIX

  """
  America/Puerto_Rico
  """
  TZ_AMERICA_PUERTO_RICO

  """
  America/Regina
  """
  TZ_AMERICA_REGINA

  """
  America/Santiago
  """
  TZ_AMERICA_SANTIAGO

  """
  America/Sao_Paulo
  """
  TZ_AMERICA_SAO_PAULO

  """
  America/St_Johns
  """
  TZ_AMERICA_ST_JOHNS

  """
  America/Tijuana
  """
  TZ_AMERICA_TIJUANA

  """
  Asia/Almaty
  """
  TZ_ASIA_ALMATY

  """
  Asia/Baghdad
  """
  TZ_ASIA_BAGHDAD

  """
  Asia/Baku
  """
  TZ_ASIA_BAKU

  """
  Asia/Bangkok
  """
  TZ_ASIA_BANGKOK

  """
  Asia/Chongqing
  """
  TZ_ASIA_CHONGQING

  """
  Asia/Colombo
  """
  TZ_ASIA_COLOMBO

  """
  Asia/Dhaka
  """
  TZ_ASIA_DHAKA

  """
  Asia/Hong_Kong
  """
  TZ_ASIA_HONG_KONG

  """
  Asia/Irkutsk
  """
  TZ_ASIA_IRKUTSK

  """
  Asia/Jakarta
  """
  TZ_ASIA_JAKARTA

  """
  Asia/Jerusalem
  """
  TZ_ASIA_JERUSALEM

  """
  Asia/Kabul
  """
  TZ_ASIA_KABUL

  """
  Asia/Kamchatka
  """
  TZ_ASIA_KAMCHATKA

  """
  Asia/Karachi
  """
  TZ_ASIA_KARACHI

  """
  Asia/Kathmandu
  """
  TZ_ASIA_KATHMANDU

  """
  Asia/Kolkata
  """
  TZ_ASIA_KOLKATA

  """
  Asia/Krasnoyarsk
  """
  TZ_ASIA_KRASNOYARSK

  """
  Asia/Kuala_Lumpur
  """
  TZ_ASIA_KUALA_LUMPUR

  """
  Asia/Kuwait
  """
  TZ_ASIA_KUWAIT

  """
  Asia/Magadan
  """
  TZ_ASIA_MAGADAN

  """
  Asia/Muscat
  """
  TZ_ASIA_MUSCAT

  """
  Asia/Novosibirsk
  """
  TZ_ASIA_NOVOSIBIRSK

  """
  Asia/Rangoon
  """
  TZ_ASIA_RANGOON

  """
  Asia/Riyadh
  """
  TZ_ASIA_RIYADH

  """
  Asia/Seoul
  """
  TZ_ASIA_SEOUL

  """
  Asia/Shanghai
  """
  TZ_ASIA_SHANGHAI

  """
  Asia/Singapore
  """
  TZ_ASIA_SINGAPORE

  """
  Asia/Srednekolymsk
  """
  TZ_ASIA_SREDNEKOLYMSK

  """
  Asia/Taipei
  """
  TZ_ASIA_TAIPEI

  """
  Asia/Tashkent
  """
  TZ_ASIA_TASHKENT

  """
  Asia/Tbilisi
  """
  TZ_ASIA_TBILISI

  """
  Asia/Tehran
  """
  TZ_ASIA_TEHRAN

  """
  Asia/Tokyo
  """
  TZ_ASIA_TOKYO

  """
  Asia/Ulaanbaatar
  """
  TZ_ASIA_ULAANBAATAR

  """
  Asia/Urumqi
  """
  TZ_ASIA_URUMQI

  """
  Asia/Vladivostok
  """
  TZ_ASIA_VLADIVOSTOK

  """
  Asia/Yakutsk
  """
  TZ_ASIA_YAKUTSK

  """
  Asia/Yekaterinburg
  """
  TZ_ASIA_YEKATERINBURG

  """
  Asia/Yerevan
  """
  TZ_ASIA_YEREVAN

  """
  Atlantic/Azores
  """
  TZ_ATLANTIC_AZORES

  """
  Atlantic/Cape_Verde
  """
  TZ_ATLANTIC_CAPE_VERDE

  """
  Atlantic/South_Georgia
  """
  TZ_ATLANTIC_SOUTH_GEORGIA

  """
  Australia/Adelaide
  """
  TZ_AUSTRALIA_ADELAIDE

  """
  Australia/Brisbane
  """
  TZ_AUSTRALIA_BRISBANE

  """
  Australia/Canberra
  """
  TZ_AUSTRALIA_CANBERRA

  """
  Australia/Darwin
  """
  TZ_AUSTRALIA_DARWIN

  """
  Australia/Hobart
  """
  TZ_AUSTRALIA_HOBART

  """
  Australia/Melbourne
  """
  TZ_AUSTRALIA_MELBOURNE

  """
  Australia/Perth
  """
  TZ_AUSTRALIA_PERTH

  """
  Australia/Sydney
  """
  TZ_AUSTRALIA_SYDNEY

  """
  Etc/GMT+12
  """
  TZ_ETC_GMT_12

  """
  Europe/Amsterdam
  """
  TZ_EUROPE_AMSTERDAM

  """
  Europe/Athens
  """
  TZ_EUROPE_ATHENS

  """
  Europe/Belgrade
  """
  TZ_EUROPE_BELGRADE

  """
  Europe/Berlin
  """
  TZ_EUROPE_BERLIN

  """
  Europe/Bratislava
  """
  TZ_EUROPE_BRATISLAVA

  """
  Europe/Brussels
  """
  TZ_EUROPE_BRUSSELS

  """
  Europe/Bucharest
  """
  TZ_EUROPE_BUCHAREST

  """
  Europe/Budapest
  """
  TZ_EUROPE_BUDAPEST

  """
  Europe/Copenhagen
  """
  TZ_EUROPE_COPENHAGEN

  """
  Europe/Dublin
  """
  TZ_EUROPE_DUBLIN

  """
  Europe/Helsinki
  """
  TZ_EUROPE_HELSINKI

  """
  Europe/Istanbul
  """
  TZ_EUROPE_ISTANBUL

  """
  Europe/Kaliningrad
  """
  TZ_EUROPE_KALININGRAD

  """
  Europe/Kiev
  """
  TZ_EUROPE_KIEV

  """
  Europe/Lisbon
  """
  TZ_EUROPE_LISBON

  """
  Europe/Ljubljana
  """
  TZ_EUROPE_LJUBLJANA

  """
  Europe/London
  """
  TZ_EUROPE_LONDON

  """
  Europe/Madrid
  """
  TZ_EUROPE_MADRID

  """
  Europe/Minsk
  """
  TZ_EUROPE_MINSK

  """
  Europe/Moscow
  """
  TZ_EUROPE_MOSCOW

  """
  Europe/Paris
  """
  TZ_EUROPE_PARIS

  """
  Europe/Prague
  """
  TZ_EUROPE_PRAGUE

  """
  Europe/Riga
  """
  TZ_EUROPE_RIGA

  """
  Europe/Rome
  """
  TZ_EUROPE_ROME

  """
  Europe/Samara
  """
  TZ_EUROPE_SAMARA

  """
  Europe/Sarajevo
  """
  TZ_EUROPE_SARAJEVO

  """
  Europe/Skopje
  """
  TZ_EUROPE_SKOPJE

  """
  Europe/Sofia
  """
  TZ_EUROPE_SOFIA

  """
  Europe/Stockholm
  """
  TZ_EUROPE_STOCKHOLM

  """
  Europe/Tallinn
  """
  TZ_EUROPE_TALLINN

  """
  Europe/Vienna
  """
  TZ_EUROPE_VIENNA

  """
  Europe/Vilnius
  """
  TZ_EUROPE_VILNIUS

  """
  Europe/Volgograd
  """
  TZ_EUROPE_VOLGOGRAD

  """
  Europe/Warsaw
  """
  TZ_EUROPE_WARSAW

  """
  Europe/Zagreb
  """
  TZ_EUROPE_ZAGREB

  """
  Europe/Zurich
  """
  TZ_EUROPE_ZURICH

  """
  Pacific/Apia
  """
  TZ_PACIFIC_APIA

  """
  Pacific/Auckland
  """
  TZ_PACIFIC_AUCKLAND

  """
  Pacific/Chatham
  """
  TZ_PACIFIC_CHATHAM

  """
  Pacific/Fakaofo
  """
  TZ_PACIFIC_FAKAOFO

  """
  Pacific/Fiji
  """
  TZ_PACIFIC_FIJI

  """
  Pacific/Guadalcanal
  """
  TZ_PACIFIC_GUADALCANAL

  """
  Pacific/Guam
  """
  TZ_PACIFIC_GUAM

  """
  Pacific/Honolulu
  """
  TZ_PACIFIC_HONOLULU

  """
  Pacific/Majuro
  """
  TZ_PACIFIC_MAJURO

  """
  Pacific/Midway
  """
  TZ_PACIFIC_MIDWAY

  """
  Pacific/Noumea
  """
  TZ_PACIFIC_NOUMEA

  """
  Pacific/Pago_Pago
  """
  TZ_PACIFIC_PAGO_PAGO

  """
  Pacific/Port_Moresby
  """
  TZ_PACIFIC_PORT_MORESBY

  """
  Pacific/Tongatapu
  """
  TZ_PACIFIC_TONGATAPU

  """
  UTC
  """
  TZ_UTC
}

type UsageThreshold {
  amountCents: BigInt!
  createdAt: ISO8601DateTime!
  id: ID!
  recurring: Boolean!
  thresholdDisplayName: String
  updatedAt: ISO8601DateTime!
}

type VolumeRange {
  flatAmount: String!
  fromValue: BigInt!
  perUnitAmount: String!
  toValue: BigInt
}

enum WeightedIntervalEnum {
  seconds
}

type XeroCustomer {
  externalCustomerId: String
  id: ID!
  integrationCode: String
  integrationId: ID
  integrationType: IntegrationTypeEnum
  syncWithProvider: Boolean
}
